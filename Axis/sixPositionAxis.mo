within OM_SP7.Axis;

model sixPositionAxis
  Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b[6] annotation(
    Placement(visible = true, transformation(origin = {96, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {123, -1}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
  OM_SP7.Axis.PositionAxis positionAxis1(DParam1Position = 0, DParam1Velocity = 0, DParam2Position = 0, DParam2Velocity = 0, DParamCurrent = 0, IClip1Position = 500, IClip1Velocity = 500, IClip2Position = 1000, IClip2Velocity = 1000, IClipCurrent = 1000, IParam1Position = 0, IParam1Velocity = 200, IParam2Position = 0, IParam2Velocity = 600, IParamCurrent = 4000, PIDPeriodCurrent = 0.001, PIDPeriodPosition = 0.001, PParam1Position = 50, PParam1Velocity = 200, PParam2Position = 50, PParam2Velocity = 800, PParamCurrent = 4000, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumPWM = 32767, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24, thresholdPosition = 0, thresholdVelocity = 0) annotation(
    Placement(visible = true, transformation(extent = {{-12, 56}, {8, 76}}, rotation = 0)));
  OM_SP7.Axis.PositionAxis positionAxis2(DParam1Position = 0, DParam1Velocity = 0, DParam2Position = 0, DParam2Velocity = 0, DParamCurrent = 0, IClip1Position = 500, IClip1Velocity = 500, IClip2Position = 1000, IClip2Velocity = 1000, IClipCurrent = 1000, IParam1Position = 0, IParam1Velocity = 200, IParam2Position = 0, IParam2Velocity = 600, IParamCurrent = 4000, PIDPeriodCurrent = 0.001, PIDPeriodPosition = 0.001, PParam1Position = 50, PParam1Velocity = 200, PParam2Position = 50, PParam2Velocity = 800, PParamCurrent = 4000, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumPWM = 32767, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24, thresholdPosition = 0, thresholdVelocity = 0) annotation(
    Placement(visible = true, transformation(extent = {{-12, 30}, {8, 50}}, rotation = 0)));
  OM_SP7.Axis.PositionAxis positionAxis3(DParam1Position = 0, DParam1Velocity = 0, DParam2Position = 0, DParam2Velocity = 0, DParamCurrent = 0, IClip1Position = 500, IClip1Velocity = 500, IClip2Position = 1000, IClip2Velocity = 1000, IClipCurrent = 1000, IParam1Position = 0, IParam1Velocity = 200, IParam2Position = 0, IParam2Velocity = 600, IParamCurrent = 4000, PIDPeriodCurrent = 0.001, PIDPeriodPosition = 0.001, PParam1Position = 50, PParam1Velocity = 200, PParam2Position = 50, PParam2Velocity = 800, PParamCurrent = 4000, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumPWM = 32767, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24, thresholdPosition = 0, thresholdVelocity = 0) annotation(
    Placement(visible = true, transformation(extent = {{-12, 4}, {8, 24}}, rotation = 0)));
  OM_SP7.Axis.PositionAxis positionAxis4(DParam1Position = 0, DParam1Velocity = 0, DParam2Position = 0, DParam2Velocity = 0, DParamCurrent = 0, IClip1Position = 500, IClip1Velocity = 500, IClip2Position = 1000, IClip2Velocity = 1000, IClipCurrent = 1000, IParam1Position = 0, IParam1Velocity = 200, IParam2Position = 0, IParam2Velocity = 600, IParamCurrent = 4000, PIDPeriodCurrent = 0.001, PIDPeriodPosition = 0.001, PParam1Position = 50, PParam1Velocity = 200, PParam2Position = 50, PParam2Velocity = 800, PParamCurrent = 4000, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumPWM = 32767, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24, thresholdPosition = 0, thresholdVelocity = 0) annotation(
    Placement(visible = true, transformation(extent = {{-12, -22}, {8, -2}}, rotation = 0)));
  OM_SP7.Axis.PositionAxis positionAxis6(DParam1Position = 0, DParam1Velocity = 0, DParam2Position = 0, DParam2Velocity = 0, DParamCurrent = 0, IClip1Position = 500, IClip1Velocity = 500, IClip2Position = 1000, IClip2Velocity = 1000, IClipCurrent = 1000, IParam1Position = 0, IParam1Velocity = 200, IParam2Position = 0, IParam2Velocity = 600, IParamCurrent = 4000, PIDPeriodCurrent = 0.001, PIDPeriodPosition = 0.001, PParam1Position = 50, PParam1Velocity = 200, PParam2Position = 50, PParam2Velocity = 800, PParamCurrent = 4000, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumPWM = 32767, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24, thresholdPosition = 0, thresholdVelocity = 0) annotation(
    Placement(visible = true, transformation(extent = {{-12, -72}, {8, -52}}, rotation = 0)));
  OM_SP7.Axis.PositionAxis positionAxis5(DParam1Position = 0, DParam1Velocity = 0, DParam2Position = 0, DParam2Velocity = 0, DParamCurrent = 0, IClip1Position = 500, IClip1Velocity = 500, IClip2Position = 1000, IClip2Velocity = 1000, IClipCurrent = 1000, IParam1Position = 0, IParam1Velocity = 200, IParam2Position = 0, IParam2Velocity = 600, IParamCurrent = 4000, PIDPeriodCurrent = 0.001, PIDPeriodPosition = 0.001, PParam1Position = 50, PParam1Velocity = 200, PParam2Position = 50, PParam2Velocity = 800, PParamCurrent = 4000, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumPWM = 32767, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24, thresholdPosition = 0, thresholdVelocity = 0) annotation(
    Placement(visible = true, transformation(extent = {{-12, -48}, {8, -28}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput joint1SetPosition annotation(
    Placement(visible = true, transformation(extent = {{-84, 56}, {-64, 76}}, rotation = 0), iconTransformation(origin = {-110, -66}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput joint2SetPosition annotation(
    Placement(visible = true, transformation(extent = {{-84, 30}, {-64, 50}}, rotation = 0), iconTransformation(origin = {-110, -40}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput joint3SetPosition annotation(
    Placement(visible = true, transformation(extent = {{-84, 4}, {-64, 24}}, rotation = 0), iconTransformation(origin = {-110, -14}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput joint4SetPosition annotation(
    Placement(visible = true, transformation(extent = {{-84, -22}, {-64, -2}}, rotation = 0), iconTransformation(origin = {-110, 12}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput joint5SetPosition annotation(
    Placement(visible = true, transformation(extent = {{-84, -48}, {-64, -28}}, rotation = 0), iconTransformation(origin = {-110, 40}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Blocks.Interfaces.RealInput joint6SetPosition annotation(
    Placement(visible = true, transformation(extent = {{-84, -72}, {-64, -52}}, rotation = 0), iconTransformation(origin = {-110, 66}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
equation
  connect(positionAxis1.flange_b, flange_b[1]) annotation(
    Line(points = {{6, 66}, {62, 66}, {62, 0}, {96, 0}}));
  connect(positionAxis2.flange_b, flange_b[2]) annotation(
    Line(points = {{6, 40}, {62, 40}, {62, 0}, {96, 0}}));
  connect(positionAxis3.flange_b, flange_b[3]) annotation(
    Line(points = {{6, 14}, {62, 14}, {62, 0}, {96, 0}}));
  connect(positionAxis4.flange_b, flange_b[4]) annotation(
    Line(points = {{6, -12}, {62, -12}, {62, 0}, {96, 0}}));
  connect(positionAxis5.flange_b, flange_b[5]) annotation(
    Line(points = {{6, -38}, {62, -38}, {62, 0}, {96, 0}}));
  connect(positionAxis6.flange_b, flange_b[6]) annotation(
    Line(points = {{6, -62}, {62, -62}, {62, 0}, {96, 0}}));
  connect(joint1SetPosition, positionAxis1.setPosition) annotation(
    Line(points = {{-74, 66}, {-2, 66}}, color = {0, 0, 127}));
  connect(joint2SetPosition, positionAxis2.setPosition) annotation(
    Line(points = {{-74, 40}, {-2, 40}}, color = {0, 0, 127}));
  connect(joint3SetPosition, positionAxis3.setPosition) annotation(
    Line(points = {{-74, 14}, {-2, 14}}, color = {0, 0, 127}));
  connect(joint4SetPosition, positionAxis4.setPosition) annotation(
    Line(points = {{-74, -12}, {-2, -12}}, color = {0, 0, 127}));
  connect(joint5SetPosition, positionAxis5.setPosition) annotation(
    Line(points = {{-74, -38}, {0, -38}, {0, -36}, {-2, -36}, {-2, -38}}, color = {0, 0, 127}));
  connect(joint6SetPosition, positionAxis6.setPosition) annotation(
    Line(points = {{-74, -62}, {-2, -62}}, color = {0, 0, 127}));
annotation(
    Icon(graphics = {Text(origin = {-7, -112}, lineColor = {0, 0, 255}, fillColor = {0, 0, 255}, fillPattern = FillPattern.Solid, extent = {{-63, 18}, {63, -18}}, textString = "%name"), Bitmap(origin = {5, -7}, extent = {{-103, -55}, {103, 55}}, imageSource = "")}));
end sixPositionAxis;
