package OM_SP7_Zup
  model fullModel
    OM_SP7_Zup.Body.six_rss_closedloop SP7 annotation(
      Placement(visible = true, transformation(origin = {116, 8.88178e-16}, extent = {{-28, -28}, {28, 28}}, rotation = 0)));
    OM_SP7_Zup.Axis.sixPositionAxis sixPositionAxis annotation(
      Placement(visible = true, transformation(origin = {-20, 7.10543e-15}, extent = {{-30, -30}, {30, 30}}, rotation = 0)));
    inner Modelica.Mechanics.MultiBody.World world(label2 = "z", n = {0, 0, -1}) annotation(
      Placement(visible = true, transformation(origin = {86, -74}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Modelica.Blocks.Sources.CombiTimeTable jointSpace(columns = 2:8, fileName = Modelica.Utilities.Files.loadResource("file://D:/Roberto/OpenModelica/PlatformPath.txt"), tableName = "LegLengths", tableOnFile = true) annotation(
      Placement(visible = true, transformation(origin = {-146, 4}, extent = {{-24, -24}, {24, 24}}, rotation = 0)));
  equation
    when sample(0, 1) then
      print("Time =" + String(time) + "\n");
    end when;
    connect(sixPositionAxis.flange_b[:], SP7.flange_a[:]) annotation(
      Line(points = {{9.1, 0.3}, {88.1, 0.3}}, thickness = 0.5));
    connect(sixPositionAxis.flange_vertical, SP7.flange_vertical) annotation(
      Line(points = {{9.1, 11.1}, {70.1, 11.1}, {70.1, 36.1}, {116.1, 36.1}, {116.1, 25.1}}, thickness = 0.5));
    connect(jointSpace.y[1], sixPositionAxis.joint1SetPosition) annotation(
      Line(points = {{-120, 4}, {-88, 4}, {-88, 20}, {-50, 20}}, color = {0, 0, 127}));
    connect(jointSpace.y[2], sixPositionAxis.joint2SetPosition) annotation(
      Line(points = {{-120, 4}, {-72, 4}, {-72, 12}, {-50, 12}}, color = {0, 0, 127}));
    connect(jointSpace.y[3], sixPositionAxis.joint3SetPosition) annotation(
      Line(points = {{-120, 4}, {-50, 4}}, color = {0, 0, 127}));
    connect(jointSpace.y[4], sixPositionAxis.joint4SetPosition) annotation(
      Line(points = {{-120, 4}, {-72, 4}, {-72, -4}, {-50, -4}}, color = {0, 0, 127}));
    connect(jointSpace.y[5], sixPositionAxis.joint5SetPosition) annotation(
      Line(points = {{-120, 4}, {-88, 4}, {-88, -12}, {-50, -12}}, color = {0, 0, 127}));
    connect(jointSpace.y[6], sixPositionAxis.joint6SetPosition) annotation(
      Line(points = {{-120, 4}, {-88, 4}, {-88, -20}, {-50, -20}}, color = {0, 0, 127}));
    connect(jointSpace.y[7], sixPositionAxis.joint7SetPosition) annotation(
      Line(points = {{-120, 4}, {-100, 4}, {-100, 50}, {-20, 50}, {-20, 30}}, color = {0, 0, 127}));
    annotation(
      Diagram(coordinateSystem(extent = {{-200, -100}, {200, 100}})),
      Icon(coordinateSystem(extent = {{-200, -100}, {200, 100}})),
      __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian -d=infoXmlOperations -d=infoXmlOperations -d=backenddaeinfo -d=stateselection -d=discreteinfo",
      __OpenModelica_simulationFlags(lv = "LOG_STATS", s = "cvode", ls = "totalpivot"),
      experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-06, Interval = 0.0111111));
  end fullModel;

  package Controller
    package Components
      model P2V "output a signal from a pwm input signal"
        Modelica.Blocks.Interfaces.RealInput inputPWM annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput outputVoltage annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        parameter Modelica.SIunits.Voltage maximumVoltage = 24 "voltage source range = (-maximum_voltage) - maximum_voltage";
        parameter Real maximumPWM = 100 "pwm input range = (-maximum_pwm) - maximum_pwm";
      equation
        outputVoltage = inputPWM / maximumPWM * maximumVoltage;
        annotation(
          Icon(graphics = {Text(extent = {{-100, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "%name"), Rectangle(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255}), Text(extent = {{-60, 22}, {60, -28}}, lineColor = {0, 0, 255}, textString = "P2V")}),
          Diagram(graphics = {Text(extent = {{-50, 30}, {50, -30}}, lineColor = {0, 0, 255}, textString = "P2V"), Rectangle(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255})}));
      end P2V;

      model Gain2
        import Modelica.Blocks.Interfaces;
        parameter Real k1 "first gain parameter";
        parameter Real k2 "second gain parameter";
        parameter Real threshold "Threshold value";
        Real gain;
        Interfaces.RealInput inputGain2 annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput outputGain2 annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        Interfaces.RealInput feedbackVelocity annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
      equation
        gain = if abs(feedbackVelocity) < threshold and threshold > 0 then k1 + abs(feedbackVelocity) / threshold * (k2 - k1) else k2;
        outputGain2 = gain * inputGain2;
        annotation(
          Diagram(graphics = {Polygon(points = {{-100, 100}, {-100, -100}, {100, 0}, {-100, 100}}, lineColor = {0, 0, 225}), Ellipse(extent = {{-10, 10}, {10, -10}}, lineColor = {0, 0, 255}), Line(points = {{0, -100}, {0, -10}}, color = {0, 0, 255}), Text(extent = {{-80, 60}, {0, 0}}, lineColor = {0, 0, 225}, textString = "k1"), Text(extent = {{-80, 0}, {0, -60}}, lineColor = {0, 0, 225}, textString = "k2")}),
          Icon(graphics = {Text(extent = {{-100, 140}, {100, 100}}, lineColor = {0, 0, 255}, textString = "%name"), Polygon(points = {{-100, 100}, {-100, -100}, {100, 0}, {-100, 100}}, lineColor = {0, 0, 225}), Ellipse(extent = {{-10, 10}, {10, -10}}, lineColor = {0, 0, 255}), Line(points = {{0, -100}, {0, -10}}, color = {0, 0, 255}), Text(extent = {{-80, 60}, {0, 0}}, lineColor = {0, 0, 225}, textString = "k1"), Text(extent = {{-80, 0}, {0, -60}}, lineColor = {0, 0, 225}, textString = "k2")}));
      end Gain2;

      model DiscreteDerivative
        import Modelica.Blocks.Interfaces;
        import Modelica.Blocks.Discrete;
        import Modelica.Blocks.Math;
        parameter Modelica.SIunits.Time SampleTime;
        Interfaces.RealInput inputValue annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput outputValue annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        Discrete.UnitDelay UnitDelay1(samplePeriod = SampleTime) annotation(
          Placement(transformation(extent = {{-10, 10}, {10, 30}}, rotation = 0)));
        Math.Add Add1(k1 = 1, k2 = -1) annotation(
          Placement(transformation(extent = {{30, -10}, {50, 10}}, rotation = 0)));
        Discrete.ZeroOrderHold ZeroOrderHold1(samplePeriod = SampleTime) annotation(
          Placement(transformation(extent = {{-48, -10}, {-28, 10}}, rotation = 0)));
      equation
        connect(UnitDelay1.y, Add1.u1) annotation(
          Line(points = {{11, 20}, {20, 20}, {20, 6}, {28, 6}}, color = {0, 0, 127}));
        connect(Add1.y, outputValue) annotation(
          Line(points = {{51, 0}, {80.5, 0}, {80.5, 0}, {110, 0}}, color = {0, 0, 127}));
        connect(inputValue, ZeroOrderHold1.u) annotation(
          Line(points = {{-120, 0}, {-50, 0}}, color = {0, 0, 127}));
        connect(ZeroOrderHold1.y, UnitDelay1.u) annotation(
          Line(points = {{-27, 0}, {-20, 0}, {-20, 20}, {-12, 20}}, color = {0, 0, 127}));
        connect(ZeroOrderHold1.y, Add1.u2) annotation(
          Line(points = {{-27, 0}, {-20, 0}, {-20, -6}, {28, -6}}, color = {0, 0, 127}));
        annotation(
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics),
          DymolaStoredErrors,
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Text(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255}, textString = "  E(t-1) - E(t)  "), Rectangle(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255}), Text(extent = {{-100, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "%name")}));
      end DiscreteDerivative;

      model Limiter2 "Clip signal with a threshold and 2 parameter set"
        Real clip;
        import Modelica.Blocks.Interfaces;
        parameter Real k1 "first clip value";
        parameter Real k2 "second clip value";
        parameter Real threshold "Threshold value";
        Interfaces.RealInput inputClip annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput outputClip annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        Interfaces.RealInput feedbackVelocity annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
      equation
        clip = if abs(feedbackVelocity) < threshold and threshold > 0 then k1 + abs(feedbackVelocity) / threshold * (k2 - k1) else k2;
        outputClip = if abs(inputClip) < clip then inputClip else if abs(inputClip) > clip and inputClip > 0 then clip else -clip;
        annotation(
          Diagram(graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}), Text(extent = {{60, 60}, {100, 20}}, lineColor = {0, 0, 255}, textString = "k2"), Text(extent = {{60, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "k1"), Line(points = {{0, 80}, {0, -80}}, color = {0, 0, 255}), Line(points = {{-80, 0}, {80, 0}}, color = {0, 0, 255}), Line(points = {{80, 60}, {20, 60}, {-20, -60}, {-80, -60}}, color = {95, 95, 95}), Line(points = {{80, 20}, {18, 20}, {-20, -20}, {-80, -20}}, color = {95, 95, 95}, pattern = LinePattern.Dot, thickness = 0.5)}),
          Icon(graphics = {Text(extent = {{-100, 140}, {100, 100}}, lineColor = {0, 0, 255}, textString = "%name"), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}), Text(extent = {{60, 60}, {100, 20}}, lineColor = {0, 0, 255}, textString = "k2"), Text(extent = {{60, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "k1"), Line(points = {{-80, 0}, {80, 0}}, color = {0, 0, 255}), Line(points = {{80, 60}, {20, 60}, {-20, -60}, {-80, -60}}, color = {95, 95, 95}), Line(points = {{80, 20}, {18, 20}, {-20, -20}, {-80, -20}}, color = {95, 95, 95}, pattern = LinePattern.Dot, thickness = 0.5), Line(points = {{0, 80}, {0, -80}}, color = {0, 0, 255})}),
          DymolaStoredErrors);
      end Limiter2;

      model VelocityRampGenerator
        import Modelica.SIunits;
        import Modelica.Blocks.Interfaces;
        parameter SIunits.AngularVelocity maximumVelocity;
        parameter SIunits.AngularAcceleration acceleration;
        parameter SIunits.Angle positionTolerance;
        parameter SIunits.AngularVelocity velocityTolerance;
        parameter SIunits.Angle stoppingDistanceAdjustment = 0.1;
        SIunits.AngularAcceleration setAcceleration;
        SIunits.AngularVelocity velocity;
        SIunits.Angle stoppingDistance;
        parameter SIunits.Time startTime = 1 "Start time when Velocity Ramp Generator is active";
        Boolean positionEndFlag(start = false);
        Boolean positionReachFlag(start = true);
        Interfaces.RealInput feedbackPosition annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput setVelocity annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
      public
        Interfaces.RealInput feedbackVelocity annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
      equation
        positionReachFlag = if abs(feedbackPosition) < positionTolerance and abs(feedbackVelocity) < velocityTolerance then true else false;
        stoppingDistance = 0.5 * feedbackVelocity ^ 2 / acceleration + stoppingDistanceAdjustment;
        positionEndFlag = if positionReachFlag then false else if abs(feedbackPosition) > stoppingDistance then false else true;
        setAcceleration = if positionEndFlag then if abs(velocity) < 0.001 then 0 else if velocity < 0 then acceleration else -acceleration else if positionReachFlag or time < startTime then 0 else if abs(velocity) < maximumVelocity then if feedbackPosition < 0 then -acceleration else acceleration else 0;
        der(velocity) = setAcceleration;
        velocity = setVelocity;
        when positionReachFlag and abs(velocity) > 0 then
          reinit(velocity, 0);
        end when;
        annotation(
          extent = [12, -38; 32, -18],
          Diagram(graphics),
          Icon(graphics = {Line(points = {{-60, 60}, {-60, -60}, {60, -60}}, color = {0, 0, 255}), Line(points = {{-40, -60}, {-20, 0}, {20, 0}, {40, -60}}, color = {0, 0, 0}), Text(extent = {{-100, 140}, {100, 100}}, lineColor = {0, 0, 255}, textString = "%name"), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255})}),
          Placement(transformation(extent = {{12, -38}, {32, -18}}, rotation = 0)),
          Diagram);
      end VelocityRampGenerator;
    end Components;

    package PIDs
      model PositionPID
        import Modelica.SIunits;
        import OM_SP7_Zup.Controller.Components;
        Modelica.Blocks.Interfaces.RealOutput setVelocity annotation(
          Placement(transformation(extent = {{200, -20}, {240, 20}}, rotation = 0)));
        parameter Real gearRatio = 1 / 156;
        parameter Integer encoderTickPerRound = 4000;
        parameter SIunits.AngularVelocity maximumVelocity = 10 "rad/s, maximum allowable velocity";
        parameter SIunits.Time PIDPeriod = 0.001 "s, pid time period";
        parameter Integer IClip = 0 "Integral Clip Limit";
        parameter Integer PParam = 0 "Proportional gain 1";
        parameter Integer IParam = 0 "Integral gain 1";
        parameter Integer DParam = 0 "Derivative gain 1";
        Modelica.Blocks.Math.Add3 sum annotation(
          Placement(transformation(extent = {{80, -10}, {100, 10}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput positionError annotation(
          Placement(transformation(extent = {{-240, -20}, {-200, 20}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gearBoxNormalization(k = 2 / gearRatio * Modelica.Constants.pi) annotation(
          Placement(transformation(extent = {{120, -10}, {140, 10}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter positionErrorLimiter(uMax = 65535 / encoderTickPerRound * 2 / gearRatio * Modelica.Constants.pi, uMin = -positionErrorLimiter.uMax) annotation(
          Placement(transformation(extent = {{-180, -10}, {-160, 10}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter setVelocityLimiter(uMax = maximumVelocity, uMin = -setVelocityLimiter.uMax) annotation(
          Placement(transformation(extent = {{160, -10}, {180, 10}}, rotation = 0)));
        Components.DiscreteDerivative discreteDerivative(SampleTime = PIDPeriod) annotation(
          Placement(transformation(extent = {{-60, -50}, {-40, -30}}, rotation = 0)));
        Modelica.Blocks.Continuous.Integrator integrator annotation(
          Placement(transformation(extent = {{-100, -10}, {-80, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gain(k = PParam) annotation(
          Placement(visible = true, transformation(origin = {20, 40}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter limiter(limitsAtInit = true, uMax = IClip * 0.001 * maximumVelocity, uMin = -limiter.uMax) annotation(
          Placement(visible = true, transformation(origin = {-36, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gain1(k = IParam) annotation(
          Placement(visible = true, transformation(origin = {20, 0}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gain2(k = DParam) annotation(
          Placement(visible = true, transformation(origin = {20, -40}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      equation
        connect(sum.y, gearBoxNormalization.u) annotation(
          Line(points = {{101, 0}, {118, 0}}, color = {0, 0, 127}));
        connect(gearBoxNormalization.y, setVelocityLimiter.u) annotation(
          Line(points = {{141, 0}, {158, 0}}, color = {0, 0, 127}));
        connect(setVelocityLimiter.y, setVelocity) annotation(
          Line(points = {{181, 0}, {220, 0}}, color = {0, 0, 127}));
        connect(positionError, positionErrorLimiter.u) annotation(
          Line(points = {{-220, 0}, {-182, 0}}, color = {0, 0, 127}));
        connect(positionErrorLimiter.y, integrator.u) annotation(
          Line(points = {{-159, 0}, {-102, 0}}, color = {0, 0, 127}));
        connect(positionErrorLimiter.y, discreteDerivative.inputValue) annotation(
          Line(points = {{-159, 0}, {-120, 0}, {-120, -40}, {-62, -40}}, color = {0, 0, 127}));
        connect(positionErrorLimiter.y, gain.u) annotation(
          Line(points = {{-158, 0}, {-120, 0}, {-120, 40}, {10, 40}}, color = {0, 0, 127}));
        connect(gain.y, sum.u1) annotation(
          Line(points = {{29, 40}, {60, 40}, {60, 8}, {78, 8}}, color = {0, 0, 127}));
        connect(integrator.y, limiter.u) annotation(
          Line(points = {{-78, 0}, {-48, 0}}, color = {0, 0, 127}));
        connect(limiter.y, gain1.u) annotation(
          Line(points = {{-24, 0}, {10, 0}}, color = {0, 0, 127}));
        connect(gain1.y, sum.u2) annotation(
          Line(points = {{28, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(discreteDerivative.outputValue, gain2.u) annotation(
          Line(points = {{-38, -40}, {10, -40}}, color = {0, 0, 127}));
        connect(gain2.y, sum.u3) annotation(
          Line(points = {{29, -40}, {60, -40}, {60, -8}, {78, -8}}, color = {0, 0, 127}));
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(lineColor = {0, 0, 255}, extent = {{-200, 100}, {200, -100}}), Text(textColor = {0, 0, 255}, extent = {{-198, 138}, {200, 100}}, textString = "%name"), Text(textColor = {0, 0, 255}, extent = {{-80, 80}, {80, 0}}, textString = "PID"), Text(textColor = {0, 0, 255}, extent = {{-80, 0}, {80, -80}}, textString = "Position")}),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics),
          DymolaStoredErrors);
      end PositionPID;

      model VelocityPID
        import Modelica.SIunits;
        import OM_SP7_Zup.Controller.Components;
        Modelica.Blocks.Interfaces.RealInput setVelocity annotation(
          Placement(transformation(extent = {{-240, -20}, {-200, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput setCurrent annotation(
          Placement(transformation(extent = {{200, -20}, {240, 20}}, rotation = 0)));
        parameter SIunits.Time PIDPeriod = 0.05 "Time period for PID controller";
        parameter Modelica.SIunits.Current maximumCurrent = 2.68 "maximum allowable current set";
        parameter Integer IClip "Integral Clip Limit 1";
        parameter Integer PParam "Proportional gain 1";
        parameter Integer IParam "Integral gain 2";
        parameter Integer DParam "Derivative gain 1";
        Modelica.Blocks.Math.Add3 sum annotation(
          Placement(transformation(extent = {{80, -10}, {100, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain currentNormalization(k = 0.001) annotation(
          Placement(transformation(extent = {{120, -10}, {140, 10}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter currentSetLimiter(uMax = maximumCurrent, uMin = -currentSetLimiter.uMax) annotation(
          Placement(transformation(extent = {{160, -10}, {180, 10}}, rotation = 0)));
        Components.DiscreteDerivative discreteDerivative(SampleTime = PIDPeriod) annotation(
          Placement(transformation(extent = {{-60, -50}, {-40, -30}}, rotation = 0)));
        Modelica.Blocks.Continuous.Integrator integrator annotation(
          Placement(transformation(extent = {{-80, -10}, {-60, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gain(k = PParam) annotation(
          Placement(visible = true, transformation(origin = {28, 40}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gain1(k = IParam) annotation(
          Placement(visible = true, transformation(origin = {28, 4.44089e-16}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gain2(k = DParam) annotation(
          Placement(visible = true, transformation(origin = {28, -40}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter limiter(limitsAtInit = true, uMax = IClip * 0.001 * maximumCurrent, uMin = -limiter.uMax) annotation(
          Placement(visible = true, transformation(origin = {-28, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      equation
        connect(sum.y, currentNormalization.u) annotation(
          Line(points = {{101, 0}, {118, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, currentSetLimiter.u) annotation(
          Line(points = {{141, 0}, {158, 0}}, color = {0, 0, 127}));
        connect(currentSetLimiter.y, setCurrent) annotation(
          Line(points = {{181, 0}, {220, 0}}, color = {0, 0, 127}));
        connect(gain.y, sum.u1) annotation(
          Line(points = {{37, 40}, {60, 40}, {60, 8}, {78, 8}}, color = {0, 0, 127}));
        connect(gain1.y, sum.u2) annotation(
          Line(points = {{37, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(discreteDerivative.outputValue, gain2.u) annotation(
          Line(points = {{-38, -40}, {18, -40}}, color = {0, 0, 127}));
        connect(gain2.y, sum.u3) annotation(
          Line(points = {{37, -40}, {60, -40}, {60, -8}, {78, -8}}, color = {0, 0, 127}));
        connect(integrator.y, limiter.u) annotation(
          Line(points = {{-58, 0}, {-40, 0}}, color = {0, 0, 127}));
        connect(limiter.y, gain1.u) annotation(
          Line(points = {{-16, 0}, {18, 0}}, color = {0, 0, 127}));
        connect(setVelocity, integrator.u) annotation(
          Line(points = {{-220, 0}, {-82, 0}}, color = {0, 0, 127}));
        connect(setVelocity, gain.u) annotation(
          Line(points = {{-220, 0}, {-120, 0}, {-120, 40}, {18, 40}}, color = {0, 0, 127}));
        connect(setVelocity, discreteDerivative.inputValue) annotation(
          Line(points = {{-220, 0}, {-120, 0}, {-120, -40}, {-62, -40}}, color = {0, 0, 127}));
        annotation(
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(lineColor = {0, 0, 255}, extent = {{-200, 100}, {200, -100}}), Text(textColor = {0, 0, 255}, extent = {{-80, 80}, {80, 0}}, textString = "PID"), Text(textColor = {0, 0, 255}, extent = {{-80, 0}, {80, -80}}, textString = "Velocity"), Text(textColor = {0, 0, 255}, extent = {{-198, 138}, {200, 100}}, textString = "%name")}),
          DymolaStoredErrors);
      end VelocityPID;

      model CurrentPID
        import Modelica.SIunits;
        import OM_SP7_Zup.Controller.Components;
        Modelica.Blocks.Interfaces.RealInput setCurrent annotation(
          Placement(transformation(extent = {{-240, -20}, {-200, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput setPWM annotation(
          Placement(transformation(extent = {{200, -20}, {240, 20}}, rotation = 0)));
        parameter SIunits.Time PIDPeriod = 0.05 "Time period for PID controller";
        parameter Integer maximumPWM = 32767 "PWM Input Limiter";
        parameter Integer IClip = 1000 "Integral Clip Limit";
        parameter Integer PParam = 4000 "Proportional gain";
        parameter Integer IParam = 4000 "Integral gain";
        parameter Integer DParam = 0 "Derivative gain";
        Modelica.Blocks.Math.Add3 sum annotation(
          Placement(transformation(extent = {{80, -10}, {100, 10}}, rotation = 0)));
        Components.DiscreteDerivative DiscreteDerivative1(SampleTime = PIDPeriod) annotation(
          Placement(transformation(extent = {{-60, -50}, {-40, -30}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter PWMLimiter(uMax = maximumPWM, uMin = -PWMLimiter.uMax) annotation(
          Placement(transformation(extent = {{130, -10}, {150, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain currentNormalization(k = 1000) annotation(
          Placement(transformation(extent = {{-130, -10}, {-110, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain integralGain(k = IParam) annotation(
          Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain derivativeGain(k = DParam) annotation(
          Placement(transformation(extent = {{20, -50}, {40, -30}}, rotation = 0)));
        Modelica.Blocks.Math.Gain proportionalGain(k = PParam) annotation(
          Placement(transformation(extent = {{-6, 30}, {14, 50}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter integralLimiter(limitsAtInit = true, uMax = IClip * 0.001 * maximumPWM, uMin = -integralLimiter.uMax) annotation(
          Placement(transformation(extent = {{-34, -10}, {-14, 10}}, rotation = 0)));
        Modelica.Blocks.Continuous.Integrator Integrator1 annotation(
          Placement(transformation(extent = {{-80, -10}, {-60, 10}}, rotation = 0)));
      equation
        connect(sum.y, PWMLimiter.u) annotation(
          Line(points = {{101, 0}, {128, 0}}, color = {0, 0, 127}));
        connect(PWMLimiter.y, setPWM) annotation(
          Line(points = {{151, 0}, {220, 0}}, color = {0, 0, 127}));
        connect(derivativeGain.y, sum.u3) annotation(
          Line(points = {{41, -40}, {60, -40}, {60, -8}, {78, -8}}, color = {0, 0, 127}));
        connect(integralGain.y, sum.u2) annotation(
          Line(points = {{41, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, proportionalGain.u) annotation(
          Line(points = {{-109, 0}, {-100, 0}, {-100, 40}, {-8, 40}}, color = {0, 0, 127}));
        connect(proportionalGain.y, sum.u1) annotation(
          Line(points = {{15, 40}, {60, 40}, {60, 8}, {78, 8}}, color = {0, 0, 127}));
        connect(integralLimiter.y, integralGain.u) annotation(
          Line(points = {{-13, 0}, {18, 0}}, color = {0, 0, 127}));
        connect(Integrator1.y, integralLimiter.u) annotation(
          Line(points = {{-59, 0}, {-36, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, Integrator1.u) annotation(
          Line(points = {{-109, 0}, {-82, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, DiscreteDerivative1.inputValue) annotation(
          Line(points = {{-109, 0}, {-100, 0}, {-100, -40}, {-62, -40}}, color = {0, 0, 127}));
        connect(DiscreteDerivative1.outputValue, derivativeGain.u) annotation(
          Line(points = {{-39, -40}, {18, -40}}, color = {0, 0, 127}));
        connect(setCurrent, currentNormalization.u) annotation(
          Line(points = {{-220, 0}, {-132, 0}}, color = {0, 0, 127}));
        annotation(
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(lineColor = {0, 0, 255}, extent = {{-200, 100}, {200, -100}}), Text(textColor = {0, 0, 255}, extent = {{-80, 80}, {80, 0}}, textString = "PID"), Text(textColor = {0, 0, 255}, extent = {{-80, 0}, {80, -80}}, textString = "Current"), Text(textColor = {0, 0, 255}, extent = {{-198, 138}, {200, 100}}, textString = "%name")}));
      end CurrentPID;
    end PIDs;

    package Modes
      model PositionMode
        import Modelica.SIunits;
        import Modelica.Blocks.Interfaces;
        import OM_SP7;
        Interfaces.RealInput positionFeedback annotation(
          Placement(transformation(origin = {-120, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        Modelica.Blocks.Interfaces.RealInput velocityFeedback annotation(
          Placement(visible = true, transformation(origin = {-28, -78}, extent = {{-10, -10}, {10, 10}}, rotation = 90), iconTransformation(extent = {{-10, -90}, {10, -70}}, rotation = 90)));
        Modelica.Blocks.Interfaces.RealInput currentFeedback annotation(
          Placement(visible = true, transformation(origin = {52, -78}, extent = {{-10, -10}, {10, 10}}, rotation = 90), iconTransformation(extent = {{110, -90}, {130, -70}}, rotation = 90)));
        OM_SP7_Zup.Controller.PIDs.PositionPID positionPID(DParam = DParamPosition, IClip = IClipPosition, IParam = IParamPosition, PIDPeriod = PIDPeriodPosition, PParam = PParamPosition, encoderTickPerRound = encoderTickPerRound, gearRatio = gearRatio, maximumVelocity = maximumVelocity) annotation(
          Placement(transformation(extent = {{-90, -10}, {-50, 10}}, rotation = 0)));
        OM_SP7_Zup.Controller.PIDs.VelocityPID velocityPID(DParam = DParamVelocity, IClip = IClipVelocity, IParam = IParamVelocity, PIDPeriod = PIDPeriodVelocity, PParam = PParamVelocity, maximumCurrent = maximumCurrent) annotation(
          Placement(visible = true, transformation(extent = {{-6, -10}, {34, 10}}, rotation = 0)));
        OM_SP7_Zup.Controller.PIDs.CurrentPID currentPID(maximumPWM = maximumPWM, PIDPeriod = PIDPeriodCurrent, IClip = IClipCurrent, PParam = PParamCurrent, IParam = IParamCurrent, DParam = DParamCurrent) annotation(
          Placement(transformation(extent = {{70, -10}, {110, 10}}, rotation = 0)));
        Interfaces.RealOutput setVoltage annotation(
          Placement(transformation(extent = {{170, -10}, {190, 10}}, rotation = 0)));
        OM_SP7_Zup.Controller.Components.P2V P2V1(maximumVoltage = motorVoltage, maximumPWM = maximumPWM) annotation(
          Placement(transformation(extent = {{130, -10}, {150, 10}}, rotation = 0)));
        parameter Real gearRatio = 156 "Gearbox Ratio";
        parameter Integer encoderTickPerRound = 4000 "Motor Encoder Tick";
        parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
        parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
        parameter Integer PParamPosition "|Position Controller||  parameter for proportional gain in position controller";
        parameter Integer IParamPosition "|Position Controller||  parameter for integral gain in position controller";
        parameter Integer DParamPosition "|Position Controller||  parameter for derivative gain in position controller";
        parameter Integer IClipPosition "|Position Controller||  parameter for integral clip in position controller";
        parameter Modelica.SIunits.Current maximumCurrent = 2.68 "|Velocity Controller|| maximum allowable current set";
        parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
        parameter Integer PParamVelocity "|Velocity Controller||  parameter for proportional gain in velocity controller";
        parameter Integer IParamVelocity "|Velocity Controller||  parameter for integral gain in velocity controller";
        parameter Integer DParamVelocity "|Velocity Controller||  parameter for derivative gain in velocity controller";
        parameter Integer IClipVelocity "|Velocity Controller||  parameter for integral clip in velocity controller";
        parameter Integer maximumPWM = 32767 "|Current Controller|| maximum allowable PWM set";
        parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
        parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
        parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
        parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
        parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
        parameter Real motorVoltage "(V) Source voltage";
        Modelica.Blocks.Interfaces.RealInput setPosition annotation(
          Placement(transformation(extent = {{-190, -10}, {-170, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Feedback feedback annotation(
          Placement(transformation(extent = {{-130, -10}, {-110, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Feedback feedback1 annotation(
          Placement(visible = true, transformation(extent = {{-38, -10}, {-18, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Feedback feedback2 annotation(
          Placement(visible = true, transformation(extent = {{42, -10}, {62, 10}}, rotation = 0)));
      equation
        connect(setPosition, feedback.u1) annotation(
          Line(points = {{-180, 0}, {-128, 0}}, color = {0, 0, 127}));
        connect(positionFeedback, feedback.u2) annotation(
          Line(points = {{-120, -80}, {-120, -8}}, color = {0, 0, 127}));
        connect(P2V1.outputVoltage, setVoltage) annotation(
          Line(points = {{151, 0}, {180, 0}}, color = {0, 0, 127}));
        connect(feedback.y, positionPID.positionError) annotation(
          Line(points = {{-111, 0}, {-92, 0}}, color = {0, 0, 127}));
        connect(currentPID.setPWM, P2V1.inputPWM) annotation(
          Line(points = {{112, 0}, {128, 0}}, color = {0, 0, 127}));
        connect(positionPID.setVelocity, feedback1.u1) annotation(
          Line(points = {{-48, 0}, {-36, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, feedback1.u2) annotation(
          Line(points = {{-28, -78}, {-28, -8}}, color = {0, 0, 127}));
        connect(velocityPID.setCurrent, feedback2.u1) annotation(
          Line(points = {{36, 0}, {44, 0}}, color = {0, 0, 127}));
        connect(feedback2.y, currentPID.setCurrent) annotation(
          Line(points = {{62, 0}, {68, 0}}, color = {0, 0, 127}));
        connect(feedback2.u2, currentFeedback) annotation(
          Line(points = {{52, -8}, {52, -78}}, color = {0, 0, 127}));
        connect(feedback1.y, velocityPID.setVelocity) annotation(
          Line(points = {{-18, 0}, {-8, 0}}, color = {0, 0, 127}));
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(lineColor = {0, 0, 255}, extent = {{-200, 100}, {200, -100}}), Text(textColor = {0, 0, 255}, extent = {{-160, 60}, {140, 0}}, textString = "Position"), Text(textColor = {0, 0, 255}, extent = {{-160, 0}, {140, -60}}, textString = "Mode")}),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics));
      end PositionMode;

      model VRampMode
        import OM_SP7;
        import Modelica.SIunits;
        import Modelica.Blocks.Math;
        import Modelica.Blocks.Interfaces;
        Interfaces.RealInput positionFeedback annotation(
          Placement(transformation(origin = {-140, -78}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        Interfaces.RealInput velocityFeedback annotation(
          Placement(transformation(origin = {40, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        Interfaces.RealInput currentFeedback annotation(
          Placement(transformation(origin = {100, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        OM_SP7_Zup.Controller.PIDs.VelocityPID velocityPID(PParam1 = PParam1Velocity, PParam2 = PParam2Velocity, IClip1 = IClip1Velocity, IClip2 = IClip2Velocity, IParam1 = IParam1Velocity, IParam2 = IParam2Velocity, DParam1 = DParam1Velocity, DParam2 = DParam2Velocity, threshold = thresholdVelocity, maximumCurrent = maximumCurrent, PIDPeriod = PIDPeriodVelocity) annotation(
          Placement(transformation(extent = {{20, -10}, {60, 10}}, rotation = 0)));
        OM_SP7_Zup.Controller.PIDs.CurrentPID currentPID(maximumPWM = maximumPWM, PIDPeriod = PIDPeriodCurrent, IClip = IClipCurrent, PParam = PParamCurrent, IParam = IParamCurrent, DParam = DParamCurrent) annotation(
          Placement(transformation(extent = {{80, -10}, {120, 10}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput setVoltage annotation(
          Placement(transformation(extent = {{170, -10}, {190, 10}}, rotation = 0)));
        OM_SP7_Zup.Controller.Components.P2V P2V1(maximumVoltage = motorVoltage, maximumPWM = 1799) annotation(
          Placement(transformation(extent = {{140, -10}, {160, 10}}, rotation = 0)));
      public
        parameter Integer encoderTickPerRound = 4000 "Motor Encoder Tick";
        parameter Real gearRatio = 156 "Gearbox Ratio";
        parameter SIunits.AngularVelocity thresholdPosition = 0 "|Position Controller|| threshold velocity for position controller";
        parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
        parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
        parameter Integer PParam1Position "|Position Controller|| first parameter for proportional gain in position controller";
        parameter Integer PParam2Position "|Position Controller|| second parameter for proportional gain in position controller";
        parameter Integer IParam1Position "|Position Controller|| first parameter for integral gain in position controller";
        parameter Integer IParam2Position "|Position Controller|| second parameter for integral gain in position controller";
        parameter Integer DParam1Position "|Position Controller|| first parameter for derivative gain in position controller";
        parameter Integer DParam2Position "|Position Controller|| second parameter for derivative gain in position controller";
        parameter Integer IClip1Position "|Position Controller|| first parameter for integral clip in position controller";
        parameter Integer IClip2Position "|Position Controller|| second parameter for integral clip in position controller";
        parameter SIunits.AngularAcceleration acceleration "|Velocity Ramp Generator|| Acceleration";
        parameter SIunits.Angle positionTolerance "|Velocity Ramp Generator|| Position tolerance";
        parameter SIunits.AngularVelocity velocityTolerance "|Velocity Ramp Generator|| Velocity tolerance";
        parameter SIunits.Angle stoppingDistanceAdjustment = 0.05 "|Velocity Ramp Generator|| Stopping distance adjusment";
        parameter SIunits.Time startTime = 0.1 "|Velocity Ramp Generator|| Time when Velocity Ramp Generator is active";
        parameter SIunits.AngularVelocity thresholdVelocity "|Velocity Controller|| threshold velocity for velocity controller";
        parameter Modelica.SIunits.Current maximumCurrent = 2.68 "|Velocity Controller|| maximum allowable current set";
        parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
        parameter Integer PParam1Velocity "|Velocity Controller|| first parameter for proportional gain in velocity controller";
        parameter Integer PParam2Velocity "|Velocity Controller|| second parameter for proportional gain in velocity controller";
        parameter Integer IParam1Velocity "|Velocity Controller|| first parameter for integral gain in velocity controller";
        parameter Integer IParam2Velocity "|Velocity Controller|| second parameter for integral gain in velocity controller";
        parameter Integer DParam1Velocity "|Velocity Controller|| first parameter for derivative gain in velocity controller";
        parameter Integer DParam2Velocity "|Velocity Controller|| second parameter for derivative gain in velocity controller";
        parameter Integer IClip1Velocity "|Velocity Controller|| first parameter for integral clip in velocity controller";
        parameter Integer IClip2Velocity "|Velocity Controller|| second parameter for integral clip in velocity controller";
        parameter Integer maximumPWM = 32767 "|Current Controller|| maximum allowable PWM set";
        parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
        parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
        parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
        parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
        parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
        parameter SIunits.Voltage motorVoltage " Source voltage";
        OM_SP7_Zup.Controller.Components.VelocityRampGenerator velocityRampGenerator(maximumVelocity = maximumVelocity, acceleration = acceleration, positionTolerance = positionTolerance, velocityTolerance = velocityTolerance, stoppingDistanceAdjustment = stoppingDistanceAdjustment, startTime = startTime) annotation(
          Placement(transformation(extent = {{-110, 20}, {-90, 40}}, rotation = 0)));
        Interfaces.RealInput setPosition annotation(
          Placement(transformation(extent = {{-190, -10}, {-170, 10}}, rotation = 0)));
        Math.Feedback feedback annotation(
          Placement(transformation(extent = {{-150, -10}, {-130, 10}}, rotation = 0)));
        OM_SP7_Zup.Controller.PIDs.PositionPID positionPID(threshold = thresholdPosition, IClip1 = IClip1Position, IClip2 = IClip2Position, PParam1 = PParam1Position, PParam2 = PParam2Position, IParam1 = IParam1Position, IParam2 = IParam2Position, DParam1 = DParam1Position, DParam2 = DParam2Position, encoderTickPerRound = encoderTickPerRound, maximumVelocity = maximumVelocity, gearRatio = gearRatio, PIDPeriod = PIDPeriodPosition) annotation(
          Placement(transformation(extent = {{-80, -40}, {-40, -20}}, rotation = 0)));
        Modelica.Blocks.Logical.Switch switch annotation(
          Placement(transformation(extent = {{-14, -10}, {6, 10}}, rotation = 0)));
        Modelica.Blocks.Sources.BooleanStep BooleanStep1(startTime = startTime, startValue = false) annotation(
          Placement(transformation(extent = {{-80, -10}, {-60, 10}}, rotation = 0)));
      equation
        connect(setPosition, feedback.u1) annotation(
          Line(points = {{-180, 0}, {-148, 0}}, color = {0, 0, 127}));
        connect(positionFeedback, feedback.u2) annotation(
          Line(points = {{-140, -78}, {-140, -8}}, color = {0, 0, 127}));
        connect(P2V1.outputVoltage, setVoltage) annotation(
          Line(points = {{161, 0}, {180, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, positionPID.velocityFeedback) annotation(
          Line(points = {{40, -80}, {40, -60}, {-60, -60}, {-60, -42}}, color = {0, 0, 127}));
        connect(switch.y, velocityPID.setVelocity) annotation(
          Line(points = {{7, 0}, {18, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, velocityPID.velocityFeedback) annotation(
          Line(points = {{40, -80}, {40, -12}}, color = {0, 0, 127}));
        connect(feedback.y, positionPID.positionError) annotation(
          Line(points = {{-131, 0}, {-120, 0}, {-120, -30}, {-82, -30}}, color = {0, 0, 127}));
        connect(positionPID.setVelocity, switch.u3) annotation(
          Line(points = {{-38, -30}, {-30, -30}, {-30, -8}, {-16, -8}}, color = {0, 0, 127}));
        connect(velocityPID.setCurrent, currentPID.setCurrent) annotation(
          Line(points = {{62, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(currentFeedback, currentPID.currentFeedback) annotation(
          Line(points = {{100, -80}, {100, -12}}, color = {0, 0, 127}));
        connect(currentPID.setPWM, P2V1.inputPWM) annotation(
          Line(points = {{122, 0}, {138, 0}}, color = {0, 0, 127}));
        connect(feedback.y, velocityRampGenerator.feedbackPosition) annotation(
          Line(points = {{-131, 0}, {-120, 0}, {-120, 30}, {-112, 30}}, color = {0, 0, 127}));
        connect(velocityFeedback, velocityRampGenerator.feedbackVelocity) annotation(
          Line(points = {{40, -80}, {40, -60}, {-100, -60}, {-100, 18}}, color = {0, 0, 127}));
        connect(velocityRampGenerator.setVelocity, switch.u1) annotation(
          Line(points = {{-89, 30}, {-30, 30}, {-30, 8}, {-16, 8}}, color = {0, 0, 127}));
        connect(BooleanStep1.y, switch.u2) annotation(
          Line(points = {{-59, 0}, {-16, 0}}, color = {255, 0, 255}));
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(extent = {{-200, 100}, {200, -100}}, lineColor = {0, 0, 255}), Text(extent = {{-160, 60}, {140, 0}}, lineColor = {0, 0, 255}, textString = "VRAmp"), Text(extent = {{-160, 0}, {140, -60}}, lineColor = {0, 0, 255}, textString = "Mode")}),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics));
      end VRampMode;
    end Modes;
  end Controller;

  package Body
    model six_rss_closedloop
      import Modelica.SIunits;
      constant SIunits.Length l = 0.7;
      constant SIunits.Length h = 0.2;
      constant SIunits.Angle alpha = 120 * (pi / 180);
      constant SIunits.Angle betha = 5 * (pi / 180);
      final constant Real pi = 2 * Modelica.Math.asin(1.0);
      OM_SP7_Zup.Body.base base1(useQuat = false) annotation(
        Placement(visible = true, transformation(origin = {-129, -15}, extent = {{-51, -51}, {51, 51}}, rotation = 0)));
      OM_SP7_Zup.Body.six_rss_legs six_rss_legs1(useQuat = false)  annotation(
        Placement(visible = true, transformation(origin = {0, -14}, extent = {{-42, -42}, {42, 42}}, rotation = 0)));
      OM_SP7_Zup.Body.platform platform1 annotation(
        Placement(visible = true, transformation(origin = {140.2, -18.5}, extent = {{-62.6, -52.1666}, {62.6, 52.1666}}, rotation = 0)));
  inner Modelica.Mechanics.MultiBody.World world(label2 = "z", n = {0, 0, -1})  annotation(
        Placement(visible = true, transformation(origin = {4, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(base1.frame_a[:], six_rss_legs1.frame_a[:]) annotation(
        Line(points = {{-76.47, -15.51}, {-41.47, -15.51}}, color = {95, 95, 95}, thickness = 0.5));
      connect(six_rss_legs1.frame_b[:], platform1.frame_b[:]) annotation(
        Line(points = {{42, -14}, {96, -14}}, color = {95, 95, 95}, thickness = 0.5));
    protected
      annotation(
        Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})),
        Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}), graphics = {Text(origin = {-2, -75}, textColor = {0, 60, 255}, extent = {{-54, 11}, {54, -11}}, textString = "%name"), Bitmap(origin = {4, 6}, rotation = 2, extent = {{78, -66}, {-78, 66}}, imageSource = "")}),
        __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian,nonewInst -d=stateselection -d=backenddaeinfo -d=discreteinfo --maxSizeLinearTearing=500",
        __OpenModelica_simulationFlags(s = "dassl"),
        experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-06, Interval = 0.002));
    end six_rss_closedloop;

    model base
      import Modelica.SIunits;
      import Modelica.Math;
      import Modelica.Constants;
      constant SIunits.Length l = 0.7;
      constant StateSelect stateSelect = StateSelect.prefer annotation(
        Dialog(tab = "Advanced"));
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120);
      parameter SIunits.Angle betha = Modelica.SIunits.Conversions.from_deg(5);
      parameter Real legBasePoints[6, 3] = {{l * cos(0 * alpha + betha), l * sin(0 * alpha + betha), 0}, {l * cos(1 * alpha + (-betha)), l * sin(1 * alpha + (-betha)), 0}, {l * cos(1 * alpha + betha), l * sin(1 * alpha + betha), 0}, {l * cos(2 * alpha + (-betha)), l * sin(2 * alpha + (-betha)), 0}, {l * cos(2 * alpha + betha), l * sin(2 * alpha + betha), 0}, {l * cos(0 * alpha + (-betha)), l * sin(0 * alpha + (-betha)), 0}};
    
      Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a[6] annotation(
        Placement(visible = true, transformation(origin = {104, 16}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {103, -1}, extent = {{-9, -9}, {9, 9}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed annotation(
        Placement(visible = true, transformation(origin = {-16, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed1(r = legBasePoints[1]) annotation(
        Placement(visible = true, transformation(origin = {54, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed2(r = legBasePoints[2]) annotation(
        Placement(visible = true, transformation(origin = {52, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed3(r = legBasePoints[3]) annotation(
        Placement(visible = true, transformation(origin = {-46, 76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed4(r = legBasePoints[4]) annotation(
        Placement(visible = true, transformation(origin = {-74, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed5(r = legBasePoints[5]) annotation(
        Placement(visible = true, transformation(origin = {-68, -26}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed6(r = legBasePoints[6]) annotation(
        Placement(visible = true, transformation(origin = {-44, -68}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Body base(enforceStates = stateSelect == StateSelect.always, m = 5, r_CM = {0, 0, 0}, useQuaternions = useQuat) annotation(
        Placement(visible = true, transformation(origin = {12, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    equation
      connect(fixed.frame_b, base.frame_a) annotation(
        Line(points = {{-6, 12}, {2, 12}}, color = {95, 95, 95}));
      connect(fixed1.frame_b, frame_a[1]) annotation(
        Line(points = {{64, -2}, {86, -2}, {86, 16}, {104, 16}}));
      connect(fixed2.frame_b, frame_a[2]) annotation(
        Line(points = {{62, 30}, {86, 30}, {86, 16}, {104, 16}}, color = {95, 95, 95}));
      connect(fixed3.frame_b, frame_a[3]) annotation(
        Line(points = {{-36, 76}, {86, 76}, {86, 16}, {104, 16}}));
      connect(fixed4.frame_b, frame_a[4]) annotation(
        Line(points = {{-64, 50}, {86, 50}, {86, 16}, {104, 16}}));
      connect(fixed5.frame_b, frame_a[5]) annotation(
        Line(points = {{-58, -26}, {86, -26}, {86, 16}, {104, 16}}));
      connect(fixed6.frame_b, frame_a[6]) annotation(
        Line(points = {{-34, -68}, {86, -68}, {86, 16}, {104, 16}}));
      annotation(
        uses(Modelica(version = "3.2.3")),
        Icon(graphics = {Bitmap(origin = {3, -5}, extent = {{97, -79}, {-97, 79}}, imageSource = ""), Text(origin = {0, -81}, textColor = {0, 0, 255}, extent = {{-54, 17}, {54, -17}}, textString = "%name")}));
    end base;

    model platform
      import Modelica.SIunits;
      import Modelica.Math;
      import Modelica.Constants;
      constant SIunits.Length l = 0.7;
      constant StateSelect stateSelect = StateSelect.prefer annotation(
        Dialog(tab = "Advanced"));
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120);
      parameter SIunits.Angle betha = Modelica.SIunits.Conversions.from_deg(5);
      parameter Real legPlatformRelativePositions[6, 3] = {{l * cos(0 * alpha + betha), l * sin(0 * alpha + betha), 0}, {l * cos(1 * alpha + (-betha)), l * sin(1 * alpha + (-betha)), 0}, {l * cos(1 * alpha + betha), l * sin(1 * alpha + betha), 0}, {l * cos(2 * alpha + (-betha)), l * sin(2 * alpha + (-betha)), 0}, {l * cos(2 * alpha + betha), l * sin(2 * alpha + betha), 0}, {l * cos(0 * alpha + (-betha)), l * sin(0 * alpha + (-betha)), 0}};
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation1(r = legPlatformRelativePositions[1]) annotation(
        Placement(visible = true, transformation(origin = {-10, 56}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation3(r = legPlatformRelativePositions[3]) annotation(
        Placement(visible = true, transformation(origin = {-10, 14}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation4(r = legPlatformRelativePositions[4]) annotation(
        Placement(visible = true, transformation(origin = {-10, -4}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation6(r = legPlatformRelativePositions[6]) annotation(
        Placement(visible = true, transformation(origin = {-10, -46}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation2(r = legPlatformRelativePositions[2]) annotation(
        Placement(visible = true, transformation(origin = {-10, 36}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.Body platform(angles_fixed = true, m = 1, r_0(each fixed = true, start = {0, 0, 0.401}), r_CM = {0, 0, 0}, useQuaternions = false) annotation(
        Placement(visible = true, transformation(origin = {92, 6}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation5(r = legPlatformRelativePositions[5]) annotation(
        Placement(visible = true, transformation(origin = {-10, -24}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  Modelica.Mechanics.MultiBody.Joints.Revolute j_vertical(n = {0, 0, 1}, phi(displayUnit = "rad", fixed = true), useAxisFlange = false) annotation(
        Placement(visible = true, transformation(origin = {60, 6}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b[6] annotation(
        Placement(visible = true, transformation(origin = {-84, 8}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
    equation
      connect(j_vertical.frame_b, platform.frame_a) annotation(
        Line(points = {{68, 6}, {84, 6}}, color = {95, 95, 95}));
      connect(fixedTranslation4.frame_a, j_vertical.frame_a) annotation(
        Line(points = {{0, -4}, {30, -4}, {30, 6}, {52, 6}}, color = {95, 95, 95}));
      connect(fixedTranslation5.frame_a, j_vertical.frame_a) annotation(
        Line(points = {{0, -24}, {30, -24}, {30, 6}, {52, 6}}));
      connect(fixedTranslation6.frame_a, j_vertical.frame_a) annotation(
        Line(points = {{0, -46}, {30, -46}, {30, 6}, {52, 6}}));
      connect(fixedTranslation3.frame_a, j_vertical.frame_a) annotation(
        Line(points = {{0, 14}, {30, 14}, {30, 6}, {52, 6}}));
      connect(fixedTranslation1.frame_a, j_vertical.frame_a) annotation(
        Line(points = {{0, 56}, {30, 56}, {30, 6}, {52, 6}}));
      connect(fixedTranslation2.frame_a, j_vertical.frame_a) annotation(
        Line(points = {{0, 36}, {30, 36}, {30, 6}, {52, 6}}, color = {95, 95, 95}));
      connect(fixedTranslation4.frame_b, frame_b[4]) annotation(
        Line(points = {{-20, -4}, {-52, -4}, {-52, 8}, {-84, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation1.frame_b, frame_b[1]) annotation(
        Line(points = {{-20, 56}, {-52, 56}, {-52, 8}, {-84, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation6.frame_b, frame_b[6]) annotation(
        Line(points = {{-20, -46}, {-52, -46}, {-52, 8}, {-84, 8}}));
      connect(fixedTranslation3.frame_b, frame_b[3]) annotation(
        Line(points = {{-20, 14}, {-52, 14}, {-52, 8}, {-84, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation5.frame_b, frame_b[5]) annotation(
        Line(points = {{-20, -24}, {-52, -24}, {-52, 8}, {-84, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation2.frame_b, frame_b[2]) annotation(
        Line(points = {{-20, 36}, {-52, 36}, {-52, 8}, {-84, 8}}, color = {95, 95, 95}));
      annotation(
        uses(Modelica(version = "3.2.3")),
        Icon(graphics = {Bitmap(origin = {3, 0}, extent = {{111, -88}, {-111, 88}}, imageSource = ""), Text(origin = {-5, -71}, textColor = {0, 60, 255}, extent = {{-115, 15}, {115, -15}}, textString = "%name")}, coordinateSystem(extent = {{-120, -100}, {120, 100}})),
        Diagram(coordinateSystem(extent = {{-120, -100}, {120, 100}})),
        __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian",
        __OpenModelica_simulationFlags(lv = "LOG_STATS", s = "cvode", ls = "totalpivot"),
        experiment(StartTime = 0, StopTime = 3, Tolerance = 1e-6, Interval = 0.08));
    end platform;

    model six_rss_legs
      outer Modelica.Mechanics.MultiBody.World world;
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
      Body.rss_leg rss_leg6(lefPositionConfig = {0, 1}, stateSelect = StateSelect.avoid) annotation(
        Placement(visible = true, transformation(origin = {1, -85}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg5(lefPositionConfig = {2, -1}, stateSelect = StateSelect.avoid) annotation(
        Placement(visible = true, transformation(origin = {1, -49}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg2(lefPositionConfig = {1, 1}) annotation(
        Placement(visible = true, transformation(origin = {1, 59}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg4(lefPositionConfig = {2, 1}, stateSelect = StateSelect.avoid) annotation(
        Placement(visible = true, transformation(origin = {1, -13}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg3(lefPositionConfig = {1, -1}) annotation(
        Placement(visible = true, transformation(origin = {1, 23}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg1(lefPositionConfig = {0, -1}, useQuat = useQuat) annotation(
        Placement(visible = true, transformation(origin = {1, 93}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a[6] annotation(
        Placement(visible = true, transformation(origin = {-98, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-98, -4}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b[6] annotation(
        Placement(visible = true, transformation(origin = {100, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
    equation
      connect(rss_leg1.frame_a, frame_a[1]) annotation(
        Line(points = {{-12, 90}, {-60, 90}, {-60, 0}, {-98, 0}}, color = {95, 95, 95}));
      connect(rss_leg2.frame_a, frame_a[2]) annotation(
        Line(points = {{-12, 56}, {-60, 56}, {-60, 0}, {-98, 0}}, color = {95, 95, 95}));
      connect(rss_leg3.frame_a, frame_a[3]) annotation(
        Line(points = {{-12, 20}, {-60, 20}, {-60, 0}, {-98, 0}}));
      connect(rss_leg4.frame_a, frame_a[4]) annotation(
        Line(points = {{-12, -16}, {-60, -16}, {-60, 0}, {-98, 0}}));
      connect(rss_leg5.frame_a, frame_a[5]) annotation(
        Line(points = {{-12, -52}, {-60, -52}, {-60, 0}, {-98, 0}}));
      connect(rss_leg6.frame_a, frame_a[6]) annotation(
        Line(points = {{-12, -88}, {-60, -88}, {-60, 0}, {-98, 0}}, color = {95, 95, 95}));
      connect(rss_leg1.frame_b, frame_b[1]) annotation(
        Line(points = {{14, 94}, {60, 94}, {60, 0}, {100, 0}}));
      connect(rss_leg2.frame_b, frame_b[2]) annotation(
        Line(points = {{14, 60}, {60, 60}, {60, 0}, {100, 0}}));
      connect(rss_leg3.frame_b, frame_b[3]) annotation(
        Line(points = {{14, 24}, {60, 24}, {60, 0}, {100, 0}}, color = {95, 95, 95}));
      connect(rss_leg4.frame_b, frame_b[4]) annotation(
        Line(points = {{14, -12}, {60, -12}, {60, 0}, {100, 0}}, color = {95, 95, 95}));
      connect(rss_leg5.frame_b, frame_b[5]) annotation(
        Line(points = {{14, -48}, {60, -48}, {60, 0}, {100, 0}}, color = {95, 95, 95}));
      connect(rss_leg6.frame_b, frame_b[6]) annotation(
        Line(points = {{14, -84}, {60, -84}, {60, 0}, {100, 0}}));
      annotation(
        Diagram(coordinateSystem(extent = {{-100, -110}, {100, 110}})),
        Icon(coordinateSystem(extent = {{-100, -110}, {100, 110}}), graphics = {Text(origin = {0, -59}, textColor = {0, 0, 255}, extent = {{-60, 25}, {60, -25}}, textString = "%name")}));
    end six_rss_legs;

    model rss_leg
      import Modelica.SIunits;
      import Modelica.Math;
      import Modelica.Constants;
      parameter SIunits.Length h = 0.2 "Rotational motor's horn anchor length";
      constant StateSelect stateSelect = StateSelect.prefer annotation(
        Dialog(tab = "Advanced"));
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120);
      parameter Integer lefPositionConfig[2] = {0, -1} "motorPair = 0/1/2   |   legPosition = -1(right)/1(left)";
      Modelica.Mechanics.MultiBody.Joints.Revolute j1(n = {cos(lefPositionConfig[1] * alpha), sin(lefPositionConfig[1] * alpha), 0}, phi(displayUnit = "rad", fixed = true, start = 0), useAxisFlange = false, w(fixed = false)) annotation(
        Placement(visible = true, transformation(origin = {-28, 0}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b annotation(
        Placement(visible = true, transformation(origin = {60, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {100, 6}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a annotation(
        Placement(visible = true, transformation(origin = {-62, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-100, -22}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Joints.SphericalSpherical sphericalSpherical(computeRodLength = true) annotation(
        Placement(visible = true, transformation(origin = {30, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.BodyShape horn(m = 0.01, r = {lefPositionConfig[2] * h * sin(lefPositionConfig[1] * alpha), -lefPositionConfig[2] * h * cos(lefPositionConfig[1] * alpha), 0}, r_CM = {lefPositionConfig[2] * h * sin(lefPositionConfig[1] * alpha) / 2, -lefPositionConfig[2] * h * cos(lefPositionConfig[1] * alpha) / 2, 0}, useQuaternions = false) annotation(
        Placement(visible = true, transformation(origin = {0, 0}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
    equation
      connect(sphericalSpherical.frame_b, frame_b) annotation(
        Line(points = {{40, 0}, {60, 0}}));
      connect(j1.frame_b, horn.frame_a) annotation(
        Line(points = {{-20, 0}, {-8, 0}}));
      connect(j1.frame_a, frame_a) annotation(
        Line(points = {{-36, 0}, {-62, 0}}, color = {95, 95, 95}));
      connect(horn.frame_b, sphericalSpherical.frame_a) annotation(
        Line(points = {{8, 0}, {20, 0}}));
      annotation(
        Icon(graphics = {Text(origin = {3, -124}, textColor = {0, 60, 255}, extent = {{-145, 32}, {145, -32}}, textString = "%name"), Bitmap(origin = {1, 0}, extent = {{-80, -90}, {80, 90}}, imageSource = "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")}),
        experiment(StartTime = 0, StopTime = 1, Tolerance = 1e-6, Interval = 0.002),
        __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian",
        __OpenModelica_simulationFlags(lv = "LOG_STATS", s = "dassl"));
    end rss_leg;
  end Body;

  package Axis
    model PositionAxis
      import Modelica.SIunits;
      Modelica.Electrical.Machines.BasicMachines.DCMachines.DC_PermanentMagnet DCPM(IaNominal = nominalCurrent, Jr = motorInertia + gearboxInertia, La = armatureInductance, Ra = armatureResistance, VaNominal = nominalVoltage, phiMechanical(displayUnit = "rad"), wMechanical(displayUnit = "rad/s"), wNominal = nominalRPM * 2 * 3.14159265358979323846 / 60) annotation(
        Placement(transformation(extent = {{-30, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage annotation(
        Placement(transformation(origin = {-20, 48}, extent = {{-10, 10}, {10, -10}}, rotation = 180)));
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(transformation(extent = {{10, 20}, {30, 40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.IdealGear idealGear(ratio = gearboxRatio, useSupport = false) annotation(
        Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation(
        Placement(transformation(extent = {{20, -80}, {0, -60}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation(
        Placement(transformation(extent = {{20, -60}, {0, -40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.BearingFriction bearingFriction(tau_pos = [0, 0.0328; 3, 0.063; 4, 0.0731], useSupport = false) annotation(
        Placement(visible = true, transformation(extent = {{62, -10}, {82, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput setPosition annotation(
        Placement(visible = true, transformation(origin = {-120, 0}, extent = {{10, 10}, {-10, -10}}, rotation = 180), iconTransformation(extent = {{-140, 10}, {-160, -10}}, rotation = 180)));
      parameter SIunits.Voltage nominalVoltage = 24 "|Motor||";
      parameter SIunits.Current nominalCurrent = 2.36 "|Motor||";
      parameter SIunits.Conversions.NonSIunits.AngularVelocity_rpm nominalRPM = 6700 "|Motor||";
      parameter SIunits.Resistance armatureResistance = 0.978 "|Motor||";
      parameter SIunits.Inductance armatureInductance = 0.000573 "|Motor||";
      parameter SIunits.Inertia motorInertia = 0.0000135 "|Motor||";
      parameter SIunits.Inertia gearboxInertia = 0.000000409 "|Motor||";
      parameter Real gearboxRatio = 100 "|Motor||";
      parameter Integer encoderTickPerRound = 4000 "|Motor||";
      parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
      parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
      parameter Integer PParamPosition "|Position Controller|| first parameter for proportional gain in position controller";
      parameter Integer IParamPosition "|Position Controller|| first parameter for integral gain in position controller";
      parameter Integer DParamPosition "|Position Controller|| first parameter for derivative gain in position controller";
      parameter Integer IClipPosition "|Position Controller|| first parameter for integral clip in position controller";
      parameter Modelica.SIunits.Current maximumCurrent = 2.68 "|Velocity Controller|| maximum allowable current set";
      parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
      parameter Integer PParamVelocity "|Velocity Controller|| first parameter for proportional gain in velocity controller";
      parameter Integer IParamVelocity "|Velocity Controller|| first parameter for integral gain in velocity controller";
      parameter Integer DParamVelocity "|Velocity Controller|| first parameter for derivative gain in velocity controller";
      parameter Integer IClipVelocity "|Velocity Controller|| first parameter for integral clip in velocity controller";
      parameter Integer maximumPWM = 32767 "|Current Controller|| maximum allowable PWM set";
      parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
      parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
      parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
      parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
      parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
      OM_SP7_Zup.Controller.Modes.PositionMode positionMode(DParamCurrent = DParamCurrent, DParamPosition = DParamPosition, DParamVelocity = DParamVelocity, IClipCurrent = IClipCurrent, IClipPosition = IClipPosition, IClipVelocity = IClipVelocity, IParamCurrent = IParamCurrent, IParamPosition = IParamPosition, IParamVelocity = IParamVelocity, PIDPeriodCurrent = PIDPeriodCurrent, PIDPeriodPosition = PIDPeriodPosition, PIDPeriodVelocity = PIDPeriodVelocity, PParamCurrent = PParamCurrent, PParamPosition = PParamPosition, PParamVelocity = PParamVelocity, encoderTickPerRound = encoderTickPerRound, gearRatio = idealGear.ratio, maximumCurrent = maximumCurrent, maximumPWM = maximumPWM, maximumVelocity = maximumVelocity, motorVoltage = nominalVoltage) annotation(
        Placement(visible = true, transformation(extent = {{-88, 60}, {-48, 80}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b annotation(
        Placement(visible = true, transformation(extent = {{110, -10}, {130, 10}}, rotation = 0), iconTransformation(extent = {{140, -10}, {160, 10}}, rotation = 0)));
    equation
      connect(ground.p, signalVoltage.p) annotation(
        Line(points = {{20, 40}, {20, 48}, {-10, 48}}, color = {0, 0, 255}));
      connect(idealGear.flange_b, bearingFriction.flange_a) annotation(
        Line(points = {{40, 0}, {62, 0}}));
      positionMode.currentFeedback = DCPM.airGapDC.ia;
      connect(signalVoltage.n, DCPM.pin_an) annotation(
        Line(points = {{-30, 48}, {-40, 48}, {-40, 10}, {-26, 10}}, color = {0, 0, 255}));
      connect(signalVoltage.p, DCPM.pin_ap) annotation(
        Line(points = {{-10, 48}, {0, 48}, {0, 10}, {-14, 10}}, color = {0, 0, 255}));
      connect(bearingFriction.flange_b, flange_b) annotation(
        Line(points = {{82, 0}, {120, 0}}));
      connect(speedSensor.flange, flange_b) annotation(
        Line(points = {{20, -50}, {100, -50}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(angleSensor.flange, flange_b) annotation(
        Line(points = {{20, -70}, {100, -70}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(DCPM.flange, idealGear.flange_a) annotation(
        Line(points = {{-10, 0}, {20, 0}}, color = {0, 0, 0}));
      connect(setPosition, positionMode.setPosition) annotation(
        Line(points = {{-120, 0}, {-100, 0}, {-100, 70}, {-86, 70}}, color = {0, 0, 127}));
      connect(speedSensor.w, positionMode.velocityFeedback) annotation(
        Line(points = {{-1, -50}, {-68, -50}, {-68, 62}}, color = {0, 0, 127}));
      connect(angleSensor.phi, positionMode.positionFeedback) annotation(
        Line(points = {{-1, -70}, {-80, -70}, {-80, 62}}, color = {0, 0, 127}));
      connect(positionMode.setVoltage, signalVoltage.v) annotation(
        Line(points = {{-50, 70}, {-20, 70}, {-20, 55}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Line(origin = {1.13699, 0}, points = {{0, 0}, {-58, 0}, {-58, 62}}, color = {0, 0, 255}, pattern = LinePattern.Dot)}),
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Rectangle(lineColor = {255, 128, 0}, fillColor = {255, 128, 0}, fillPattern = FillPattern.Solid, extent = {{-140, 60}, {140, -60}}), Text(origin = {-3, 2}, extent = {{-87, 26}, {87, 0}}, textString = "Position PID"), Text(origin = {-2, 0}, extent = {{-86, -1}, {82, -28}}, textString = "DC driver"), Text(textColor = {0, 0, 255}, extent = {{-140, 100}, {140, 60}}, textString = "%name")}));
    end PositionAxis;

    model VRampAxis
      import Modelica.SIunits;
      import Modelica.SIunits.Conversions.NonSIunits;
      Modelica.Electrical.Machines.BasicMachines.DCMachines.DC_PermanentMagnet DCPM(IaNominal = nominalCurrent, Jr = motorInertia + gearboxInertia, Ra = armatureResistance, La = armatureInductance, VaNominal = nominalVoltage, wNominal = nominalRPM * 2 * 3.14159265358979323846 / 60) annotation(
        Placement(transformation(extent = {{-30, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage annotation(
        Placement(transformation(origin = {-20, 48}, extent = {{-10, 10}, {10, -10}}, rotation = 180)));
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(transformation(extent = {{10, 20}, {30, 40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.IdealGear idealGear(ratio = gearboxRatio, useSupport = false) annotation(
        Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation(
        Placement(transformation(extent = {{20, -80}, {0, -60}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation(
        Placement(transformation(extent = {{20, -60}, {0, -40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.BearingFriction bearingFriction(tau_pos = [0, 0.0328; 3, 0.063; 4, 0.0731], useSupport = false) annotation(
        Placement(transformation(extent = {{60, -10}, {80, 10}}, rotation = 0)));
    public
      parameter SIunits.Voltage nominalVoltage = 24 "|Motor||";
      parameter SIunits.Current nominalCurrent = 2.36 "|Motor||";
      parameter SIunits.Conversions.NonSIunits.AngularVelocity_rpm nominalRPM = 6700 "|Motor||";
      parameter SIunits.Resistance armatureResistance = 0.978 "|Motor||";
      parameter SIunits.Inductance armatureInductance = 0.000573 "|Motor||";
      parameter SIunits.Inertia motorInertia = 0.0000135 "|Motor||";
      parameter SIunits.Inertia gearboxInertia = 0.000000409 "|Motor||";
      parameter Real gearboxRatio = 100 "|Motor||";
      parameter Integer encoderTickPerRound = 4000 "|Motor||";
      parameter SIunits.AngularAcceleration acceleration = 2 "|Velocity Ramp Generator|| Acceleration";
      parameter Real positionTolerance = 5 "|Velocity Ramp Generator|| Position tolerance, EncoderTick";
      parameter SIunits.AngularVelocity velocityTolerance "|Velocity Ramp Generator|| Velocity tolerance";
      parameter SIunits.Angle stoppingDistanceAdjustment = 0.05 "|Velocity Ramp Generator|| Stopping distance adjusment";
      parameter SIunits.Time startTime = 0.1 "|Velocity Ramp Generator|| Time when Velocity Ramp Generator is active";
      parameter SIunits.AngularVelocity thresholdPosition "|Position Controller|| threshold velocity for position controller";
      parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
      parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
      parameter Integer PParam1Position "|Position Controller|| first parameter for proportional gain in position controller";
      parameter Integer PParam2Position "|Position Controller|| second parameter for proportional gain in position controller";
      parameter Integer IParam1Position "|Position Controller|| first parameter for integral gain in position controller";
      parameter Integer IParam2Position "|Position Controller|| second parameter for integral gain in position controller";
      parameter Integer DParam1Position "|Position Controller|| first parameter for derivative gain in position controller";
      parameter Integer DParam2Position "|Position Controller|| second parameter for derivative gain in position controller";
      parameter Integer IClip1Position "|Position Controller|| first parameter for integral clip in position controller";
      parameter Integer IClip2Position "|Position Controller|| second parameter for integral clip in position controller";
      parameter SIunits.AngularVelocity thresholdVelocity "|Velocity Controller|| threshold velocity for velocity controller";
      parameter SIunits.Current maximumCurrent = 2 "|Velocity Controller|| (A), maximum allowable current set";
      parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
      parameter Integer PParam1Velocity "|Velocity Controller|| first parameter for proportional gain in velocity controller";
      parameter Integer PParam2Velocity "|Velocity Controller|| second parameter for proportional gain in velocity controller";
      parameter Integer IParam1Velocity "|Velocity Controller|| first parameter for integral gain in velocity controller";
      parameter Integer IParam2Velocity "|Velocity Controller|| second parameter for integral gain in velocity controller";
      parameter Integer DParam1Velocity "|Velocity Controller|| first parameter for derivative gain in velocity controller";
      parameter Integer DParam2Velocity "|Velocity Controller|| second parameter for derivative gain in velocity controller";
      parameter Integer IClip1Velocity "|Velocity Controller|| first parameter for integral clip in velocity controller";
      parameter Integer IClip2Velocity "|Velocity Controller|| second parameter for integral clip in velocity controller";
      parameter Integer maximumPWM "|Current Controller|| maximum allowable PWM set";
      parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
      parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
      parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
      parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
      parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
      Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b annotation(
        Placement(transformation(extent = {{110, -10}, {130, 10}}, rotation = 0)));
      OM_SP7_Zup.Controller.Modes.VRampMode Controller_VRampMode2_1(motorVoltage = nominalVoltage, maximumVelocity = maximumVelocity, thresholdVelocity = thresholdVelocity, maximumCurrent = maximumCurrent, PIDPeriodVelocity = PIDPeriodVelocity, PParam1Velocity = PParam1Velocity, PParam2Velocity = PParam2Velocity, IParam1Velocity = IParam1Velocity, IParam2Velocity = IParam2Velocity, DParam1Velocity = DParam1Velocity, DParam2Velocity = DParam2Velocity, IClip1Velocity = IClip1Velocity, IClip2Velocity = IClip2Velocity, velocityTolerance = velocityTolerance, PIDPeriodCurrent = PIDPeriodCurrent, PParamCurrent = PParamCurrent, IParamCurrent = IParamCurrent, DParamCurrent = DParamCurrent, IClipCurrent = IClipCurrent, acceleration = acceleration, stoppingDistanceAdjustment = stoppingDistanceAdjustment, PIDPeriodPosition = PIDPeriodPosition, PParam1Position = PParam1Position, PParam2Position = PParam2Position, IParam1Position = IParam1Position, IParam2Position = IParam2Position, DParam1Position = DParam1Position, DParam2Position = DParam2Position, IClip1Position = IClip1Position, IClip2Position = IClip2Position, thresholdPosition = thresholdPosition, startTime = 1, positionTolerance = positionTolerance / encoderTickPerRound * (65535 / encoderTickPerRound) * 2 / idealGear.ratio * Modelica.Constants.pi) annotation(
        Placement(transformation(extent = {{-90, 60}, {-48, 80}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput setPosition annotation(
        Placement(transformation(origin = {-120, 0}, extent = {{10, 10}, {-10, -10}}, rotation = 180)));
    equation
      connect(ground.p, signalVoltage.p) annotation(
        Line(points = {{20, 40}, {20, 48}, {-10, 48}}, color = {0, 0, 255}));
      connect(idealGear.flange_b, bearingFriction.flange_a) annotation(
        Line(points = {{40, 0}, {60, 0}}, color = {0, 0, 0}));
      Controller_VRampMode2_1.currentFeedback = DCPM.airGapDC.ia;
      connect(signalVoltage.n, DCPM.pin_an) annotation(
        Line(points = {{-30, 48}, {-40, 48}, {-40, 10}, {-26, 10}}, color = {0, 0, 255}));
      connect(signalVoltage.p, DCPM.pin_ap) annotation(
        Line(points = {{-10, 48}, {0, 48}, {0, 10}, {-14, 10}}, color = {0, 0, 255}));
      connect(speedSensor.flange, flange_b) annotation(
        Line(points = {{20, -50}, {100, -50}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(bearingFriction.flange_b, flange_b) annotation(
        Line(points = {{80, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(angleSensor.flange, flange_b) annotation(
        Line(points = {{20, -70}, {100, -70}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(DCPM.flange, idealGear.flange_a) annotation(
        Line(points = {{-10, 0}, {20, 0}}, color = {0, 0, 0}));
      connect(angleSensor.phi, Controller_VRampMode2_1.positionFeedback) annotation(
        Line(points = {{-1, -70}, {-83.7, -70}, {-83.7, 62.2}}, color = {0, 0, 127}));
      connect(Controller_VRampMode2_1.setVoltage, signalVoltage.v) annotation(
        Line(points = {{-50.1, 70}, {-20, 70}, {-20, 55}}, color = {0, 0, 127}));
      connect(setPosition, Controller_VRampMode2_1.setPosition) annotation(
        Line(points = {{-120, 0}, {-100, 0}, {-100, 70}, {-87.9, 70}}, color = {0, 0, 127}));
      connect(speedSensor.w, Controller_VRampMode2_1.velocityFeedback) annotation(
        Line(points = {{-1, -50}, {-64.8, -50}, {-64.8, 62}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Line(points = {{-58, 62}, {-58, 0}, {-30, 0}}, color = {0, 0, 255}, pattern = LinePattern.Dot)}),
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Rectangle(extent = {{-140, 60}, {140, -60}}, lineColor = {255, 128, 0}, fillColor = {255, 128, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-100, 40}, {100, 0}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, textString = "VRamp"), Text(extent = {{-102, -2}, {98, -42}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, textString = "Axis"), Text(extent = {{-140, 100}, {140, 60}}, lineColor = {0, 0, 255}, textString = "%name")}));
    end VRampAxis;

    model sixPositionAxis
      Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b[6] annotation(
        Placement(visible = true, transformation(origin = {96, -4}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {97, 1}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput joint1SetPosition annotation(
        Placement(visible = true, transformation(extent = {{-86, 48}, {-66, 68}}, rotation = 0), iconTransformation(origin = {-98, -64}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput joint2SetPosition annotation(
        Placement(visible = true, transformation(extent = {{-86, 22}, {-66, 42}}, rotation = 0), iconTransformation(origin = {-98, -38}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput joint3SetPosition annotation(
        Placement(visible = true, transformation(extent = {{-86, -4}, {-66, 16}}, rotation = 0), iconTransformation(origin = {-98, -12}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput joint4SetPosition annotation(
        Placement(visible = true, transformation(extent = {{-86, -30}, {-66, -10}}, rotation = 0), iconTransformation(origin = {-98, 14}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput joint5SetPosition annotation(
        Placement(visible = true, transformation(extent = {{-86, -56}, {-66, -36}}, rotation = 0), iconTransformation(origin = {-98, 42}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput joint6SetPosition annotation(
        Placement(visible = true, transformation(extent = {{-86, -80}, {-66, -60}}, rotation = 0), iconTransformation(origin = {-98, 68}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput joint7SetPosition annotation(
        Placement(visible = true, transformation(extent = {{-86, 74}, {-66, 94}}, rotation = 0), iconTransformation(origin = {0, 98}, extent = {{-6, -6}, {6, 6}}, rotation = -90)));
      Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_vertical annotation(
        Placement(visible = true, transformation(origin = {96, 28}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {97, 37}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
      OM_SP7_Zup.Axis.PositionAxis positionAxis3(DParamCurrent = 0, DParamPosition = 0, DParamVelocity = 0, IClipCurrent = 1000, IClipPosition = 1000, IClipVelocity = 1000, IParamCurrent = 4000, IParamPosition = 0, IParamVelocity = 600, PParamCurrent = 4000, PParamPosition = 50, PParamVelocity = 800, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24) annotation(
        Placement(visible = true, transformation(origin = {-6, 6}, extent = {{-14, -10}, {14, 10}}, rotation = 0)));
      OM_SP7_Zup.Axis.PositionAxis positionAxis4(DParamCurrent = 0, DParamPosition = 0, DParamVelocity = 0, IClipCurrent = 1000, IClipPosition = 1000, IClipVelocity = 1000, IParamCurrent = 4000, IParamPosition = 0, IParamVelocity = 600, PParamCurrent = 4000, PParamPosition = 50, PParamVelocity = 800, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24) annotation(
        Placement(visible = true, transformation(origin = {-6, -20}, extent = {{-14, -10}, {14, 10}}, rotation = 0)));
      OM_SP7_Zup.Axis.PositionAxis positionAxis5(DParamCurrent = 0, DParamPosition = 0, DParamVelocity = 0, IClipCurrent = 1000, IClipPosition = 1000, IClipVelocity = 1000, IParamCurrent = 4000, IParamPosition = 0, IParamVelocity = 600, PParamCurrent = 4000, PParamPosition = 50, PParamVelocity = 800, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24) annotation(
        Placement(visible = true, transformation(origin = {-6, -46}, extent = {{-14, -10}, {14, 10}}, rotation = 0)));
      OM_SP7_Zup.Axis.PositionAxis positionAxis6(DParamCurrent = 0, DParamPosition = 0, DParamVelocity = 0, IClipCurrent = 1000, IClipPosition = 1000, IClipVelocity = 1000, IParamCurrent = 4000, IParamPosition = 0, IParamVelocity = 600, PParamCurrent = 4000, PParamPosition = 50, PParamVelocity = 800, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24) annotation(
        Placement(visible = true, transformation(origin = {-6, -70}, extent = {{-14, -10}, {14, 10}}, rotation = 0)));
      OM_SP7_Zup.Axis.PositionAxis positionAxis_vertical(DParamCurrent = 0, DParamPosition = 0, DParamVelocity = 0, IClipCurrent = 1000, IClipPosition = 1000, IClipVelocity = 1000, IParamCurrent = 4000, IParamPosition = 0, IParamVelocity = 200, PParamCurrent = 4000, PParamPosition = 50, PParamVelocity = 200, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24) annotation(
        Placement(visible = true, transformation(origin = {-6, 84}, extent = {{-14, -10}, {14, 10}}, rotation = 0)));
      OM_SP7_Zup.Axis.PositionAxis positionAxis2(DParamCurrent = 0, DParamPosition = 0, DParamVelocity = 0, IClipCurrent = 1000, IClipPosition = 1000, IClipVelocity = 1000, IParamCurrent = 4000, IParamPosition = 0, IParamVelocity = 600, PParamCurrent = 4000, PParamPosition = 50, PParamVelocity = 800, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24) annotation(
        Placement(visible = true, transformation(origin = {-6, 32}, extent = {{-14, -10}, {14, 10}}, rotation = 0)));
      OM_SP7_Zup.Axis.PositionAxis positionAxis1(DParamCurrent = 0, DParamPosition = 0, DParamVelocity = 0, IClipCurrent = 1000, IClipPosition = 1000, IClipVelocity = 1000, IParamCurrent = 4000, IParamPosition = 0, IParamVelocity = 600, PParamCurrent = 4000, PParamPosition = 50, PParamVelocity = 800, armatureInductance = 0.00773, armatureResistance = 13.7, encoderTickPerRound = 4000, gearboxInertia = 0.000000071, gearboxRatio = 71, maximumCurrent = 1.75, maximumVelocity = 5.8997, motorInertia = 0.0000035, nominalCurrent = 0.49, nominalRPM = 2800, nominalVoltage = 24) annotation(
        Placement(visible = true, transformation(origin = {-6, 58}, extent = {{-14, -10}, {14, 10}}, rotation = 0)));
    equation
      connect(joint3SetPosition, positionAxis3.setPosition) annotation(
        Line(points = {{-76, 6}, {-21, 6}}, color = {0, 0, 127}));
      connect(joint4SetPosition, positionAxis4.setPosition) annotation(
        Line(points = {{-76, -20}, {-21, -20}}, color = {0, 0, 127}));
      connect(joint5SetPosition, positionAxis5.setPosition) annotation(
        Line(points = {{-76, -46}, {-20, -46}}, color = {0, 0, 127}));
      connect(joint7SetPosition, positionAxis_vertical.setPosition) annotation(
        Line(points = {{-76, 84}, {-21, 84}}, color = {0, 0, 127}));
      connect(joint6SetPosition, positionAxis6.setPosition) annotation(
        Line(points = {{-76, -70}, {-20, -70}}, color = {0, 0, 127}));
      connect(positionAxis_vertical.flange_b, flange_vertical) annotation(
        Line(points = {{9, 84}, {62, 84}, {62, 28}, {96, 28}}));
      connect(positionAxis3.flange_b, flange_b[3]) annotation(
        Line(points = {{10, 6}, {40, 6}, {40, -4}, {96, -4}}));
      connect(positionAxis4.flange_b, flange_b[4]) annotation(
        Line(points = {{10, -20}, {40, -20}, {40, -4}, {96, -4}}));
      connect(positionAxis5.flange_b, flange_b[5]) annotation(
        Line(points = {{10, -46}, {40, -46}, {40, -4}, {96, -4}}));
      connect(positionAxis6.flange_b, flange_b[6]) annotation(
        Line(points = {{10, -70}, {40, -70}, {40, -4}, {96, -4}}));
      connect(joint2SetPosition, positionAxis2.setPosition) annotation(
        Line(points = {{-76, 32}, {-21, 32}}, color = {0, 0, 127}));
      connect(positionAxis2.flange_b, flange_b[2]) annotation(
        Line(points = {{9, 32}, {40, 32}, {40, -4}, {96, -4}}));
      connect(joint1SetPosition, positionAxis1.setPosition) annotation(
        Line(points = {{-76, 58}, {-21, 58}}, color = {0, 0, 127}));
      connect(positionAxis1.flange_b, flange_b[1]) annotation(
        Line(points = {{10, 58}, {40, 58}, {40, -4}, {96, -4}}));
    protected
      annotation(
        Icon(graphics = {Text(origin = {-7, -112}, textColor = {0, 0, 255}, extent = {{-63, 18}, {63, -18}}, textString = "%name"), Bitmap(origin = {-2, 2}, extent = {{-104, -68}, {104, 68}}, imageSource = ""), Rectangle(origin = {55, 54}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-15, -12}, {15, 13}})}),
        __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian",
        __OpenModelica_simulationFlags(lv = "LOG_STATS", s = "dassl"));
    end sixPositionAxis;
  end Axis;

  package Utils
    model terminateSimulationOnKey
      parameter Modelica_DeviceDrivers.Blocks.InputDevices.Types.keyCodes keyCode = "Return";
      Modelica_DeviceDrivers.Blocks.InputDevices.KeyboardKeyInput keyboardKeyInput(keyCode = keyCode) annotation(
        Placement(visible = true, transformation(origin = {18, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica_DeviceDrivers.Blocks.OperatingSystem.SynchronizeRealtime synchronizeRealtime annotation(
        Placement(visible = true, transformation(extent = {{-30, -10}, {-10, 10}}, rotation = 0)));
      parameter String terminationText = "... End condition reached" "Text that will be displayed when simulation is terminated";
    protected
    equation
      when keyboardKeyInput.keyState == true then
        terminate(terminationText);
      end when;
      annotation(
        uses(Modelica_DeviceDrivers(version = "1.8.2"), Modelica(version = "3.2.3")),
        Icon(graphics = {Text(origin = {-4, -42}, extent = {{-192, 200}, {192, 150}}, textString = "%name"), Polygon(lineColor = {0, 0, 255}, fillColor = {255, 255, 255}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, points = {{0, -100}, {-80, -100}, {-88, -98}, {-94, -94}, {-98, -88}, {-100, -80}, {-100, 80}, {-98, 88}, {-94, 94}, {-88, 98}, {-80, 100}, {80, 100}, {88, 98}, {94, 94}, {98, 88}, {100, 80}, {100, -80}, {98, -88}, {94, -94}, {88, -98}, {80, -100}, {0, -100}}), Ellipse(origin = {0, 7}, lineColor = {199, 0, 0}, lineThickness = 5, extent = {{-45, 45}, {45, -45}}), Line(origin = {-1.42214, 5.81258}, rotation = 90, points = {{-30, 30}, {30, -30}, {30, -30}}, color = {199, 0, 0}, thickness = 5), Polygon(lineColor = {0, 0, 255}, fillColor = {236, 236, 236}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, points = {{-80, 80}, {80, 80}, {60, 78}, {-60, 78}, {-80, 80}}), Text(lineColor = {0, 0, 255}, fillColor = {236, 236, 236}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-100, 20}, {100, -20}}, textString = "%keyCode"), Rectangle(rotation = 180, lineColor = {0, 0, 255}, fillColor = {215, 215, 215}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, extent = {{-80, 80}, {80, -80}}), Polygon(lineColor = {0, 0, 255}, fillColor = {175, 175, 175}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, points = {{-80, 80}, {-60, 78}, {-60, -60}, {-80, -80}, {-80, 80}}), Line(origin = {-0.35, 5.87}, points = {{-30, 32}, {30, -30}, {32, -32}}, color = {199, 0, 0}, thickness = 2), Polygon(lineColor = {0, 0, 255}, fillColor = {135, 135, 135}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, points = {{80, 80}, {60, 78}, {60, -60}, {80, -80}, {80, 80}}), Polygon(lineColor = {0, 0, 255}, fillColor = {95, 95, 95}, pattern = LinePattern.None, fillPattern = FillPattern.Solid, points = {{-80, -80}, {-60, -60}, {60, -60}, {80, -80}, {-80, -80}}), Ellipse(origin = {0, 5}, lineColor = {199, 0, 0}, lineThickness = 2, extent = {{-45, 45}, {45, -45}}), Line(origin = {1.70323, 6.76404}, rotation = 90, points = {{-34, 32}, {30, -30}, {30, -30}}, color = {199, 0, 0}, thickness = 2), Line(origin = {-0.78, -0.78}, points = {{0, -100}, {-80, -100}, {-88, -98}, {-94, -94}, {-98, -88}, {-100, -80}, {-100, 80}, {-98, 88}, {-94, 94}, {-88, 98}, {-80, 100}, {80, 100}, {88, 98}, {94, 94}, {98, 88}, {100, 80}, {100, -80}, {98, -88}, {94, -94}, {88, -98}, {80, -100}, {0, -100}}, color = {0, 64, 127}, thickness = 0.5)}));
    end terminateSimulationOnKey;
  end Utils;
  annotation(
    uses(Modelica(version = "3.2.3"), Modelica_DeviceDrivers(version = "1.8.2")));
end OM_SP7_Zup;
