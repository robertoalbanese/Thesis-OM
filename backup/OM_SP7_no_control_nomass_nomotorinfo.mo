package OM_SP7_no_control_nomass_nomotorinfo
  package Axis
    
    model PositionAxis
      import Modelica.SIunits;
      Modelica.Electrical.Machines.BasicMachines.DCMachines.DC_PermanentMagnet DCPM(IaNominal = nominalCurrent, Jr = motorInertia + gearboxInertia, La = armatureInductance, Ra = armatureResistance, VaNominal = nominalVoltage, phiMechanical(displayUnit = "rad"), wMechanical(displayUnit = "rad/s"), wNominal = nominalRPM * 2 * 3.14159265358979323846 / 60) annotation(
        Placement(transformation(extent = {{-30, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage annotation(
        Placement(transformation(origin = {-20, 48}, extent = {{-10, 10}, {10, -10}}, rotation = 180)));
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(transformation(extent = {{10, 20}, {30, 40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.IdealGear idealGear(ratio = gearboxRatio, useSupport = false) annotation(
        Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation(
        Placement(transformation(extent = {{20, -80}, {0, -60}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation(
        Placement(transformation(extent = {{20, -60}, {0, -40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.BearingFriction bearingFriction(tau_pos = [0, 0.0328; 3, 0.063; 4, 0.0731], useSupport = false) annotation(
        Placement(visible = true, transformation(extent = {{62, -10}, {82, 10}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput setPosition annotation(
        Placement(visible = true, transformation(origin = {-120, 0}, extent = {{10, 10}, {-10, -10}}, rotation = 180), iconTransformation(extent = {{10, 10}, {-10, -10}}, rotation = 180)));
      parameter SIunits.Voltage nominalVoltage = 48 "|Motor||";
      parameter SIunits.Current nominalCurrent = 14.4 "|Motor||";
      parameter SIunits.Conversions.NonSIunits.AngularVelocity_rpm nominalRPM = 2500 "|Motor||";
      parameter SIunits.Resistance armatureResistance = 0.12 "|Motor||";
      parameter SIunits.Inductance armatureInductance = 0.00031 "|Motor||";
      parameter SIunits.Inertia motorInertia = 0.000116 "|Motor||";
      parameter SIunits.Inertia gearboxInertia = 0.000000409 "|Motor||";
      parameter Real gearboxRatio = 150 "|Motor||";
      parameter Integer encoderTickPerRound = 4096 "|Motor|| NÂ° absolute singleturn steps";
      parameter SIunits.AngularVelocity thresholdPosition "|Position Controller|| threshold velocity for position controller";
      parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
      parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
      parameter Integer PParam1Position "|Position Controller|| first parameter for proportional gain in position controller";
      parameter Integer PParam2Position "|Position Controller|| second parameter for proportional gain in position controller";
      parameter Integer IParam1Position "|Position Controller|| first parameter for integral gain in position controller";
      parameter Integer IParam2Position "|Position Controller|| second parameter for integral gain in position controller";
      parameter Integer DParam1Position "|Position Controller|| first parameter for derivative gain in position controller";
      parameter Integer DParam2Position "|Position Controller|| second parameter for derivative gain in position controller";
      parameter Integer IClip1Position "|Position Controller|| first parameter for integral clip in position controller";
      parameter Integer IClip2Position "|Position Controller|| second parameter for integral clip in position controller";
      parameter SIunits.AngularVelocity thresholdVelocity "|Velocity Controller|| threshold velocity for velocity controller";
      parameter Modelica.SIunits.Current maximumCurrent = 2.68 "|Velocity Controller|| maximum allowable current set";
      parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
      parameter Integer PParam1Velocity "|Velocity Controller|| first parameter for proportional gain in velocity controller";
      parameter Integer PParam2Velocity "|Velocity Controller|| second parameter for proportional gain in velocity controller";
      parameter Integer IParam1Velocity "|Velocity Controller|| first parameter for integral gain in velocity controller";
      parameter Integer IParam2Velocity "|Velocity Controller|| second parameter for integral gain in velocity controller";
      parameter Integer DParam1Velocity "|Velocity Controller|| first parameter for derivative gain in velocity controller";
      parameter Integer DParam2Velocity "|Velocity Controller|| second parameter for derivative gain in velocity controller";
      parameter Integer IClip1Velocity "|Velocity Controller|| first parameter for integral clip in velocity controller";
      parameter Integer IClip2Velocity "|Velocity Controller|| second parameter for integral clip in velocity controller";
      parameter Integer maximumPWM = 32767 "|Current Controller|| maximum allowable PWM set";
      parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
      parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
      parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
      parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
      parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
      OM_SP7_no_control_nomass_nomotorinfo.Controller.Modes.PositionMode positionMode(motorVoltage = nominalVoltage, encoderTickPerRound = encoderTickPerRound, thresholdPosition = thresholdPosition, maximumVelocity = maximumVelocity, PIDPeriodPosition = PIDPeriodPosition, PParam1Position = PParam1Position, PParam2Position = PParam2Position, IParam1Position = IParam1Position, IParam2Position = IParam2Position, DParam1Position = DParam1Position, DParam2Position = DParam2Position, IClip1Position = IClip1Position, IClip2Position = IClip2Position, thresholdVelocity = thresholdVelocity, maximumCurrent = maximumCurrent, PIDPeriodVelocity = PIDPeriodVelocity, PParam1Velocity = PParam1Velocity, PParam2Velocity = PParam2Velocity, IParam1Velocity = IParam1Velocity, IParam2Velocity = IParam2Velocity, DParam1Velocity = DParam1Velocity, DParam2Velocity = DParam2Velocity, IClip1Velocity = IClip1Velocity, IClip2Velocity = IClip2Velocity, maximumPWM = maximumPWM, PIDPeriodCurrent = PIDPeriodCurrent, PParamCurrent = PParamCurrent, IParamCurrent = IParamCurrent, DParamCurrent = DParamCurrent, IClipCurrent = IClipCurrent, gearRatio = idealGear.ratio) annotation(
        Placement(visible = true, transformation(extent = {{-88, 60}, {-48, 80}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b annotation(
        Placement(transformation(extent = {{110, -10}, {130, 10}}, rotation = 0)));
    equation
      connect(ground.p, signalVoltage.p) annotation(
        Line(points = {{20, 40}, {20, 48}, {-10, 48}}, color = {0, 0, 255}));
      connect(idealGear.flange_b, bearingFriction.flange_a) annotation(
        Line(points = {{40, 0}, {62, 0}}));
      positionMode.currentFeedback = DCPM.airGapDC.ia;
      connect(signalVoltage.n, DCPM.pin_an) annotation(
        Line(points = {{-30, 48}, {-40, 48}, {-40, 10}, {-26, 10}}, color = {0, 0, 255}));
      connect(signalVoltage.p, DCPM.pin_ap) annotation(
        Line(points = {{-10, 48}, {0, 48}, {0, 10}, {-14, 10}}, color = {0, 0, 255}));
      connect(bearingFriction.flange_b, flange_b) annotation(
        Line(points = {{82, 0}, {120, 0}}));
      connect(speedSensor.flange, flange_b) annotation(
        Line(points = {{20, -50}, {100, -50}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(angleSensor.flange, flange_b) annotation(
        Line(points = {{20, -70}, {100, -70}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(DCPM.flange, idealGear.flange_a) annotation(
        Line(points = {{-10, 0}, {20, 0}}, color = {0, 0, 0}));
      connect(setPosition, positionMode.setPosition) annotation(
        Line(points = {{-120, 0}, {-100, 0}, {-100, 70}, {-86, 70}}, color = {0, 0, 127}));
      connect(speedSensor.w, positionMode.velocityFeedback) annotation(
        Line(points = {{-1, -50}, {-68, -50}, {-68, 62}}, color = {0, 0, 127}));
      connect(angleSensor.phi, positionMode.positionFeedback) annotation(
        Line(points = {{-1, -70}, {-80, -70}, {-80, 62}}, color = {0, 0, 127}));
      connect(positionMode.setVoltage, signalVoltage.v) annotation(
        Line(points = {{-50, 70}, {-20, 70}, {-20, 55}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Line(origin = {-0.863013, -4.0394e-05},points = {{0, 0}, {-58, 0}, {-58, 62}}, color = {0, 0, 255}, pattern = LinePattern.Dot)}),
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Rectangle(lineColor = {255, 128, 0}, fillColor = {255, 128, 0}, fillPattern = FillPattern.Solid, extent = {{-140, 60}, {140, -60}}), Text(pattern = LinePattern.None, extent = {{-100, 40}, {100, 0}}, textString = "Position"), Text(pattern = LinePattern.None, extent = {{-102, -2}, {98, -42}}, textString = "Axis"), Text(lineColor = {0, 0, 255}, extent = {{-140, 100}, {140, 60}}, textString = "%name")}));
    end PositionAxis;
    
    
    model VRampAxis
      import Modelica.SIunits;
      import Modelica.SIunits.Conversions.NonSIunits;
      Modelica.Electrical.Machines.BasicMachines.DCMachines.DC_PermanentMagnet DCPM(IaNominal = nominalCurrent, Jr = motorInertia + gearboxInertia, Ra = armatureResistance, La = armatureInductance, VaNominal = nominalVoltage, wNominal = nominalRPM * 2 * 3.14159265358979323846 / 60) annotation(
        Placement(transformation(extent = {{-30, -10}, {-10, 10}}, rotation = 0)));
      Modelica.Electrical.Analog.Sources.SignalVoltage signalVoltage annotation(
        Placement(transformation(origin = {-20, 48}, extent = {{-10, 10}, {10, -10}}, rotation = 180)));
      Modelica.Electrical.Analog.Basic.Ground ground annotation(
        Placement(transformation(extent = {{10, 20}, {30, 40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.IdealGear idealGear(ratio = gearboxRatio, useSupport = false) annotation(
        Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.AngleSensor angleSensor annotation(
        Placement(transformation(extent = {{20, -80}, {0, -60}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Sensors.SpeedSensor speedSensor annotation(
        Placement(transformation(extent = {{20, -60}, {0, -40}}, rotation = 0)));
      Modelica.Mechanics.Rotational.Components.BearingFriction bearingFriction(tau_pos = [0, 0.0328; 3, 0.063; 4, 0.0731], useSupport = false) annotation(
        Placement(transformation(extent = {{60, -10}, {80, 10}}, rotation = 0)));
    public
      parameter SIunits.Voltage nominalVoltage = 48 "|Motor||";
      parameter SIunits.Current nominalCurrent = 14.4 "|Motor||";
      parameter SIunits.Conversions.NonSIunits.AngularVelocity_rpm nominalRPM = 2500 "|Motor||";
      parameter SIunits.Resistance armatureResistance = 0.12 "|Motor||";
      parameter SIunits.Inductance armatureInductance = 0.00031 "|Motor||";
      parameter SIunits.Inertia motorInertia = 0.000116 "|Motor||";
      parameter SIunits.Inertia gearboxInertia = 0.000000409 "|Motor||";
      parameter Real gearboxRatio = 150 "|Motor||";
      parameter Integer encoderTickPerRound = 4096 "|Motor|| NÂ° absolute singleturn steps";
      parameter SIunits.AngularAcceleration acceleration = 2 "|Velocity Ramp Generator|| Acceleration";
      parameter Real positionTolerance = 5 "|Velocity Ramp Generator|| Position tolerance, EncoderTick";
      parameter SIunits.AngularVelocity velocityTolerance "|Velocity Ramp Generator|| Velocity tolerance";
      parameter SIunits.Angle stoppingDistanceAdjustment = 0.05 "|Velocity Ramp Generator|| Stopping distance adjusment";
      parameter SIunits.Time startTime = 0.1 "|Velocity Ramp Generator|| Time when Velocity Ramp Generator is active";
      parameter SIunits.AngularVelocity thresholdPosition "|Position Controller|| threshold velocity for position controller";
      parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
      parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
      parameter Integer PParam1Position "|Position Controller|| first parameter for proportional gain in position controller";
      parameter Integer PParam2Position "|Position Controller|| second parameter for proportional gain in position controller";
      parameter Integer IParam1Position "|Position Controller|| first parameter for integral gain in position controller";
      parameter Integer IParam2Position "|Position Controller|| second parameter for integral gain in position controller";
      parameter Integer DParam1Position "|Position Controller|| first parameter for derivative gain in position controller";
      parameter Integer DParam2Position "|Position Controller|| second parameter for derivative gain in position controller";
      parameter Integer IClip1Position "|Position Controller|| first parameter for integral clip in position controller";
      parameter Integer IClip2Position "|Position Controller|| second parameter for integral clip in position controller";
      parameter SIunits.AngularVelocity thresholdVelocity "|Velocity Controller|| threshold velocity for velocity controller";
      parameter SIunits.Current maximumCurrent = 2 "|Velocity Controller|| (A), maximum allowable current set";
      parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
      parameter Integer PParam1Velocity "|Velocity Controller|| first parameter for proportional gain in velocity controller";
      parameter Integer PParam2Velocity "|Velocity Controller|| second parameter for proportional gain in velocity controller";
      parameter Integer IParam1Velocity "|Velocity Controller|| first parameter for integral gain in velocity controller";
      parameter Integer IParam2Velocity "|Velocity Controller|| second parameter for integral gain in velocity controller";
      parameter Integer DParam1Velocity "|Velocity Controller|| first parameter for derivative gain in velocity controller";
      parameter Integer DParam2Velocity "|Velocity Controller|| second parameter for derivative gain in velocity controller";
      parameter Integer IClip1Velocity "|Velocity Controller|| first parameter for integral clip in velocity controller";
      parameter Integer IClip2Velocity "|Velocity Controller|| second parameter for integral clip in velocity controller";
      parameter Integer maximumPWM "|Current Controller|| maximum allowable PWM set";
      parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
      parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
      parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
      parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
      parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
      Modelica.Mechanics.Rotational.Interfaces.Flange_b flange_b annotation(
        Placement(transformation(extent = {{110, -10}, {130, 10}}, rotation = 0)));
      OM_SP7_no_control_nomass_nomotorinfo.Controller.Modes.VRampMode Controller_VRampMode2_1(motorVoltage = nominalVoltage, maximumVelocity = maximumVelocity, thresholdVelocity = thresholdVelocity, maximumCurrent = maximumCurrent, PIDPeriodVelocity = PIDPeriodVelocity, PParam1Velocity = PParam1Velocity, PParam2Velocity = PParam2Velocity, IParam1Velocity = IParam1Velocity, IParam2Velocity = IParam2Velocity, DParam1Velocity = DParam1Velocity, DParam2Velocity = DParam2Velocity, IClip1Velocity = IClip1Velocity, IClip2Velocity = IClip2Velocity, velocityTolerance = velocityTolerance, PIDPeriodCurrent = PIDPeriodCurrent, PParamCurrent = PParamCurrent, IParamCurrent = IParamCurrent, DParamCurrent = DParamCurrent, IClipCurrent = IClipCurrent, acceleration = acceleration, stoppingDistanceAdjustment = stoppingDistanceAdjustment, PIDPeriodPosition = PIDPeriodPosition, PParam1Position = PParam1Position, PParam2Position = PParam2Position, IParam1Position = IParam1Position, IParam2Position = IParam2Position, DParam1Position = DParam1Position, DParam2Position = DParam2Position, IClip1Position = IClip1Position, IClip2Position = IClip2Position, thresholdPosition = thresholdPosition, startTime = 1, positionTolerance = positionTolerance / encoderTickPerRound * (65535 / encoderTickPerRound) * 2 / idealGear.ratio * Modelica.Constants.pi) annotation(
        Placement(transformation(extent = {{-90, 60}, {-48, 80}}, rotation = 0)));
      Modelica.Blocks.Interfaces.RealInput setPosition annotation(
        Placement(transformation(origin = {-120, 0}, extent = {{10, 10}, {-10, -10}}, rotation = 180)));
    equation
      connect(ground.p, signalVoltage.p) annotation(
        Line(points = {{20, 40}, {20, 48}, {-10, 48}}, color = {0, 0, 255}));
      connect(idealGear.flange_b, bearingFriction.flange_a) annotation(
        Line(points = {{40, 0}, {60, 0}}, color = {0, 0, 0}));
      Controller_VRampMode2_1.currentFeedback = DCPM.airGapDC.ia;
      connect(signalVoltage.n, DCPM.pin_an) annotation(
        Line(points = {{-30, 48}, {-40, 48}, {-40, 10}, {-26, 10}}, color = {0, 0, 255}));
      connect(signalVoltage.p, DCPM.pin_ap) annotation(
        Line(points = {{-10, 48}, {0, 48}, {0, 10}, {-14, 10}}, color = {0, 0, 255}));
      connect(speedSensor.flange, flange_b) annotation(
        Line(points = {{20, -50}, {100, -50}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(bearingFriction.flange_b, flange_b) annotation(
        Line(points = {{80, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(angleSensor.flange, flange_b) annotation(
        Line(points = {{20, -70}, {100, -70}, {100, 0}, {120, 0}}, color = {0, 0, 0}));
      connect(DCPM.flange, idealGear.flange_a) annotation(
        Line(points = {{-10, 0}, {20, 0}}, color = {0, 0, 0}));
      connect(angleSensor.phi, Controller_VRampMode2_1.positionFeedback) annotation(
        Line(points = {{-1, -70}, {-83.7, -70}, {-83.7, 62.2}}, color = {0, 0, 127}));
      connect(Controller_VRampMode2_1.setVoltage, signalVoltage.v) annotation(
        Line(points = {{-50.1, 70}, {-20, 70}, {-20, 55}}, color = {0, 0, 127}));
      connect(setPosition, Controller_VRampMode2_1.setPosition) annotation(
        Line(points = {{-120, 0}, {-100, 0}, {-100, 70}, {-87.9, 70}}, color = {0, 0, 127}));
      connect(speedSensor.w, Controller_VRampMode2_1.velocityFeedback) annotation(
        Line(points = {{-1, -50}, {-64.8, -50}, {-64.8, 62}}, color = {0, 0, 127}));
      annotation(
        Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Line(points = {{-58, 62}, {-58, 0}, {-30, 0}}, color = {0, 0, 255}, pattern = LinePattern.Dot)}),
        Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-140, -100}, {140, 100}}), graphics = {Rectangle(extent = {{-140, 60}, {140, -60}}, lineColor = {255, 128, 0}, fillColor = {255, 128, 0}, fillPattern = FillPattern.Solid), Text(extent = {{-100, 40}, {100, 0}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, textString = "VRamp"), Text(extent = {{-102, -2}, {98, -42}}, lineColor = {0, 0, 0}, pattern = LinePattern.None, textString = "Axis"), Text(extent = {{-140, 100}, {140, 60}}, lineColor = {0, 0, 255}, textString = "%name")}));
    end VRampAxis;
    
  end Axis;
  package Controller
    package Components
      
      model P2V "output a signal from a pwm input signal"
        Modelica.Blocks.Interfaces.RealInput inputPWM annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput outputVoltage annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        parameter Modelica.SIunits.Voltage maximumVoltage = 24 "voltage source range = (-maximum_voltage) - maximum_voltage";
        parameter Real maximumPWM = 100 "pwm input range = (-maximum_pwm) - maximum_pwm";
      equation
        outputVoltage = inputPWM / maximumPWM * maximumVoltage;
        annotation(
          Icon(graphics = {Text(extent = {{-100, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "%name"), Rectangle(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255}), Text(extent = {{-60, 22}, {60, -28}}, lineColor = {0, 0, 255}, textString = "P2V")}),
          Diagram(graphics = {Text(extent = {{-50, 30}, {50, -30}}, lineColor = {0, 0, 255}, textString = "P2V"), Rectangle(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255})}));
      end P2V;
      
      
      model Gain2
        import Modelica.Blocks.Interfaces;
        parameter Real k1 "first gain parameter";
        parameter Real k2 "second gain parameter";
        parameter Real threshold "Threshold value";
        Real gain;
        Interfaces.RealInput inputGain2 annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput outputGain2 annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        Interfaces.RealInput feedbackVelocity annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
      equation
        gain = if abs(feedbackVelocity) < threshold and threshold > 0 then k1 + abs(feedbackVelocity) / threshold * (k2 - k1) else k2;
        outputGain2 = gain * inputGain2;
        annotation(
          Diagram(graphics = {Polygon(points = {{-100, 100}, {-100, -100}, {100, 0}, {-100, 100}}, lineColor = {0, 0, 225}), Ellipse(extent = {{-10, 10}, {10, -10}}, lineColor = {0, 0, 255}), Line(points = {{0, -100}, {0, -10}}, color = {0, 0, 255}), Text(extent = {{-80, 60}, {0, 0}}, lineColor = {0, 0, 225}, textString = "k1"), Text(extent = {{-80, 0}, {0, -60}}, lineColor = {0, 0, 225}, textString = "k2")}),
          Icon(graphics = {Text(extent = {{-100, 140}, {100, 100}}, lineColor = {0, 0, 255}, textString = "%name"), Polygon(points = {{-100, 100}, {-100, -100}, {100, 0}, {-100, 100}}, lineColor = {0, 0, 225}), Ellipse(extent = {{-10, 10}, {10, -10}}, lineColor = {0, 0, 255}), Line(points = {{0, -100}, {0, -10}}, color = {0, 0, 255}), Text(extent = {{-80, 60}, {0, 0}}, lineColor = {0, 0, 225}, textString = "k1"), Text(extent = {{-80, 0}, {0, -60}}, lineColor = {0, 0, 225}, textString = "k2")}));
      end Gain2;
      
      
      model DiscreteDerivative
        import Modelica.Blocks.Interfaces;
        import Modelica.Blocks.Discrete;
        import Modelica.Blocks.Math;
        parameter Modelica.SIunits.Time SampleTime;
        Interfaces.RealInput inputValue annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput outputValue annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        Discrete.UnitDelay UnitDelay1(samplePeriod = SampleTime) annotation(
          Placement(transformation(extent = {{-10, 10}, {10, 30}}, rotation = 0)));
        Math.Add Add1(k1 = 1, k2 = -1) annotation(
          Placement(transformation(extent = {{30, -10}, {50, 10}}, rotation = 0)));
        Discrete.ZeroOrderHold ZeroOrderHold1(samplePeriod = SampleTime) annotation(
          Placement(transformation(extent = {{-48, -10}, {-28, 10}}, rotation = 0)));
      equation
        connect(UnitDelay1.y, Add1.u1) annotation(
          Line(points = {{11, 20}, {20, 20}, {20, 6}, {28, 6}}, color = {0, 0, 127}));
        connect(Add1.y, outputValue) annotation(
          Line(points = {{51, 0}, {80.5, 0}, {80.5, 0}, {110, 0}}, color = {0, 0, 127}));
        connect(inputValue, ZeroOrderHold1.u) annotation(
          Line(points = {{-120, 0}, {-50, 0}}, color = {0, 0, 127}));
        connect(ZeroOrderHold1.y, UnitDelay1.u) annotation(
          Line(points = {{-27, 0}, {-20, 0}, {-20, 20}, {-12, 20}}, color = {0, 0, 127}));
        connect(ZeroOrderHold1.y, Add1.u2) annotation(
          Line(points = {{-27, 0}, {-20, 0}, {-20, -6}, {28, -6}}, color = {0, 0, 127}));
        annotation(
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics),
          DymolaStoredErrors,
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-100, -100}, {100, 100}}), graphics = {Text(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255}, textString = "  E(t-1) - E(t)  "), Rectangle(extent = {{-100, 40}, {100, -40}}, lineColor = {0, 0, 255}), Text(extent = {{-100, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "%name")}));
      end DiscreteDerivative;
      
      
      model Limiter2 "Clip signal with a threshold and 2 parameter set"
        Real clip;
        import Modelica.Blocks.Interfaces;
        parameter Real k1 "first clip value";
        parameter Real k2 "second clip value";
        parameter Real threshold "Threshold value";
        Interfaces.RealInput inputClip annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput outputClip annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
        Interfaces.RealInput feedbackVelocity annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
      equation
        clip = if abs(feedbackVelocity) < threshold and threshold > 0 then k1 + abs(feedbackVelocity) / threshold * (k2 - k1) else k2;
        outputClip = if abs(inputClip) < clip then inputClip else if abs(inputClip) > clip and inputClip > 0 then clip else -clip;
        annotation(
          Diagram(graphics = {Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}), Text(extent = {{60, 60}, {100, 20}}, lineColor = {0, 0, 255}, textString = "k2"), Text(extent = {{60, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "k1"), Line(points = {{0, 80}, {0, -80}}, color = {0, 0, 255}), Line(points = {{-80, 0}, {80, 0}}, color = {0, 0, 255}), Line(points = {{80, 60}, {20, 60}, {-20, -60}, {-80, -60}}, color = {95, 95, 95}), Line(points = {{80, 20}, {18, 20}, {-20, -20}, {-80, -20}}, color = {95, 95, 95}, pattern = LinePattern.Dot, thickness = 0.5)}),
          Icon(graphics = {Text(extent = {{-100, 140}, {100, 100}}, lineColor = {0, 0, 255}, textString = "%name"), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255}), Text(extent = {{60, 60}, {100, 20}}, lineColor = {0, 0, 255}, textString = "k2"), Text(extent = {{60, 100}, {100, 60}}, lineColor = {0, 0, 255}, textString = "k1"), Line(points = {{-80, 0}, {80, 0}}, color = {0, 0, 255}), Line(points = {{80, 60}, {20, 60}, {-20, -60}, {-80, -60}}, color = {95, 95, 95}), Line(points = {{80, 20}, {18, 20}, {-20, -20}, {-80, -20}}, color = {95, 95, 95}, pattern = LinePattern.Dot, thickness = 0.5), Line(points = {{0, 80}, {0, -80}}, color = {0, 0, 255})}),
          DymolaStoredErrors);
      end Limiter2;
      
      
      model VelocityRampGenerator
        import Modelica.SIunits;
        import Modelica.Blocks.Interfaces;
        parameter SIunits.AngularVelocity maximumVelocity;
        parameter SIunits.AngularAcceleration acceleration;
        parameter SIunits.Angle positionTolerance;
        parameter SIunits.AngularVelocity velocityTolerance;
        parameter SIunits.Angle stoppingDistanceAdjustment = 0.1;
        SIunits.AngularAcceleration setAcceleration;
        SIunits.AngularVelocity velocity;
        SIunits.Angle stoppingDistance;
        parameter SIunits.Time startTime = 1 "Start time when Velocity Ramp Generator is active";
        Boolean positionEndFlag(start = false);
        Boolean positionReachFlag(start = true);
        Interfaces.RealInput feedbackPosition annotation(
          Placement(transformation(extent = {{-140, -20}, {-100, 20}}, rotation = 0)));
        Interfaces.RealOutput setVelocity annotation(
          Placement(transformation(extent = {{100, -10}, {120, 10}}, rotation = 0)));
      public
        Interfaces.RealInput feedbackVelocity annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
      equation
        positionReachFlag = if abs(feedbackPosition) < positionTolerance and abs(feedbackVelocity) < velocityTolerance then true else false;
        stoppingDistance = 0.5 * feedbackVelocity ^ 2 / acceleration + stoppingDistanceAdjustment;
        positionEndFlag = if positionReachFlag then false else if abs(feedbackPosition) > stoppingDistance then false else true;
        setAcceleration = if positionEndFlag then if abs(velocity) < 0.001 then 0 else if velocity < 0 then acceleration else -acceleration else if positionReachFlag or time < startTime then 0 else if abs(velocity) < maximumVelocity then if feedbackPosition < 0 then -acceleration else acceleration else 0;
        der(velocity) = setAcceleration;
        velocity = setVelocity;
        when positionReachFlag and abs(velocity) > 0 then
          reinit(velocity, 0);
        end when;
        annotation(
          extent = [12, -38; 32, -18],
          Diagram(graphics),
          Icon(graphics = {Line(points = {{-60, 60}, {-60, -60}, {60, -60}}, color = {0, 0, 255}), Line(points = {{-40, -60}, {-20, 0}, {20, 0}, {40, -60}}, color = {0, 0, 0}), Text(extent = {{-100, 140}, {100, 100}}, lineColor = {0, 0, 255}, textString = "%name"), Rectangle(extent = {{-100, 100}, {100, -100}}, lineColor = {0, 0, 255})}),
          Placement(transformation(extent = {{12, -38}, {32, -18}}, rotation = 0)),
          Diagram);
      end VelocityRampGenerator;
      
    end Components;
    package PIDs
      
      model PositionPID
        import Modelica.SIunits;
        import OM_SP7_no_control_nomass_nomotorinfo.Controller.Components;
        Modelica.Blocks.Interfaces.RealOutput setVelocity annotation(
          Placement(transformation(extent = {{200, -20}, {240, 20}}, rotation = 0)));
      public
        parameter Real gearRatio = 1 / 156;
        parameter Integer encoderTickPerRound = 4000;
        parameter SIunits.AngularVelocity maximumVelocity = 10 "rad/s, maximum allowable velocity";
        parameter SIunits.Time PIDPeriod = 0.001 "s, pid time period";
        parameter Modelica.SIunits.AngularVelocity threshold = 0 "(rad/s)";
        parameter Integer IClip1 = 0 "Integral Clip Limit 1";
        parameter Integer IClip2 = 0 "Integral Clip Limit 2";
        parameter Integer PParam1 = 0 "Proportional gain 1";
        parameter Integer PParam2 = 0 "Proportional gain 2";
        parameter Integer IParam1 = 0 "Integral gain 1";
        parameter Integer IParam2 = 0 "Integral gain 2";
        parameter Integer DParam1 = 0 "Derivative gain 1";
        parameter Integer DParam2 = 0 "Derivative gain 2";
        Components.Gain2 integralGain(threshold = threshold, k1 = IParam1, k2 = IParam2) annotation(
          Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
        Components.Gain2 derivativeGain(threshold = threshold, k1 = DParam1, k2 = DParam2) annotation(
          Placement(transformation(extent = {{20, -50}, {40, -30}}, rotation = 0)));
        Modelica.Blocks.Math.Add3 sum annotation(
          Placement(transformation(extent = {{80, -10}, {100, 10}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput positionError annotation(
          Placement(transformation(extent = {{-240, -20}, {-200, 20}}, rotation = 0)));
        Components.Gain2 proportionalGain(threshold = threshold, k1 = PParam1, k2 = PParam2) annotation(
          Placement(transformation(extent = {{-10, 30}, {10, 50}}, rotation = 0)));
        Modelica.Blocks.Math.Gain gearBoxNormalization(k = 2 / gearRatio * Modelica.Constants.pi) annotation(
          Placement(transformation(extent = {{120, -10}, {140, 10}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter positionErrorLimiter(uMax = 65535 / encoderTickPerRound * 2 / gearRatio * Modelica.Constants.pi, uMin = -positionErrorLimiter.uMax) annotation(
          Placement(transformation(extent = {{-180, -10}, {-160, 10}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter setVelocityLimiter(uMax = maximumVelocity, uMin = -setVelocityLimiter.uMax) annotation(
          Placement(transformation(extent = {{160, -10}, {180, 10}}, rotation = 0)));
        Components.DiscreteDerivative discreteDerivative(SampleTime = PIDPeriod) annotation(
          Placement(transformation(extent = {{-60, -50}, {-40, -30}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput velocityFeedback annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
        Components.Limiter2 integralLimiter2(threshold = threshold, k1 = IClip1 * 0.001 * maximumVelocity, k2 = IClip2 * 0.001 * maximumVelocity) annotation(
          Placement(transformation(extent = {{-40, -10}, {-20, 10}}, rotation = 0)));
        Modelica.Blocks.Continuous.Integrator integrator annotation(
          Placement(transformation(extent = {{-100, -10}, {-80, 10}}, rotation = 0)));
      equation
        connect(sum.y, gearBoxNormalization.u) annotation(
          Line(points = {{101, 0}, {118, 0}}, color = {0, 0, 127}));
        connect(gearBoxNormalization.y, setVelocityLimiter.u) annotation(
          Line(points = {{141, 0}, {158, 0}}, color = {0, 0, 127}));
        connect(setVelocityLimiter.y, setVelocity) annotation(
          Line(points = {{181, 0}, {220, 0}}, color = {0, 0, 127}));
        connect(positionError, positionErrorLimiter.u) annotation(
          Line(points = {{-220, 0}, {-182, 0}}, color = {0, 0, 127}));
        connect(positionErrorLimiter.y, integrator.u) annotation(
          Line(points = {{-159, 0}, {-102, 0}}, color = {0, 0, 127}));
        connect(integrator.y, integralLimiter2.inputClip) annotation(
          Line(points = {{-79, 0}, {-42, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, integralLimiter2.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, -20}, {-30, -20}, {-30, -12}}, color = {0, 0, 127}));
        connect(positionErrorLimiter.y, proportionalGain.inputGain2) annotation(
          Line(points = {{-159, 0}, {-120, 0}, {-120, 40}, {-12, 40}}, color = {0, 0, 127}));
        connect(proportionalGain.outputGain2, sum.u1) annotation(
          Line(points = {{11, 40}, {60, 40}, {60, 8}, {78, 8}}, color = {0, 0, 127}));
        connect(velocityFeedback, proportionalGain.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, 28}}, color = {0, 0, 127}));
        connect(integralLimiter2.outputClip, integralGain.inputGain2) annotation(
          Line(points = {{-19, 0}, {18, 0}}, color = {0, 0, 127}));
        connect(integralGain.outputGain2, sum.u2) annotation(
          Line(points = {{41, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, integralGain.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, -20}, {30, -20}, {30, -12}}, color = {0, 0, 127}));
        connect(velocityFeedback, derivativeGain.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, -60}, {30, -60}, {30, -52}}, color = {0, 0, 127}));
        connect(derivativeGain.outputGain2, sum.u3) annotation(
          Line(points = {{41, -40}, {60, -40}, {60, -8}, {78, -8}}, color = {0, 0, 127}));
        connect(positionErrorLimiter.y, discreteDerivative.inputValue) annotation(
          Line(points = {{-159, 0}, {-120, 0}, {-120, -40}, {-62, -40}}, color = {0, 0, 127}));
        connect(discreteDerivative.outputValue, derivativeGain.inputGain2) annotation(
          Line(points = {{-39, -40}, {18, -40}}, color = {0, 0, 127}));
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(extent = {{-200, 100}, {200, -100}}, lineColor = {0, 0, 255}), Text(extent = {{-198, 138}, {200, 100}}, lineColor = {0, 0, 255}, textString = "%name"), Text(extent = {{-80, 80}, {80, 0}}, lineColor = {0, 0, 255}, textString = "PID"), Text(extent = {{-80, 0}, {80, -80}}, lineColor = {0, 0, 255}, textString = "Position")}),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics),
          DymolaStoredErrors);
      end PositionPID;
      
      
      model VelocityPID
        import Modelica.SIunits;
        import OM_SP7_no_control_nomass_nomotorinfo.Controller.Components;
        Modelica.Blocks.Interfaces.RealInput setVelocity annotation(
          Placement(transformation(extent = {{-240, -20}, {-200, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput velocityFeedback annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
        Modelica.Blocks.Math.Feedback feedback1 annotation(
          Placement(transformation(extent = {{-170, -10}, {-150, 10}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput setCurrent annotation(
          Placement(transformation(extent = {{200, -20}, {240, 20}}, rotation = 0)));
      public
        parameter SIunits.Time PIDPeriod = 0.05 "Time period for PID controller";
        parameter Modelica.SIunits.Current maximumCurrent = 2.68 "maximum allowable current set";
        parameter Modelica.SIunits.AngularVelocity threshold = 0 "Velocity limit for PID controller parameter";
        parameter Integer IClip1 "Integral Clip Limit 1";
        parameter Integer IClip2 "Integral Clip Limit 2";
        parameter Integer PParam1 "Proportional gain 1";
        parameter Integer PParam2 "Proportional gain 2";
        parameter Integer IParam1 "Integral gain 1";
        parameter Integer IParam2 "Integral gain 2";
        parameter Integer DParam1 "Derivative gain 1";
        parameter Integer DParam2 "Derivative gain 2";
        Components.Gain2 derivativeGain(threshold = threshold, k1 = DParam1, k2 = DParam2) annotation(
          Placement(transformation(extent = {{20, -50}, {40, -30}}, rotation = 0)));
        Components.Gain2 integralGain(threshold = threshold, k1 = IParam1, k2 = IParam2) annotation(
          Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
        Components.Gain2 proportionalGain(threshold = threshold, k1 = PParam1, k2 = PParam2) annotation(
          Placement(transformation(extent = {{-10, 30}, {10, 50}}, rotation = 0)));
        Modelica.Blocks.Math.Add3 sum annotation(
          Placement(transformation(extent = {{80, -10}, {100, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain currentNormalization(k = 0.001) annotation(
          Placement(transformation(extent = {{120, -10}, {140, 10}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter currentSetLimiter(uMax = maximumCurrent, uMin = -currentSetLimiter.uMax) annotation(
          Placement(transformation(extent = {{160, -10}, {180, 10}}, rotation = 0)));
        Components.DiscreteDerivative discreteDerivative(SampleTime = PIDPeriod) annotation(
          Placement(transformation(extent = {{-60, -50}, {-40, -30}}, rotation = 0)));
        Components.Limiter2 integralLimiter2(k1 = IClip1 * 0.001 * maximumCurrent, k2 = IClip2 * 0.001 * maximumCurrent, threshold = threshold) annotation(
          Placement(transformation(extent = {{-40, -10}, {-20, 10}}, rotation = 0)));
        Modelica.Blocks.Continuous.Integrator integrator annotation(
          Placement(transformation(extent = {{-80, -10}, {-60, 10}}, rotation = 0)));
      equation
        connect(velocityFeedback, feedback1.u2) annotation(
          Line(points = {{0, -120}, {0, -60}, {-160, -60}, {-160, -8}}, color = {0, 0, 127}));
        connect(sum.y, currentNormalization.u) annotation(
          Line(points = {{101, 0}, {118, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, currentSetLimiter.u) annotation(
          Line(points = {{141, 0}, {158, 0}}, color = {0, 0, 127}));
        connect(currentSetLimiter.y, setCurrent) annotation(
          Line(points = {{181, 0}, {220, 0}}, color = {0, 0, 127}));
        connect(setVelocity, feedback1.u1) annotation(
          Line(points = {{-220, 0}, {-168, 0}}, color = {0, 0, 127}));
        connect(feedback1.y, integrator.u) annotation(
          Line(points = {{-151, 0}, {-82, 0}}, color = {0, 0, 127}));
        connect(integrator.y, integralLimiter2.inputClip) annotation(
          Line(points = {{-59, 0}, {-42, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, integralLimiter2.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, -20}, {-30, -20}, {-30, -12}}, color = {0, 0, 127}));
        connect(feedback1.y, proportionalGain.inputGain2) annotation(
          Line(points = {{-151, 0}, {-120, 0}, {-120, 40}, {-12, 40}}, color = {0, 0, 127}));
        connect(integralLimiter2.outputClip, integralGain.inputGain2) annotation(
          Line(points = {{-19, 0}, {18, 0}}, color = {0, 0, 127}));
        connect(integralGain.outputGain2, sum.u2) annotation(
          Line(points = {{41, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(proportionalGain.outputGain2, sum.u1) annotation(
          Line(points = {{11, 40}, {60, 40}, {60, 8}, {78, 8}}, color = {0, 0, 127}));
        connect(velocityFeedback, proportionalGain.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, 28}}, color = {0, 0, 127}));
        connect(velocityFeedback, derivativeGain.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, -60}, {30, -60}, {30, -52}}, color = {0, 0, 127}));
        connect(velocityFeedback, integralGain.feedbackVelocity) annotation(
          Line(points = {{0, -120}, {0, -20}, {30, -20}, {30, -12}}, color = {0, 0, 127}));
        connect(derivativeGain.outputGain2, sum.u3) annotation(
          Line(points = {{41, -40}, {60, -40}, {60, -8}, {78, -8}}, color = {0, 0, 127}));
        connect(feedback1.y, discreteDerivative.inputValue) annotation(
          Line(points = {{-151, 0}, {-120, 0}, {-120, -40}, {-62, -40}}, color = {0, 0, 127}));
        connect(discreteDerivative.outputValue, derivativeGain.inputGain2) annotation(
          Line(points = {{-39, -40}, {18, -40}}, color = {0, 0, 127}));
        annotation(
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(extent = {{-200, 100}, {200, -100}}, lineColor = {0, 0, 255}), Text(extent = {{-80, 80}, {80, 0}}, lineColor = {0, 0, 255}, textString = "PID"), Text(extent = {{-80, 0}, {80, -80}}, lineColor = {0, 0, 255}, textString = "Velocity"), Text(extent = {{-198, 138}, {200, 100}}, lineColor = {0, 0, 255}, textString = "%name")}),
          DymolaStoredErrors);
      end VelocityPID;
      
      
      model CurrentPID
        import Modelica.SIunits;
        import OM_SP7_no_control_nomass_nomotorinfo.Controller.Components;
        Modelica.Blocks.Math.Feedback feedback annotation(
          Placement(transformation(extent = {{-180, -10}, {-160, 10}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput setCurrent annotation(
          Placement(transformation(extent = {{-240, -20}, {-200, 20}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealInput currentFeedback annotation(
          Placement(transformation(origin = {0, -120}, extent = {{-20, -20}, {20, 20}}, rotation = 90)));
        Modelica.Blocks.Interfaces.RealOutput setPWM annotation(
          Placement(transformation(extent = {{200, -20}, {240, 20}}, rotation = 0)));
      public
        parameter SIunits.Time PIDPeriod = 0.05 "Time period for PID controller";
        parameter Integer maximumPWM = 32767 "PWM Input Limiter";
        parameter Integer IClip = 1000 "Integral Clip Limit";
        parameter Integer PParam = 4000 "Proportional gain";
        parameter Integer IParam = 4000 "Integral gain";
        parameter Integer DParam = 0 "Derivative gain";
        Modelica.Blocks.Math.Add3 sum annotation(
          Placement(transformation(extent = {{80, -10}, {100, 10}}, rotation = 0)));
        Components.DiscreteDerivative DiscreteDerivative1(SampleTime = PIDPeriod) annotation(
          Placement(transformation(extent = {{-60, -50}, {-40, -30}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter PWMLimiter(uMax = maximumPWM, uMin = -PWMLimiter.uMax) annotation(
          Placement(transformation(extent = {{130, -10}, {150, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain currentNormalization(k = 1000) annotation(
          Placement(transformation(extent = {{-130, -10}, {-110, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain integralGain(k = IParam) annotation(
          Placement(transformation(extent = {{20, -10}, {40, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Gain derivativeGain(k = DParam) annotation(
          Placement(transformation(extent = {{20, -50}, {40, -30}}, rotation = 0)));
        Modelica.Blocks.Math.Gain proportionalGain(k = PParam) annotation(
          Placement(transformation(extent = {{-6, 30}, {14, 50}}, rotation = 0)));
        Modelica.Blocks.Nonlinear.Limiter integralLimiter(uMax = IClip * 0.001 * maximumPWM, uMin = -integralLimiter.uMax) annotation(
          Placement(transformation(extent = {{-34, -10}, {-14, 10}}, rotation = 0)));
        Modelica.Blocks.Continuous.Integrator Integrator1 annotation(
          Placement(transformation(extent = {{-80, -10}, {-60, 10}}, rotation = 0)));
      equation
        connect(currentFeedback, feedback.u2) annotation(
          Line(points = {{0, -120}, {0, -80}, {-170, -80}, {-170, -8}}, color = {0, 0, 127}));
        connect(sum.y, PWMLimiter.u) annotation(
          Line(points = {{101, 0}, {128, 0}}, color = {0, 0, 127}));
        connect(PWMLimiter.y, setPWM) annotation(
          Line(points = {{151, 0}, {220, 0}}, color = {0, 0, 127}));
        connect(feedback.y, currentNormalization.u) annotation(
          Line(points = {{-161, 0}, {-132, 0}}, color = {0, 0, 127}));
        connect(derivativeGain.y, sum.u3) annotation(
          Line(points = {{41, -40}, {60, -40}, {60, -8}, {78, -8}}, color = {0, 0, 127}));
        connect(integralGain.y, sum.u2) annotation(
          Line(points = {{41, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, proportionalGain.u) annotation(
          Line(points = {{-109, 0}, {-100, 0}, {-100, 40}, {-8, 40}}, color = {0, 0, 127}));
        connect(proportionalGain.y, sum.u1) annotation(
          Line(points = {{15, 40}, {60, 40}, {60, 8}, {78, 8}}, color = {0, 0, 127}));
        connect(integralLimiter.y, integralGain.u) annotation(
          Line(points = {{-13, 0}, {18, 0}}, color = {0, 0, 127}));
        connect(Integrator1.y, integralLimiter.u) annotation(
          Line(points = {{-59, 0}, {-36, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, Integrator1.u) annotation(
          Line(points = {{-109, 0}, {-82, 0}}, color = {0, 0, 127}));
        connect(setCurrent, feedback.u1) annotation(
          Line(points = {{-220, 0}, {-178, 0}}, color = {0, 0, 127}));
        connect(currentNormalization.y, DiscreteDerivative1.inputValue) annotation(
          Line(points = {{-109, 0}, {-100, 0}, {-100, -40}, {-62, -40}}, color = {0, 0, 127}));
        connect(DiscreteDerivative1.outputValue, derivativeGain.u) annotation(
          Line(points = {{-39, -40}, {18, -40}}, color = {0, 0, 127}));
        annotation(
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics),
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(extent = {{-200, 100}, {200, -100}}, lineColor = {0, 0, 255}), Text(extent = {{-80, 80}, {80, 0}}, lineColor = {0, 0, 255}, textString = "PID"), Text(extent = {{-80, 0}, {80, -80}}, lineColor = {0, 0, 255}, textString = "Current"), Text(extent = {{-198, 138}, {200, 100}}, lineColor = {0, 0, 255}, textString = "%name")}));
      end CurrentPID;
      
    end PIDs;
    package Modes
      
      model PositionMode
        import Modelica.SIunits;
        import Modelica.Blocks.Interfaces;
        import OM_SP7;
        Interfaces.RealInput positionFeedback annotation(
          Placement(transformation(origin = {-120, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        Interfaces.RealInput velocityFeedback annotation(
          Placement(transformation(origin = {0, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        Interfaces.RealInput currentFeedback annotation(
          Placement(transformation(origin = {90, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.PIDs.PositionPID positionPID(threshold = thresholdPosition, IClip1 = IClip1Position, IClip2 = IClip2Position, PParam1 = PParam1Position, PParam2 = PParam2Position, IParam1 = IParam1Position, IParam2 = IParam2Position, DParam1 = DParam1Position, DParam2 = DParam2Position, encoderTickPerRound = encoderTickPerRound, maximumVelocity = maximumVelocity, gearRatio = gearRatio, PIDPeriod = PIDPeriodPosition) annotation(
          Placement(transformation(extent = {{-90, -10}, {-50, 10}}, rotation = 0)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.PIDs.VelocityPID velocityPID(PParam1 = PParam1Velocity, PParam2 = PParam2Velocity, IClip1 = IClip1Velocity, IClip2 = IClip2Velocity, IParam1 = IParam1Velocity, IParam2 = IParam2Velocity, DParam1 = DParam1Velocity, DParam2 = DParam2Velocity, threshold = thresholdVelocity, maximumCurrent = maximumCurrent, PIDPeriod = PIDPeriodVelocity) annotation(
          Placement(transformation(extent = {{-20, -10}, {20, 10}}, rotation = 0)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.PIDs.CurrentPID currentPID(maximumPWM = maximumPWM, PIDPeriod = PIDPeriodCurrent, IClip = IClipCurrent, PParam = PParamCurrent, IParam = IParamCurrent, DParam = DParamCurrent) annotation(
          Placement(transformation(extent = {{70, -10}, {110, 10}}, rotation = 0)));
        Interfaces.RealOutput setVoltage annotation(
          Placement(transformation(extent = {{170, -10}, {190, 10}}, rotation = 0)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.Components.P2V P2V1(maximumVoltage = motorVoltage, maximumPWM = maximumPWM) annotation(
          Placement(transformation(extent = {{130, -10}, {150, 10}}, rotation = 0)));
      public
        parameter Real gearRatio = 156 "Gearbox Ratio";
        parameter Integer encoderTickPerRound = 4000 "Motor Encoder Tick";
        parameter SIunits.AngularVelocity thresholdPosition "|Position Controller|| threshold velocity for position controller";
        parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
        parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
        parameter Integer PParam1Position "|Position Controller|| first parameter for proportional gain in position controller";
        parameter Integer PParam2Position "|Position Controller|| second parameter for proportional gain in position controller";
        parameter Integer IParam1Position "|Position Controller|| first parameter for integral gain in position controller";
        parameter Integer IParam2Position "|Position Controller|| second parameter for integral gain in position controller";
        parameter Integer DParam1Position "|Position Controller|| first parameter for derivative gain in position controller";
        parameter Integer DParam2Position "|Position Controller|| second parameter for derivative gain in position controller";
        parameter Integer IClip1Position "|Position Controller|| first parameter for integral clip in position controller";
        parameter Integer IClip2Position "|Position Controller|| second parameter for integral clip in position controller";
        parameter SIunits.AngularVelocity thresholdVelocity "|Velocity Controller|| threshold velocity for velocity controller";
        parameter Modelica.SIunits.Current maximumCurrent = 2.68 "|Velocity Controller|| maximum allowable current set";
        parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
        parameter Integer PParam1Velocity "|Velocity Controller|| first parameter for proportional gain in velocity controller";
        parameter Integer PParam2Velocity "|Velocity Controller|| second parameter for proportional gain in velocity controller";
        parameter Integer IParam1Velocity "|Velocity Controller|| first parameter for integral gain in velocity controller";
        parameter Integer IParam2Velocity "|Velocity Controller|| second parameter for integral gain in velocity controller";
        parameter Integer DParam1Velocity "|Velocity Controller|| first parameter for derivative gain in velocity controller";
        parameter Integer DParam2Velocity "|Velocity Controller|| second parameter for derivative gain in velocity controller";
        parameter Integer IClip1Velocity "|Velocity Controller|| first parameter for integral clip in velocity controller";
        parameter Integer IClip2Velocity "|Velocity Controller|| second parameter for integral clip in velocity controller";
        parameter Integer maximumPWM = 32767 "|Current Controller|| maximum allowable PWM set";
        parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
        parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
        parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
        parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
        parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
        parameter Real motorVoltage "(V) Source voltage";
        Modelica.Blocks.Interfaces.RealInput setPosition annotation(
          Placement(transformation(extent = {{-190, -10}, {-170, 10}}, rotation = 0)));
        Modelica.Blocks.Math.Feedback feedback annotation(
          Placement(transformation(extent = {{-130, -10}, {-110, 10}}, rotation = 0)));
      equation
        connect(setPosition, feedback.u1) annotation(
          Line(points = {{-180, 0}, {-128, 0}}, color = {0, 0, 127}));
        connect(positionFeedback, feedback.u2) annotation(
          Line(points = {{-120, -80}, {-120, -8}}, color = {0, 0, 127}));
        connect(P2V1.outputVoltage, setVoltage) annotation(
          Line(points = {{151, 0}, {180, 0}}, color = {0, 0, 127}));
        connect(feedback.y, positionPID.positionError) annotation(
          Line(points = {{-111, 0}, {-92, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, positionPID.velocityFeedback) annotation(
          Line(points = {{0, -80}, {0, -40}, {-70, -40}, {-70, -12}}, color = {0, 0, 127}));
        connect(positionPID.setVelocity, velocityPID.setVelocity) annotation(
          Line(points = {{-48, 0}, {-22, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, velocityPID.velocityFeedback) annotation(
          Line(points = {{0, -80}, {0, -12}}, color = {0, 0, 127}));
        connect(velocityPID.setCurrent, currentPID.setCurrent) annotation(
          Line(points = {{22, 0}, {68, 0}}, color = {0, 0, 127}));
        connect(currentFeedback, currentPID.currentFeedback) annotation(
          Line(points = {{90, -80}, {90, -12}}, color = {0, 0, 127}));
        connect(currentPID.setPWM, P2V1.inputPWM) annotation(
          Line(points = {{112, 0}, {128, 0}}, color = {0, 0, 127}));
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(extent = {{-200, 100}, {200, -100}}, lineColor = {0, 0, 255}), Text(extent = {{-160, 60}, {140, 0}}, lineColor = {0, 0, 255}, textString = "Position"), Text(extent = {{-160, 0}, {140, -60}}, lineColor = {0, 0, 255}, textString = "Mode")}),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics));
      end PositionMode;
      
      
      model VRampMode
        import OM_SP7;
        import Modelica.SIunits;
        import Modelica.Blocks.Math;
        import Modelica.Blocks.Interfaces;
        Interfaces.RealInput positionFeedback annotation(
          Placement(transformation(origin = {-140, -78}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        Interfaces.RealInput velocityFeedback annotation(
          Placement(transformation(origin = {40, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        Interfaces.RealInput currentFeedback annotation(
          Placement(transformation(origin = {100, -80}, extent = {{-10, -10}, {10, 10}}, rotation = 90)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.PIDs.VelocityPID velocityPID(PParam1 = PParam1Velocity, PParam2 = PParam2Velocity, IClip1 = IClip1Velocity, IClip2 = IClip2Velocity, IParam1 = IParam1Velocity, IParam2 = IParam2Velocity, DParam1 = DParam1Velocity, DParam2 = DParam2Velocity, threshold = thresholdVelocity, maximumCurrent = maximumCurrent, PIDPeriod = PIDPeriodVelocity) annotation(
          Placement(transformation(extent = {{20, -10}, {60, 10}}, rotation = 0)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.PIDs.CurrentPID currentPID(maximumPWM = maximumPWM, PIDPeriod = PIDPeriodCurrent, IClip = IClipCurrent, PParam = PParamCurrent, IParam = IParamCurrent, DParam = DParamCurrent) annotation(
          Placement(transformation(extent = {{80, -10}, {120, 10}}, rotation = 0)));
        Modelica.Blocks.Interfaces.RealOutput setVoltage annotation(
          Placement(transformation(extent = {{170, -10}, {190, 10}}, rotation = 0)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.Components.P2V P2V1(maximumVoltage = motorVoltage, maximumPWM = 1799) annotation(
          Placement(transformation(extent = {{140, -10}, {160, 10}}, rotation = 0)));
      public
        parameter Integer encoderTickPerRound = 4000 "Motor Encoder Tick";
        parameter Real gearRatio = 156 "Gearbox Ratio";
        parameter SIunits.AngularVelocity thresholdPosition = 0 "|Position Controller|| threshold velocity for position controller";
        parameter SIunits.AngularVelocity maximumVelocity = 2 "|Position Controller|| maximum allowable velocity set";
        parameter SIunits.Time PIDPeriodPosition = 0.001 "|Position Controller|| Time period for position pid controller";
        parameter Integer PParam1Position "|Position Controller|| first parameter for proportional gain in position controller";
        parameter Integer PParam2Position "|Position Controller|| second parameter for proportional gain in position controller";
        parameter Integer IParam1Position "|Position Controller|| first parameter for integral gain in position controller";
        parameter Integer IParam2Position "|Position Controller|| second parameter for integral gain in position controller";
        parameter Integer DParam1Position "|Position Controller|| first parameter for derivative gain in position controller";
        parameter Integer DParam2Position "|Position Controller|| second parameter for derivative gain in position controller";
        parameter Integer IClip1Position "|Position Controller|| first parameter for integral clip in position controller";
        parameter Integer IClip2Position "|Position Controller|| second parameter for integral clip in position controller";
        parameter SIunits.AngularAcceleration acceleration "|Velocity Ramp Generator|| Acceleration";
        parameter SIunits.Angle positionTolerance "|Velocity Ramp Generator|| Position tolerance";
        parameter SIunits.AngularVelocity velocityTolerance "|Velocity Ramp Generator|| Velocity tolerance";
        parameter SIunits.Angle stoppingDistanceAdjustment = 0.05 "|Velocity Ramp Generator|| Stopping distance adjusment";
        parameter SIunits.Time startTime = 0.1 "|Velocity Ramp Generator|| Time when Velocity Ramp Generator is active";
        parameter SIunits.AngularVelocity thresholdVelocity "|Velocity Controller|| threshold velocity for velocity controller";
        parameter Modelica.SIunits.Current maximumCurrent = 2.68 "|Velocity Controller|| maximum allowable current set";
        parameter SIunits.Time PIDPeriodVelocity = 0.001 "|Velocity Controller|| Time period for velocity pid controller";
        parameter Integer PParam1Velocity "|Velocity Controller|| first parameter for proportional gain in velocity controller";
        parameter Integer PParam2Velocity "|Velocity Controller|| second parameter for proportional gain in velocity controller";
        parameter Integer IParam1Velocity "|Velocity Controller|| first parameter for integral gain in velocity controller";
        parameter Integer IParam2Velocity "|Velocity Controller|| second parameter for integral gain in velocity controller";
        parameter Integer DParam1Velocity "|Velocity Controller|| first parameter for derivative gain in velocity controller";
        parameter Integer DParam2Velocity "|Velocity Controller|| second parameter for derivative gain in velocity controller";
        parameter Integer IClip1Velocity "|Velocity Controller|| first parameter for integral clip in velocity controller";
        parameter Integer IClip2Velocity "|Velocity Controller|| second parameter for integral clip in velocity controller";
        parameter Integer maximumPWM = 32767 "|Current Controller|| maximum allowable PWM set";
        parameter SIunits.Time PIDPeriodCurrent = 0.001 "|Current Controller|| Time period for current pid controller";
        parameter Integer PParamCurrent "|Current Controller|| proportional gain in current controller";
        parameter Integer IParamCurrent "|Current Controller|| integral gain in current controller";
        parameter Integer DParamCurrent "|Current Controller|| derivative gain in current controller";
        parameter Integer IClipCurrent = 0 "|Current Controller|| integral clip in current controller";
        parameter SIunits.Voltage motorVoltage " Source voltage";
        OM_SP7_no_control_nomass_nomotorinfo.Controller.Components.VelocityRampGenerator velocityRampGenerator(maximumVelocity = maximumVelocity, acceleration = acceleration, positionTolerance = positionTolerance, velocityTolerance = velocityTolerance, stoppingDistanceAdjustment = stoppingDistanceAdjustment, startTime = startTime) annotation(
          Placement(transformation(extent = {{-110, 20}, {-90, 40}}, rotation = 0)));
        Interfaces.RealInput setPosition annotation(
          Placement(transformation(extent = {{-190, -10}, {-170, 10}}, rotation = 0)));
        Math.Feedback feedback annotation(
          Placement(transformation(extent = {{-150, -10}, {-130, 10}}, rotation = 0)));
        OM_SP7_no_control_nomass_nomotorinfo.Controller.PIDs.PositionPID positionPID(threshold = thresholdPosition, IClip1 = IClip1Position, IClip2 = IClip2Position, PParam1 = PParam1Position, PParam2 = PParam2Position, IParam1 = IParam1Position, IParam2 = IParam2Position, DParam1 = DParam1Position, DParam2 = DParam2Position, encoderTickPerRound = encoderTickPerRound, maximumVelocity = maximumVelocity, gearRatio = gearRatio, PIDPeriod = PIDPeriodPosition) annotation(
          Placement(transformation(extent = {{-80, -40}, {-40, -20}}, rotation = 0)));
        Modelica.Blocks.Logical.Switch switch annotation(
          Placement(transformation(extent = {{-14, -10}, {6, 10}}, rotation = 0)));
        Modelica.Blocks.Sources.BooleanStep BooleanStep1(startTime = startTime, startValue = false) annotation(
          Placement(transformation(extent = {{-80, -10}, {-60, 10}}, rotation = 0)));
      equation
        connect(setPosition, feedback.u1) annotation(
          Line(points = {{-180, 0}, {-148, 0}}, color = {0, 0, 127}));
        connect(positionFeedback, feedback.u2) annotation(
          Line(points = {{-140, -78}, {-140, -8}}, color = {0, 0, 127}));
        connect(P2V1.outputVoltage, setVoltage) annotation(
          Line(points = {{161, 0}, {180, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, positionPID.velocityFeedback) annotation(
          Line(points = {{40, -80}, {40, -60}, {-60, -60}, {-60, -42}}, color = {0, 0, 127}));
        connect(switch.y, velocityPID.setVelocity) annotation(
          Line(points = {{7, 0}, {18, 0}}, color = {0, 0, 127}));
        connect(velocityFeedback, velocityPID.velocityFeedback) annotation(
          Line(points = {{40, -80}, {40, -12}}, color = {0, 0, 127}));
        connect(feedback.y, positionPID.positionError) annotation(
          Line(points = {{-131, 0}, {-120, 0}, {-120, -30}, {-82, -30}}, color = {0, 0, 127}));
        connect(positionPID.setVelocity, switch.u3) annotation(
          Line(points = {{-38, -30}, {-30, -30}, {-30, -8}, {-16, -8}}, color = {0, 0, 127}));
        connect(velocityPID.setCurrent, currentPID.setCurrent) annotation(
          Line(points = {{62, 0}, {78, 0}}, color = {0, 0, 127}));
        connect(currentFeedback, currentPID.currentFeedback) annotation(
          Line(points = {{100, -80}, {100, -12}}, color = {0, 0, 127}));
        connect(currentPID.setPWM, P2V1.inputPWM) annotation(
          Line(points = {{122, 0}, {138, 0}}, color = {0, 0, 127}));
        connect(feedback.y, velocityRampGenerator.feedbackPosition) annotation(
          Line(points = {{-131, 0}, {-120, 0}, {-120, 30}, {-112, 30}}, color = {0, 0, 127}));
        connect(velocityFeedback, velocityRampGenerator.feedbackVelocity) annotation(
          Line(points = {{40, -80}, {40, -60}, {-100, -60}, {-100, 18}}, color = {0, 0, 127}));
        connect(velocityRampGenerator.setVelocity, switch.u1) annotation(
          Line(points = {{-89, 30}, {-30, 30}, {-30, 8}, {-16, 8}}, color = {0, 0, 127}));
        connect(BooleanStep1.y, switch.u2) annotation(
          Line(points = {{-59, 0}, {-16, 0}}, color = {255, 0, 255}));
        annotation(
          Icon(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics = {Rectangle(extent = {{-200, 100}, {200, -100}}, lineColor = {0, 0, 255}), Text(extent = {{-160, 60}, {140, 0}}, lineColor = {0, 0, 255}, textString = "VRAmp"), Text(extent = {{-160, 0}, {140, -60}}, lineColor = {0, 0, 255}, textString = "Mode")}),
          Diagram(coordinateSystem(preserveAspectRatio = false, extent = {{-200, -100}, {200, 100}}), graphics));
      end VRampMode;
      
    end Modes;
  end Controller;
  
  package Body
    
    model six_rss_closedloop
      import Modelica.SIunits;
      parameter SIunits.Length l = 0.565 "Platform radius";
      parameter SIunits.Length h = 0.2 "Rotational motor's horn length";
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120) "Leg-pair displacement" ;
      parameter SIunits.Angle betha = Modelica.SIunits.Conversions.from_deg(5) "Single leg displacement from alpha";
      final constant Real pi = 2 * Modelica.Math.asin(1.0);
      Body.base base(useQuat = false) annotation(
        Placement(visible = true, transformation(origin = {-129, -15}, extent = {{-51, -51}, {51, 51}}, rotation = 0)));
      Body.six_rss_legs six_rss_legs annotation(
        Placement(visible = true, transformation(origin = {0, -14}, extent = {{-42, -42}, {42, 42}}, rotation = 0)));
      Body.platform platform annotation(
        Placement(visible = true, transformation(origin = {127.4, -13.5}, extent = {{-61.4, -51.1666}, {61.4, 51.1666}}, rotation = 0)));
  inner Modelica.Mechanics.MultiBody.World world annotation(
        Placement(visible = true, transformation(origin = {-2, 62}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
    equation
      connect(base.frame_a[:], six_rss_legs.frame_a[:]) annotation(
        Line(points = {{-76.47, -15.51}, {-41.47, -15.51}}, color = {95, 95, 95}, thickness = 0.5));
      connect(six_rss_legs.frame_b[:], platform.frame_b[:]) annotation(
        Line(points = {{42, -14}, {64, -14}}, thickness = 0.5));
    protected
      annotation(
        Diagram(coordinateSystem(extent = {{-100, -100}, {100, 100}})),
        Icon(coordinateSystem(extent = {{-100, -100}, {100, 100}}), graphics = {Text(origin = {-2, -75}, lineColor = {0, 60, 255}, fillColor = {0, 68, 255}, fillPattern = FillPattern.Solid, extent = {{-54, 11}, {54, -11}}, textString = "%name"), Bitmap(origin = {4, 1}, rotation = 182.25, extent = {{-90, 81}, {90, -81}}, imageSource = "")}),
      __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian,nonewInst -d=stateselection -d=backenddaeinfo -d=discreteinfo --maxSizeLinearTearing=500",
      __OpenModelica_simulationFlags(s = "dassl"));
    end six_rss_closedloop;
    
    
    model base
      import Modelica.SIunits;
      import Modelica.Math;
      import Modelica.Constants;
      
      parameter SIunits.Length l = 0.565 "Platform radius";
      constant StateSelect stateSelect = StateSelect.prefer annotation(
        Dialog(tab = "Advanced"));
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120) "Leg-pair displacement";
      parameter SIunits.Angle betha = Modelica.SIunits.Conversions.from_deg(5) "Single leg displacement from alpha";
      parameter Real legBasePoints[6, 3] = {{l * cos(0 * alpha + (-betha) ), 0, l * sin(0 * alpha  + (-betha) )}, {l * cos(0 * alpha + betha ), 0, l * sin(0 * alpha  + betha )}, {l * cos(1 * alpha + (-betha)), 0, l * sin(1 * alpha + (-betha))}, {l * cos(1 * alpha + betha), 0, l * sin(1 * alpha + betha)}, {l * cos(2 * alpha + (-betha)), 0, l * sin(2 * alpha + (-betha))}, {l * cos(2 * alpha + betha), 0, l * sin(2 * alpha + betha)}};
      outer Modelica.Mechanics.MultiBody.World world;
      Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a[6] annotation(
        Placement(visible = true, transformation(origin = {104, 16}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {103, -1}, extent = {{-9, -9}, {9, 9}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed annotation(
        Placement(visible = true, transformation(origin = {-16, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed1(r = legBasePoints[1]) annotation(
        Placement(visible = true, transformation(origin = {54, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed2(r = legBasePoints[2]) annotation(
        Placement(visible = true, transformation(origin = {52, 30}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed3(r = legBasePoints[3]) annotation(
        Placement(visible = true, transformation(origin = {-46, 76}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed4(r = legBasePoints[4]) annotation(
        Placement(visible = true, transformation(origin = {-74, 50}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed5(r = legBasePoints[5]) annotation(
        Placement(visible = true, transformation(origin = {-68, -26}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Fixed fixed6(r = legBasePoints[6]) annotation(
        Placement(visible = true, transformation(origin = {-44, -68}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.Body base(enforceStates = stateSelect == StateSelect.always,m = 5, r_CM = {0, 0, 0}, useQuaternions = useQuat)  annotation(
        Placement(visible = true, transformation(origin = {12, 12}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
      equation
      connect(fixed.frame_b, base.frame_a) annotation(
        Line(points = {{-6, 12}, {2, 12}}, color = {95, 95, 95}));
    connect(fixed1.frame_b, frame_a[1]) annotation(
        Line(points = {{64, -2}, {86, -2}, {86, 16}, {104, 16}}));
    connect(fixed2.frame_b, frame_a[2]) annotation(
        Line(points = {{62, 30}, {86, 30}, {86, 16}, {104, 16}}, color = {95, 95, 95}));
    connect(fixed3.frame_b, frame_a[3]) annotation(
        Line(points = {{-36, 76}, {86, 76}, {86, 16}, {104, 16}}));
    connect(fixed4.frame_b, frame_a[4]) annotation(
        Line(points = {{-64, 50}, {86, 50}, {86, 16}, {104, 16}}));
    connect(fixed5.frame_b, frame_a[5]) annotation(
        Line(points = {{-58, -26}, {86, -26}, {86, 16}, {104, 16}}));
    connect(fixed6.frame_b, frame_a[6]) annotation(
        Line(points = {{-34, -68}, {86, -68}, {86, 16}, {104, 16}}));
      annotation(
        uses(Modelica(version = "3.2.3")),
        Icon(graphics = {Bitmap(origin = {3, -5}, extent = {{97, -79}, {-97, 79}}, imageSource = "/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAQDAwQDAwQEAwQFBAQFBgoHBgYGBg0JCggKDw0QEA8NDw4RExgUERIXEg4PFRwVFxkZGxsbEBQdHx0aHxgaGxr/2wBDAQQFBQYFBgwHBwwaEQ8RGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhr/wgARCAG5A0IDASIAAhEBAxEB/8QAHAABAAEFAQEAAAAAAAAAAAAAAAcDBAUGCAIB/8QAFgEBAQEAAAAAAAAAAAAAAAAAAAEC/9oADAMBAAIQAxAAAAGfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD4fWNyQAAAAAAAAAAAAajtRUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA56yEGV73vQMnXQUkcRXsduObpXjenn0AAAAAAAC0LmE9Wic99R8wb2dWgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGsGzx1DMeE6U4PVPeRh3bIi7JY2S62Dz0Ajhul0vz1WNFZ+VIMR2TsHC+7x1iiSTC/AAAANKM1y/hMJTI47oQ0iPOm+WomSOtwjOsxmdOHVkhcIyFHVjUttAAAAAAAAAAAAAAAAAAAAAAAAAAAABRK2Mi2CSVYdoqAA3PO4i5NSn7nPpUlIQ5I63hEgQaPXnJmMycu/IhCUI3pV3M1bacgAAKXL3SHI1a/53LVi27E5C7mjROWOneYiQ403/QKAA9StE47TzfC81xPrH5AAAAAAAAAAAAAAAAAAAAAAAAAANY5/Jk581dQAAAEh2+Uwpp85QbtJ2Ao1oRNLMLEGWVajokzRZ9iWhEac69q8ml91Jwv1nW6iAB5NBijJSQWHLXWvJpmO1uMOzyKueJ9geth0fctNAAAAMpOfPA7orcZT9EnvPoAAAAAAAAAAAAAAAAAAAAAKMQkowbFWLK1EoAAAACVNU3HRTCX1iqaZ+4Y3aOrORfeHMYKdK81TfE9CEJzZExzfIuqUa7VEAMRl43IF6x4pmyt95V6G5yj72HyDWrJe9c3Ao6xnMGAAG+yWc7uldXiEl/YUBu/QPI47ucuz7GygAAAAAAAAAAAAAAAAAGsmzR7Dcbm1aqUAJ2NfmrbkUrDKCF4C7l0U5LevNATVF8rRCWQpc2wAAbRq92dr1+eehMvULzDy4a/a4/Yq7CEAImlmITnQaZfA1/Ra16CG7aTvZr2IyOOAPXR2n9HQABhOTOzozOXRQCrSEyTtxLex3Cg6Zi7AU/JWWtIv2Homea/TNkatQNwaNTN9R/TJERtaEqIm8ktofpEyoTtydEDeCfHP9I6Fc3eDpTHc8R6SrDlFQAAGz9i8/dBwAAByVo0sRPQE6QhO0EgUAAAA2/ULkznnFejD7rpW9R1uIAQ3MkGkEDR9+D5QuqMU5JjaTSNQAdhbZa3UAAMbksIcWCgAAFxbi/s/A9PI9fPgKlMAAAMvmzTXryAAFxJxFKVIwKQABvBo7o/XYhJ680ABOc98l9aQAANWOeNB9+KA6BgOc4MAoAAAAVTO6rsWuwkWOpROoBACB54gEhQaAPfgUZKj7fojkAHYG3cvdPx6AAhrfeSzGigBsht007j6iNOc+14VOexQF/1Bok9R80feRw5aSVGtAJMjPsGNluAjzlTu7hstRQzJ0pIJCH5g0E5PFAbR1/zp0lAHOEQTPDFAAOiOdx3c5RkmJlRJp5NnKeIs6AAnuCZ7gQCgAAAGewWeNeokJXiiXY6UAA516K5rIqGgADbtR+lFWowAkiNx1ztvDP2O1Yz52+GRxxQACQ48qndKKd/jLwFtHOBaigJ5nXhufYmehHkOmv66UA6p5WyB2859oRJPKN3aUAq0h2Rs3D29x1BzNqmt0ABmOtuMap3TpfL2Hi9sSgAAAAAAAJ6gqcoNAoAAADK2Ob1WPX338KU2wlOcT8ABzN0zzBUailL7Tj17pC4ePdeqfr2W715gAAAAAAAAAAAAAAygxYAADaqBrgAAAAAAAAAAAAAAAOgoCnqBQKAAAXlnsJY4T0it8+qoTtBPRGU0AAcn9YclVpYqj5+/IAXFvVPYr3b1fRQPsfH36eXoeXv6U1X6UVf6W65FsuxaLwWa8+lkvfpYr76WC/8Apj2QGw4yyGOZH6Y1kxjGT+l5jawxbKjFMsMV8ywxTKjFfcqMV9yYxv3I/DH/AG/+Fn9u/lWy4FBXFD7VFL7VFNUFP77Hh7ElxXc+iwX1Itvnvye/GYw4BUy/3Bxb+/Hsq3NtvdR70dzh0plLoAHInXfHFa6Kp07i3gu7c83NbxVID78F97sLoqqYqKfkrLeoe/nkevnwffgAAAAAAAAAKVUfPoAAAHwfXn4e3ge1MVFP4VVL4VlEVlAV1vXPnz2AAAAAAPXj6KNG89Fgu6BnNX9eYe/H0uN90i2qj0/zB1XlIwAHGHZ/FJjBo8+vRSvfvoWta2AAFSmLz7Z1Su8ewAAAAAAAAfD6p0y4es/GvN7y5FvyZcqQJ86HyBzO6f8AZy66kHLf3qDwcxfJEi4fA9ecrjykVygAAejyej3SuaRT9+PZe+rC9r0AAAAAAA+Wh7tPiPXm8tTyD78B1hyf1vG9AAcP9u8MgaAPXkAAPn30VqF5SLcD15FerZi9W1UqPn0AAHw+qslxFdXpzeY5e3KdRHW1ZsfPoAADUzbMNAUYnZuX4a346nhXJ80n2Y4ak6vU97D6hZXohjWujINIDFAK9CfCCrrrrRSAEhaJVpQuKZae/CMhTo25cXmKr1fPn0AAAefNieqSvFB78GRpZ2ia4AXBb9oaPLMAAUuH+5YlOcGy6xp6AAAA9+PRd+fvgtgCofaV7blIH2pSF17svRdqOWLWaJPz+VlegAAAAUIxJUj2AtWrf9AKAX1jkyWIPmmJ4x3YsIdKRUAA13YtbOS8XI0eVSq0skXnX/LfWcegLe4EcRL1DpByV5vbKq1vXoHwFa+xdWsg8+gBQ8Wkffnr6eL2yzBj7fcdOKtIBuZhOpM1m4AAAAaduI53i3tqgcOfenonqOXrxX0AHr58ACrSqFzTqUi3AKxT83lqeQZWUIaHXe3cLbTHYCFZTjLgMFDhOUQQfZ1msKUAAAzGH2M3GJpUiuHZXGsnx0+oVwBCO488GqigHW3JcrHSzW9kgUCvzFs+pkZit/j6S4zAAKl/jPdZGy8Uw+/IuflTKmvX9gLq1A9dBGo9J1/sAAAAAAAAYuLplHIWo916scfpoiqsY+faAAqePgA+XNvXK1CvQKIGVxPWEcuWfY3IBQqU1SLeRcirSKAH0ud1nTdsuIbTsrlSsAKbdqO5xloxkGPj1K8TDZJVgaudAaRkYeK++R4AAKmyauPe8aJcEvxbsuinrJ4oASbF8oReMlm8wR55rUQBUp3J8t8jjjIZrVvgAvst1OYCRSAAAAAAAAAAAHj2I7ifpwcOUO2ovOdm6aRXsUPh9+/BXo/AB57O4zzkdm8v73okRsNFe27Gjjt0PzxQDdtJl2OjBDSN3HCzdNL0b1oskxitG3PTAAAAAAAAAAACSoylCLyStPs65aWt3aH2t5uasbq1qRIEd1KYBdb1tU/xZZEAAAAAAAAAAAAAAAGu7EIFintDycLVOq4nqKlza19AfPoqUxc2wAZDtnhaY46F4w6Igs1IUliJ9ujrsQBAMKdB8+Uk+MJTNQ1bOYMAAAAAAAAAAA27Trm2MhVp31W2J37QYr7npWYrBCF3aZkx3SOx7rAAAAAAAAAAAAAAAAAAAAFlGcsjlHRO6cEcafJ2imtfefVAALi3F1agA+/B1nuXEF7HazkPNGwQxlsTSZIbkGNQxF3aAAAAAAAAAAAFe1urUv8AY9Xq1XxJAAlc13qHJ3EAAAAAAAAAAAAAAAAAAAAAAAPn0aVE/Ro4isu4o2OZ0hR9Xx8+0AAArURc0fAAe/HstxAAAAAAAAAAAFa2ubYAAer3p01ia/qAAAAAAAAAAAAAAAAAAAAAAAAAAAGHzAhSKOwhwp667ieocZLF16AAAA9+PZbiAAAAAAAAAAH359KlvXoADZNg6dMVspAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFCPJKHMEcdzY04n+9CxRWovPqgHunULcQAAPR5AAAKhTffgAA9efYo1fZbzftUsRTqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABrMTT+OLMR3PoByvUk2OKsXm9LRkKhi2Y9mEq564NW87jUNKbv6NGST7Iz9yd6iLfkrXVQ/wDJorEIpy9EF1JzyMQn09ncwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPPoAAAAAAAAAAAAAAAAAAAAAAAAAAf/EADcQAAAFAgUCAwUIAgMBAAAAAAECAwQFAAYHEBESIBMwFDFAFRchMlAWIiMkJTU2YCYzNEFwgP/aAAgBAQABBQL/AOlUXzVyp/Z7tukXBiHMmaOvCSYDH30xdUg5RdJ+lfXJGxq5TAcv9Muy7K0HSkGpVmlNni7NRhfj1CmN2xb4AHUPQCOgXHeYEBRQVDWXKA/h/wCjzF4MYuveMNe8ZSmN+LPH96XAswySdgkyibCFZGTsFRJNRI6J82U0/jqYYg0xmmMkHdXcJNUrku5SQER1pdAzc9mygx0x/RZSeYw4TN3vZThbQAaev0dZurIiyv5TK8LfCRbItiqs+GulR92ScfUffjNemztB4TsyUm3im07cTiZVpiyWkXd2W0SEKquZRa75N63ee2ZGvar+o655KOWh7vYSn196/bxyM1faq1KqnXPwtP8AkN9DrOoteu2w+REkRndEaEXMZ7REtINQWaVZUt4KR7E7cbeEJJSa8k5ysOHFsN9IArAVfH7rwhrvexIRFwspkv1pRQiJJm+kUAeyLmRV5WcGtx3mcTXFuEAsJQDwWeIbbVHNB0ZNrF2D1EZKwDEIugo2VKYSmgJQJeN5HNsJeJ0/FiAhnbTTwcHen8cMgJUb6H9c4lMJDQ98u2dR8qzlE/q8vd7GMqUuB9Lj2LJT33Fdw63FWHjvhiD+zLNVEEsrHjCvpXK7bf8AarVBsRVlZ0t7Nk+T8+1GYXM/lp2HfxpVxSFRFIV1Sl2lvhQCQKCYLOb0OJri5pLKN1Ie/hLTR4g+R+pyk8yhyzN4vZI3asINZ26h1uCoR2eIkE1CLJ5YhuQBqZU5y0g067XD5ISQ2d2MPZ80FWxK+1Yvjcj7wjWxYjxUjfSAKwFQ5N8tV6lFZCO+9JXeOtx9ljJO41WFvtJwKahFSfT3j9vHozV9qLUqqouft2AH63cCnVm6UdqKt7RucjUgDqCqpEE7glPa8pnYKm+DzxDbALerOkxj5Xh5Ver38C0UjlhLy/jewdsI4OlJVdjwnh4gP1e6/jcPbi5t5DqRN7MH9AOofS1FCpEmb6QQB7IOpFXu4egPtiYHWXy8qZz8vEoylxyEuRYiAM88PXmh88Qf2YrAfDRY9SW4SLpNm0uR8V7JMEPCMrzHS3TLKCmQ5kzvZtBrEO5RdVaCKZWcuNQFZ3uxF1SETUNc7GYD6TMXcxi6lbhfS5uMHZLiQKztqKZUBChTiOaOyy1hIKkcN1Wi3DDoPzUn+5ZqOFFE+MU4VhnaSpF0ssQV/wAu/MCLeE/eeF8DpAa0wxAOA3PJoSsIb5kCFUVFZUwVapd1wTQ6zHGMtCSkioYdtAKOH0YIPsPFS08ZOGC/GFvN5HDFzrGYL9FlJ1lEEmbxeyQ8rNtghicbmgCzbMQEo54ch+K8Nvd9kzg50LTukGdAOoKqkQTfvxmph0t1l7WDW4OGIP7PkzenbZorHbqVaIa3FKjrJ5gAmG2rPTZF4ScW3l2szDrwrzimqdE8TfzhCmT9tIo/QXj1uwRmr7UVpVZRc/K34z2tKgGgcruY+Bns8Oe60l5SGQk5+QlgOPhGFWkGtxcMQR/S8zBuDOzfjcj8dX2diQxXbnle0aD2H5tXa7FaGv0ggg4SdJ5bgChVIFeISCvGtqPKsUhGajQr25G17fi6G44otHuiIIX7YQtfbKFob0hgob1h6+3MRRr+iymHEGMr3hR1e8JjQ4htNT4ioAHvHCveMNDiMahxFV094rihxCkNRxBkqHECTEHsi6kVexh0gUznniD+9Z4fgBGHcUcKKJtEusvIq9RerODW5OGIZvyGYDpRy52KUBn+FttPBQfJ+kC7HspLqo0L1yYNw1uGtw1qNaj9Dw4OG/neTvxc9nYw7YLutvyzTzysdMD3DwxFOIE4ANHLplYvwmODf4t+Uu48LF+g2G2c2MW8khUtSZSKYokNxQQUcqtbBkVge2FItyqJnRPxg7XdzYEw8jwCUw/OkQxRIbjaMgWOm+U/Lkho85xUPnagmTtLuJJiqpJqaZ2D++8MRfn4hQhtGyPhI8LZeeNg+V/SgJM+VvWcpKpt7WiGxJGyY14STjV4l3wZM1ZB1DWmxiSVM2uyl03LdRo44WjbYTKySKaCdXTbyUu042vbycM0yvyLTVj+FvRfteVSSIgnliAyIg/5Wndaa6PCUl2sQhMzLiadcLfJ07I7kentBVQVVMsPv3vhiJ/v5fMFplMmXhZ8+EU6AdQ4Tc0hCNX75WRd8YCOCVlgDQMsRG5RZ8MO2ICOd9JFTn+FtIFbwObkSi4ziCgaWzvJYqNvcMPdvtfPERyU7znF3hIxpUMQ2hinxBjgB/iA6VBy7WeK8YrQlhdsA1F4PhmmeHhDDLcMQlAGR5xEmmyQ4wN3uYmmV1RT0pVkz04lGTUJW/WyJXr5xIr8rJXKjcGeIUiQ5uGHbsu3JVUiKc7I+1ZThZskR9DZXVOEiWHBNQyKkNMoTLSlFCpEvC4CyrjhFyKkU+i5hrLoVN3G0hSPHSj516Fsfo4eduPS3rPFes4ANaEMsOS/muF/jrNcwHSjBz1GteymoZFSFvZo8J7TZdOZvZozK5cKu1+DZyqzXjb/AGyhFr5iUy3Bda81yZPnEc4b4iLFI8xCcqkcuVXi3Fq7XZLJ3xLppyM9ISnNNQ6Rxl5AS66+jHUuHPb18IwoPI3lWHAficL9H9cz3VrQDmA6UYNP6TIalsDtNkuqtJLb1chyw343yOs9kbgA5hQhp65hHOZNd/HOYxflBQK864m4g8I++gTI7LF7TT8BsIiYQ88h88Og/I8Lx/keQ+fP5g9bb1wHgFpiVWmXvKKmnkMd27WfOOWlaVoNaDW0a2jWw1dM1dI1dI9dE9dA9eHPXhz14c9eHPXhzV4ca8ONeHrw9eHroBXQCugWuiSpyTbObfEghxOQyZsyE6h5I4EJRckUxPQ+eHYfpfC7R1uLIeIeWYhuCtK0rQa2jW0a2DWw1dM1dI9dE9dA9dA9eHPXhz14c9eHNXhzV4ca8PXh68PXQCugFdAtdEldEldJOuknXTTrpp1sSrYnW1OtqdaJ19yvuV92tS1qFbgrdW+t9bxreNdQ1bzVvNW81bzVuGtw1qNa+g1rQo0KVCUQykX3tBbOOIGq6nWVouTNmCUJWHgfo/C6Dbp/IeABrXxAuYDpRT/DeNbxreNdQ1bzVvNW81bhrcNajWo+m3erEAGgKAd3WtpRoUxrTNybwrPItAG4Zp+UsZVgpgSC4TygqTeXnkidMhQLrRS6UfiA6cRoAH6LrWoVuCtwVuCtwVvLW8tdQtdQtdQtdQK6gV1QrqhXVCgHX0XnQpgNDoShMJswpP7tKKCoarH/AI9wmPjLZnCik1oA0yN58Sj6/UK3BW8K3lreWt5a3lrcFbgoxtAEdctBHuATUMim20A6+iOppkAbuGudlB/jnCS+MjmA0GRjadjXSgPQGAfSbwCuqFIouHNI25MuASsmZVBLD18YC4c/EuHbGk8P4wolseHCgsqFoLLha+xsJX2NhK+xkLQ2VDDV0NIaMER1zSZOzlUTOkegRUMlx0HICiNABwASDlsHQpttAOvoDqZoh8BDlZ5DEtzg4UBVfjuHl/3soQ04AYQoD1rr3ROAUimu6FtZs05pth0GqFkw6NN4hg1HsvZRnHAzk2cgXK67t8OBjCc0dMQTO3rfs5aVTj4NhGFpw2RdpztjIrEaXYjGQfEFPuk0rXMxd1bhKFFNtEB1AxwLRVPj2hHSjn3cEg+64SMkPGDbHaRGYjoHcT+ejh8OQHGgOHYEdKboOHp2NgvXFMbOiWVETKmXtydxR8UElfT50Kih1jkOZMzG9JNiF7TK8a2ys6ALKuQDQOF/Q5elxsOFL0ncFGvqd2AyVp5ZEo2py3cMjgIDSgfDIvyj50RTb2TGAtGMJskg1Mb5qh+mDucdJOpDNBBR0tbdnJxvE4akUTMip2yfNQ+WfmIk4gegMA8Gzdd+vE2CmWm7VFmn3JW8I+OqVu+QkuLINX2Iw/i5W8x9nQ3GdS60M0jHj8ogJRpJI6ykjDPooGLYGbPNRIixH9lRjypWzX8ckAa5F+QfPIh9vM6m2hHXNLyUDIqglDONi3UsvA221g0+VwWWWVcyNvSUWOvaDIw/DNLI4ctRCt9R7ZF88iWDFg17aqpECSd8smoSVxSMpzjQ1k8RR/NsFEEnt3TzGVSLpt4zy4N4WFu1SGjlVDLK1HvlI15LXO5l19deV2OwaQPi1fD0A/dHzzIfbQDqGZ1MihqJg0NTJEXClwNU2S3CBtxzNrRcW3iGvZkbYjJOpHD9wkL1g6jlNexuEOKeR/LMPjQlEODKSdR6kff66dR9yRsl2HLpBmlJ3+QlSMs8lVOxEBrMYhfvOUC+CRieN/ywER42pJBJQ3G9ZsJF7kg1QNaA8Sm20A6hR1Nc0Q+KgfGmy/RFwudypnbVnqSYIopt0+4omRYkjZEY9CQsiTZAoQ6J+0TI/lml8tCGg8WFxSMdTDEBI9M5JpIBlIS7KLLKX8oqDl0u8V7VvpgrO3+Os3lbMy4gBSVIunncNyowqMjGSvT4FKJzIR0xZ5IqbZzCWSqpECT93i6NO2iaFYZGDpWRyKbaJj7shDTJHyfMFGqHApROa2bM8Ob0LyPayCUhh81Vp/bErHVr2d9COvBP5aPwYRrqTUdNF2SuRDmTMwvSTZ1IX1IOqUUOsfi3bLO1T2XMFTcNlminC1fjcV+DrO0A6DP3gSWjYqdewxmuIgUriI1AsjfL94XrGFaZu5zMM+CahklJO4H8ukUxiGa3dMo1JzVzsGzuSdvxARKLuTdvy5Ov4Rl0TIiYNB4EDUyofGmol3Tcr7SPm0Zrv17dtVCGJ6V/b0bJi/w9VKL2Mexpte2TI/C0o8rCDmIlGYZrJHbrdkAEw23BkhWNSkQ1l0JeIXhnedohrcl6qCe4uCIkKtdE7GPIztN1jNl5653E6nxfD/hdWzHBJzN1HKpPq/NwR81CDsoB04Q0I6mnEPBtYVD1BigYJCzIt/UhYki0pZFVsfsAOlb688xqIdJPI6r4bFQnMyIqKhxtJiD6ezueGLLxudmEE1yXh8bj9PK/hWpVsPCRDVRQyqivnkoXTJHzmTNkYzNdNNM1t2qrNizZIMG/rHTNu9JIYfs16f2nLR9a9xhIOY48XfSZ6vZ4i9lshqDiiQ8dd1sprt+GHiYDJcLqYgwm8rEDWfuz+Q+nuH7sHSXy0pkn8ygZENsE5xOOdt2UK1FKBQ+gP4SPk6fYeCAPoeQja1rX4cym0reHBhp7Qyl2YMJPPD5XbLcMREgBfKwQ1nbkOB5308tKFfM6T+SnCQkSpL5jxvThswQEW6CCjpa27PSjQ+iCGoSNoRciMjYT5sLlsuyWz/77DK/HiRGt6xjgbmcJupzO2HvgZvhiH/w8sPv3uaHWY9ObyonytkRcuLnIRurSY6GdyKq6GcZFOpZxBW21g0/pDhsi7TkrDYuhkrPlI6jakMA9kpqE2nKEuBtIsSmAwZYhuCmdZYd/82VHWU9OfJP5IlQqDqSeC/e8YC23M4tFxbeIa/TJCIZShJLD0ghIwUjFVr3ijSSyiJkZySQFK8JdIZGRXlHeVpTiEIs6V67r06mSRqOroHG27OUkwRRTbp/UJC1YuRp/h+7Rp0zcsT9wD1vChNrwS8/UKcylE5rZsvwxvqiqRFiSFixrupCy5RlRymSP30vUqefFmycSC9u2qhDE+sPYxnIlksPkVBkbdk4ute6n5enDzU8+ENCOppxDwjWFQ+uSNtxspUjh8ukDyOeR469pP5PTh5qeedt2qrNi0ZosG/19RMipJGyYx4D+xpNpShDoKcyf6/Tl+Y+dtWWKtFKBQ/obpi2fEf4fNFhf2vKxw68S/wCvmACNeXMpN1CGg8ifMekEFHS1t2elGh/SJGAjpSpDD05afRT6MHXIP9XMh9tCOo8imEtCOvMnzR8W6l3EFbbWDT/pZigYJCzYt/T+w5BsCqC7YNaBo5MBY94agi3417Ika9iyY0nb0srX2YmK+yczQWhNDQWdNjX2MnK+wkvQWFLDQWBKjXu+lK93snSeHb0Q93LmvdwrXu4NQYbjQYcBqTDtoBo6NbRTf/2z/8QAFBEBAAAAAAAAAAAAAAAAAAAAoP/aAAgBAwEBPwE5n//EAB0RAAICAwEBAQAAAAAAAAAAABFQAAEgMEBgcID/2gAIAQIBAT8B+MBwGFvLZX+Oa9rXMYYYYeuuE5iDSVIRHaMA3KcuDorK2QgXFwfXnyP/xABTEAABAgMDBQkKCgkEAQQDAAABAgMABBESITEQICJBUQUTMDJhcZHB0RQjQEJSYoGhsbIkMzRQU3KCkpPhQ2Bkc3SDo8LwNWOi8eIGFXCA0tPy/9oACAEBAAY/Av8A7KqRLzDTq04pSsGn60Obn7nqoyNF5wePyDk9sBSCUqF4IhIW73S0PEcv9eMJTOJVKr28ZMBcu6h1B1pNfBixNP0cGICSaQFJNQcP1NXIblr5HXR7BBNLhkm3SuytiyQnygTQ9WTfJV1bS9qTSAmdbRNJpjxVf56IHf8AuddOK9o+vCKjwGpgy+47l/jPD+3tglRqYSyfjZXvaubUf82fqQpDR7qmB4iTcOcx/p/9b8o+Qp/EiWlzKNpS86lFbWFTSBISdULdRaW5sGwZJmXLYVvxQoK8kpr2mN83WcUypXFbbxHPBXuZMb9T9G5cTzGC28hTa04pUKEZnwSZcQPJrUdEU3SlvtNdhj4JMIWrySaK6OGU7MOJabTipRhctJVblMOVfPyckXxYXStK3GsIbV8TNUbVz6j/AJt/Ub4W73zU2m9RhTbZ7mllXWEnHnOZIWhXvohPIwn2nIp94BTcqLVDrUcOvKZuWHwpkXgD4xPbE08XLLjJRZR5QOPVnUD+/o8l7Sik+2qVVtGmItyjyHkVpVCq8EXptVB4qRio8kaeg0nitjAduRqVlRV1w0ESrkqVKZWLCyry/wA+qC6AG1Y6F1Ik0szbzVqUQpQQsp0qmPl8z+KY+WTH4pi0JhbyPGbcNoHshKHF9yzB8RzWeQ/P++zjqWkcuuC1uRVlGtxQ0jzbIK3lqcWcSo1ObI/WPumDyNJiaeCwDLhJKTrBNPaR0w84R8Y+acwA/PMebQLLTnfWwNQP51zCqhsi4nJNulyytiyQnygTQ9WTud095mdHmVq4Gye+zKhotj2mFPzK7S1erkGWam5hPfPike09UOLOLTiVD2deRgaxKoHtzUtLpNSwuCFm8cxj4Muy7raXcr57U46oIQkVKibhCmtyRvzv0ihoiN8nHlOq5dWfJfb9wxNA4JCAPuiCAbjjFkYoeUD6j15klMDxVKbPpv6jmTEqhFoTBRz1Bu9pgObrPLbUofFtU0ecwpW5T6nKD4p2lT6YU1MILbiDQpOqAUmhENPV76NF0ednlR1CGkIQA6RbcVTjbIvuyyTdCCW7ZrtN/XE1zo94Ql2qaKNKVvinksoGcFIJSoXgjVAb3SrNseV449OuLci+l3aNY5x88KQ2rumYHiowB5THwp4739Gm5PAy5rSwlav+NOuJ3nT7oyTkoTscT7D1ZjH8SPdVEu44BZfRbRTnI6sqn3RVuUFqnnHDry7/ACyR3Yz/AM07ImnVOWXWSgpR5QNx6oDbqqMTGgrkOo/5tz6eUYfKQVadhAx5LolXd0jaLqKXeLTxTHwcKSjzjDbaOMtQSICRgIWk/pHEpHt6obbVgpYSYmgrBIQB90cAHGHFNuJwUk0IhLW7DdoYb831iEvSjiXW1Xgj50+Fu981NpvUYUiXUZWX8lJvPOeD5mVdUT1PL6hkk51xKgyqv2k4GEuNKC0KFUka8snL61OFzoFOuEJUolKOKK3DJNvb4EmXCVWKcYE06xDqyOO+ac1BmPJQLLbvfUDnx9dcjalmr7Wg5z7c59zW2i76xw6oXNPt1alho2vL1f5zQtZxacSodNOvJIilfhDfvDJLMjC0VmJSuBfR7YnedPujgt8kX1Mq10wPONcBrdZKZdep1PFPZCVtKC0KvCkmoPzhvs46lpHLr5oLW5ALKNbqhpHm2QVvLU4s4lRqeEX/AA6vaI3QNKd/UnoNMjDCj3tkqKOSuMdxbouWWv0Sz4vIeSKiFOPKCG0iqlHVDz4+KGg19Uf5X05ik0pvb6h6gevMk5jWlZb6b+rIhDirLExoK5/F9d3pzm2hi8u0eYQy6/8AGv6Zr0D1ARO/Y99MWqaO2JRCVUQuZatDmVkmQnTcpvSR7euJAftLfvCJ7649g4S1Ju0TrbVek+iAib+BPeedA/a7YqPmwrdUEITipRoBCmtyRvzv0ihoiN8nHlOq5dXDTBpd3Mb/ALSYnz+0ue8cxgodV3O4Ktpc0gRh1Rvc07Rr6NAoIlVNK7+bQeT6bj6/VmTcodYDqfYerMY/iR7qobmHFgJWkqHSR1RIg4d0I97NW48sNpwqYO9KtNNpCUkGoMSzAr3ppKL+QRNDaUe8I3oqO9g1CYStBopJqIE+FAhxsFoYWiYSsOELSbVRtjc+mkrulCj96pjdAp+mUOi7hghK9/l/onL+g6oSlCwzM0vZWb/Rt+aihCu6ZjyUG4c5j4S7Rv6NFyc4PboKMqwcE+OodUd6k21GtbTgtn1xckdEWZmWadGOkgGLe46t4c+jWolJ9OMLZmUFt1BopJzZ4/7afbE5+/X7cxttaqoarYGyudIz9O9Lqbtaa0IhDjSrSFiqSNYyyUqL1rcK+i7rhDCcTjG538S37wzXOVxMX3wE7oywUK8dq49ENdwO20uPaXo/wQYSlaw2k+MdUJZDinG0VsDUObJIfvK+qN0D+0ue8c4L3sSzXlPXV5hHwmbfWvzAEjrgUemh9tPZFrc2aS5fxHRT1wWZxpTTgvoc4NzhVOS/nHST6Y+BvAr1tquUPR8zVm3dPU2m9RhTcue5ZfYjE85z29058Wq3sNkf8jnaFEzTV7atvmmCFChGIzN0D5qOuJhQNoFxRrtv4JpknQbUpSfTSvshMluir4P+jWfE5DyRUQpx5QQ2kVUo6oenP0Lei19X/L/TClasBEhT6TqzWP4ke6rKRxknxa5Q4yqwsYEZJH6yvdMTpP06/ezAEipOAhua3TQHJvjJQcG+05qpecTVOojFJ2iCxMXjFC9SxnBbK1NrGCkmkBvdVHdCPpEXL7DAeknUuo5Dhz/MRenHUtI5TjBa3IG9I+lUNL0QVvLU4s4lRrnsS6vi62nPqiKDPmQniPd9Hpx9dczdInVvf93CsKl31JYeFpCTpJ4xB9kWZx+rY8RIomAPHVdkkfrH3Tmyw/aP7TmV15kl9v3DE0TjvqvbmLn5hFpuXNG6+Xt9HXnqfSmr0rpj6uvt9HAB2UdUy4NaTCWt2UlKvp0C4847IDss4l1s4KSajLeRF60j0x8aj70fKGvviKOTssg8rqRH+oSv4yY+Xy34oj5fL/fi+fZ+9FTPN05KmPlv9JfZHyv+mrsj5ST/AC1R8er8Mxx3fw4oETK+UIHbFzM191PbHxEz90dsfJpj1RdKPU5xHe5FajyuUj/Tv6//AIx/p/8AW/KLpAfi/lGjIor+8j5G194wbMvK0+qrtj4mVH2VdsfFyw+ye2N8nHlOq5dXAzzxGkhCUg8//wDPAM/wyfeVmbouU0qj1A8K22tVUNVsDZWADgLzFkG5F2SS+37hzZQf7vVm1GVBIrZaUebNkm7wS3bVXaq/rz5ltQqFtKSejgjvLi2642TSCFPukHzzGMYxjGPzJuinWQ2fe4B+zQpZo0PRj665m6Kti1e7wy3lYnCL8jBPiIWR0U683c5HikuE/wDHtzuTI6dkss+zNap5Az5x4YoZURXbS7wG3ZNitLVLq8ARIy63qYkC4emCpUisgeSQr2QUrBSoXEHVnIal0FxxZolKdcVmFsy92BNo+qCqWW1NDYDZV64KHUKbWMUqFCM7fEUYlq03xWvmGuO+TE0o8hSOqLe5T++0HxbmJ5jBSsFKhcQdWcyp25t0b0o8/wCdM9b5+MOi0POhSlkqUo1JOZus4g0I30j8McKlA1whlOAvyn9wrqzdzuZz+3Oock4ryZJZ9YzZNy+qUWFVxqm7PRIIOm8bS/qj889MzOqVLyp4oHGX2RZTJNr5XNI+uFGWQZR7UpBu6IXLTY006xgobRmtS0sLTrhoIBWgTMxrcWMOYasijvaWJmmi6gU6dsOMPiy42qyc1b84PgbV1K0tq2QG2EJbQnBKRQDIt5tNJ1pFUKHjeac4OuprOupG+E+L5uXu9KaPMkBStqT+eaxLq+K4zn1R/lIS2ykIbSKJSNWWXmUCyZhBtcpH/ee3I7pu2ZhOi24rx+TnzS5NuAGmijxlQXpg0SLkIGCRm7pKr8YHT/xp1cKt5WAhSzryu/wyveTmyH1FdWfTXG7L6TRTcg5T/PRmmXml2ZR7X5KtsVGaXXjVw/Ft+UYcmZk1ccN+dLSy672pVV/VF5igyykxTTS5YryEV6s2bnVUJFGkcms9WYpSRe42lSufDqzZFKBSrQWec35jpa4ls2ebMkAvimYbr94Zk1as1cspSFazXNmK1t9zmmzjDMk5cYtIKj9r/rgEtlQmWR4rmPTA7plXm1a7BCuyNBiZJ5QB1wUyDCJceUrSVBcmnFOrOtRzpk7UOe3hKCEMpxVjmTC6aIlyD95PZmyretLNekns4DdFtxJrNSymwoajTODMxWalBcE1vRzHqjRmksq1pe0I0XEnmMfCJtlvnWIKNy0GYX5ahRIgvTjhdcOs57IX+kSpA56ZkvItlKlINtzaNmbOShOnUOJG3UerKpx1QQhIqonVExM+Ko0RzDDNZatgvy4sLTyavVlUhB+EvgpbA1cuahxs2VoNpJ2GEOsrTvtnvjdb0HIpbighCRUk6oTLyhrKs66cZW3NammLyg3p2jZCXZRwE00m66SecZCFq3yYpotDr2Q7MPmrjirR8CcVStQR0uU4S0cE3wog1TgMyeV5iR681rklk+8rgajPx4JDjZsrQbSTsMJb3RIlZil5PEV2Rvndkvvflb6KQtuQPdL+ojiDthb0wsuOLNSTmoflllt1BqlQhKd02lsua1ovSYqhbjp2JR2xvTY3iV8ivG584PyTpadGsRSakkOL2oXZ7YsycsmXV5RVbhb0ysuOLvJOcHZR1TLg1pMWS424fKU3fFJuYUpHkC4Z4W0ooUMCk0MWTOzBGzfTF/gaQRSv/wC7hNi15u6J5Edean9wn2nguT9SWBtQ373BpTqxMb2OKjN3S/lf3ZquRpPBUPh+8yLRdcpapWl0bxPNb05S1SoN3oz1tsKS2hsVWs6oMq44HdEKChd8wyIJpaS16dfBuPn0QScTmzh1b6PZmzv2PcHB08OdWlkPJdTQgmkKmZigNKJA1DPWqRWE2+OCmoMLfml746vjHgsIwjCMIwjCOLHFjixxYwjDJqjEdMYjpjjCOMI44jjiOPHHjj+qNzJCXc3x1tKFLpqomlPXnWXElKthGYEjXDbCMMcw01ZJr9//AGjNnedPujhOXNwjCMIwjCMI4pjixhGEYZNUYjpjEdMcYdMcYRxxHHEceOPHHjjeqOMeiMTGJjXGuMDHFMcX1xxPXHE9ccSOII4gjiCOKmOKnojAdEYDojV0ZcYxjGMTGJjGMfAr4uyXw27vdhQaShR8ogUrmLdVgnXCl7cx6bXrrT2D15Jg/tJ91ObPfvOrgAmt2NM3ARq6I1dGTGMYxjExiYxjHwfA+F38NffGzNS0OMrMAGJiXkWcLq8wyVHjvKJ9Q6s3dAn6dY6DTNc3xu2VJok1wPC7Ix+ZsYxEYxjGMYxjGPhV4i6Npi/MtRU5GPrr9ubP/wAQ57xzK/NOMYxjGMYxjGMYxj4BXMu8CoMcl2fK86/eObN0+mX7cy/CLuDv8FxyfBZZ176iCqKokHEjz9D2xppaZ+u52Vjv84yj6tVdkd83Ru5GfzjTmpg81B1QCp2aXyFY7IvacVzumPkqj/NV2x8kJ/mr7Y+Rf1l9sfIv6y+2Pkh/FX2x8mUP5qu2O5tz21Km/GO+EhOYFNyz606ils0godSULGIUKHIp1Lai2njKpcOErku8AonLXPkQq40UelRzXXE4KWTwlM+/hsYKZSXcfI8hBVGm0iWG1xfZWKzs8VDY2inrMC0wt4jWtw9UAy8lLtqHjBsV6eC+GzDbPITefRFZOYQ7yA39GVcjuWvvuDrqfF5BywVKNVHExvS2EvTZRRxCm71GvlUwgTE4oy8seLdpLgdySyEqHjkVV05C3MtIeQdS01hb2443p7Hea6KubZ7I/wDb0Sa0TaEqQoK4tdZOv0Z1IvzbJzOWNLg745MwAQAoZ0ky6LLiGhaGw5hPCnwK+LEiw4+rzE1pAVujMIlk+SnSVzQKsd0r8p42vVhFltIQnYBThFCYfCnR+iRer8oKZECTa2i9R9MFbq1OLOKlGpMBSCUqF4IgBxYmm9jmPTDLEroGZtVXrAFMOnKqYm02pRnVXjL2c0UGajdJhACwbD1New9XpzlbpTCAVKNliuoaz1eiCZmTaUpWKgLJ6RCjJvuy6tQOkkRWWsTafNND0GLE4w4yrzk0yVyqy0OHBX5OaDkZU/8AFovMKVLijaRZGYhmXQXHVmiUp1wJjdIIemvFTilH55qgNkLbcFlaDZUNh4Y5lIuzb80MSLSnnTqEB3dlzfVfQtmg9Jje5VpDKPJQKcKpDau63x4reHpMFCFdyseQ2b/Sc2VAxLqfbG5481fVllGDx7Fpf1jec6fRSp3hdANtIWqTlnXkoxKUwQoUIxGRDbQtLWbKRtMNmfly0HOKag+yGJdGDTYR0ZhQ8hLiDiFCsFTSFSi/9o3dEOutqRMy6BUkGhA20yqzOTP5YvzqDM3mRbtq8Y6kjliqBvsyRRbp6tmeqbk3gw8saaVDRUeqD3TLKU39I3pJ/LwEngb4bamplMqweOswEbmJRvRvtJNq16eEK3lpbQMVKNAIKZAGcd6Ej0wRMTCktn9G3op/P058kB9Oj3okh/tq9sMOTqVOS6VgrSnWNkS7O57fxZrvlmlBsECzhqzp9ZVZ7yoA8pFBC5VqWQpVSpLlaX8u2FuOGq1qtK58jU0wElxo1FrCJdbyEoaYXbS2k4580Ti4N7SK7fyrAYJCmgagFINOY5Dm8kXZlE5KQRkaaHjqpDTTSgTZtHNFAWpUcd0j1DaYTLyaLKRiTio7TwVp+XCHPpG9E/n6YtblvpfTTiOaKuz2Rvc8wthRwtDHm4Y8Hbk31tE40OMWd0mUvJ8pGiqAGJgJc8hzRPAF2adSy2NajSCjclnfT9K7cOiLc68pzYnxR6OB3OH7S37whj+GHvKyyr4NVWKL+sMc5vc5o6S9N3kGof5szmL6usjenPR+WcJaXVViXqDyr15ZmZU0kvpnLKV6wKJz7slBhlMHJaFxGEFbhqcxE1P1alMQnxnOwQlthAbbSKBKRhwpQ6hK0KxSoVBhRYSZN3UW+L92FLlwmcbH0fG+72QUPIU2sYpUKHwGvAAS8yqxdoK0hATuhLls3abd46IrJzDbvIDf0Zazz6W9icSfRBRuS0WR9I5xuiC7NOrec2rNeD3PCvpknovhHJLp9pyjuxh0bmzCuPYNx2jbCXGVBbahVKhrzClFHZtXERs5TB3R3RYdsOmpcV17M0JQCpRuAGuEbpHelNKol5kL9v5RblHNIcZs3KTlLjy0toGKlGgjuDcSpU4qwXcK83bAmlTiHTaCSmxZ6L78qLB+On9L7v5Dgr8hhC3BS1mhKAVKNwA1wmb3XSFOYts+Tynl5PAi3OsIeQfKEFW5z65Y+SrST2wS7LF1seO1pDwUtyLKnlJFTTVBam2lMuDUoUyhSCUqF4IgB1Ymm9jmPTFmUCZNHm6SumCt1anFnFSjUnODUs2p1w+KkVgLEulXmhwVEFuZaU0salCmbIfXPsMczKevICRa5IEpLyxat03y0cKahB7jcog3qQq9JgCdkjheptfUY7zKOrVsUoCCiVpKIPkcbpjfXO+KtWjbvrzwJZbTbKLiuz42alxs0Wk1BhDU67aQi+gSBftgKQSlQvBEJQiZL2oJWkKJ64Q7OITKtrVQKCU9EVm5hx36yoBSaEYGECcmHHgjC0quWQ5ZtX92UpdQUL1hQoRBGaMot8Wt8NClEtA+vMSxJtl11WoQl18Jfnda9SPq+DFU1KoLhNStOirpEFW5k0Fprch649Iik9LOM30qRon04eBS9njvjflnn/KkLYeAt072unFMONPCy42opUNhHBBKAVKNwA1wkKCVTTl7q6erIW5tsE00XKaSeYwWJm8YoWMFDMkedXumJkHxEoA+6D15rZeTbbChbG0Q1J7lIFyga73ZsgbODaeRQqbWFCvJDbTjaWWkG1ZTfVW3O3JG19ftVklmVptNA23OYROls1FoD0hIBzjFrVkuzA3LJo347pGin/NkWJRGkrjuHFXhNFCoiqGjKL2s3DowismpM6jk0VdBixMtLZXsWmnDyzjCwob0mt+F2GQqQKb80lZ57x1Zii22pYQKqIFaZ0uFgFDPfVDmw9dMxYSn4S0LTR6vTmShSLkhZP3TE79n3B4RuG0sUUpTqxzWvzyT+6C099shmX5VG8+wQpxw1Uo1JzBkMS7DBCnTS0cwBpzfRZBJpS+N+ftMSQ8fWrmhEvKNhtpOoeG2Jxht9IwC01gHc91corYdNPbFVMd0I8pnS9WPC75JPKZVyYHnGuAjdZvej9K3eOiG1yrqHUBhItIVXWe3Mal0XrxcVTjKhc7uezYmG71oQOONZ582bc1pZs9JHZmzCUCjbnfE+n865eZlUT31h7B4R/6eH+ys+7wNYqcxub3XFlvFLGs8/ZACRZA1D5h+GSqFq8vBXTBO5k3XzHh1jsj4dKONjysU9Iu4eUtYb8ivTlmpZPFbcITzasyYb1LYr0EZsg7TSUlaT6KduVfJLq9oifKbxvxHhG5rDaFJEqzZJOs3dmQZAo68pnF68B6aZinrSaJNKVvhDMuguOrNEpTrgTG6IQ/N4pGKW/z+ZaGFKLPc7p8dnR9WEKVue4mbb2cVXZBZnGlsuDUoU4Wk2w3M8oNgxR3fJY+em71RNuy6w42oiihr0RmSjh4ilb2r03Zsn+8Psyv/AMMfeTG6B/aXPePhA5sghppOK1AQwwjybR6sqZe13tOrM3mSbtq8Y6kjaYq2N8mSKLdPVs+aS3MtIeQdS01hS5JapNw6hpI6IUpLfdTQ8Zq89EFKwUqFxB1eAsF6YaRNEUW2VgGvNFUkEcmWSYB0m0KUfT/1lnv3Y9sTp/31+94R6MggPL8QXQ48SaG5PNnYFqVHHdI9Q2wmXk0WUjEnFR2n5tszsuh3zsFD0wV7kzBSr6N7DpgmcllButN8Tenp8AtMrU2rak0irc8/zFZUOgxpTAcGxaBC5maNVquuwGWaVNIcWHQKWKQ875ayr1+FUiyk5yJrdCrUpiEeM4OoQlthAbbSKBKRh84kuSwacNdNrRNeuCrc55EynyFaKuyLE4w4wrDSTSvC35yvmAJQCpRuAGuEze7CQpwXts4hPKfnUoeQlxBxSoVEFUtbk138Q1T0HqglhAnG9rePRBQ6lSFjEKFD4Arwk5wYk2lPOnUIS6/Zenda9SPq/PNmel23qXAqF45jFrct8sH6NzSHT/3B7ollLbpXfG9JP5enhleEnNDcsmjfjukaKf8ANkb3KI0lcdw4q+fT3RLJS4f0jeiqFL3MmA8Po3NFXTh7IpPSzjPKRd08GfCBBzN+ftMSQ8fWrmhDEo2G2kYAfqApDqUrQq4pUKgwosIMm6cFN4fdgmVsTjfm3K6DBbfQppwYpUKEcAfCBmNzm66aIxSwdf1uyAEiyBqH6iWJxht9PnJrBVue+uVNeKrTT2wd8li83WltnTHbnHgLvABkQzLoLjqzRKU64ExuiEPzeKRilv8AP9SazkslS/LGirpEWtypm15j13rEDu+WWyDgo4dPhYjeZJu2fGOpI2mKtjfJkii3T1bP1MooVEVS13Ivaxo+rCKya0TidnFV0fnBRMsONHz0kf5gcgKZd0g4GwY0ZR88zRi6SmT/ACVR8gmvwVRdudN/gK7INnc+ZFPKbKfbHyB6PkK/vJ7Y+Qq++ntj5EfxUdsfIv6yO2OKz+JF+8DncjjSw/mHsj42V++eyPj5T76v/wAY77Ny6T5tTF8619wx8vR+F+cf6iPwPzi/dL+h/wCUC1ulUa6Mf+UaU2+RyACN4km7CMTtJ5f/AJt//8QALRABAAEDAgUDBAMBAQEBAAAAAREAITFBURAgYXGRgaGxMMHR8EBQ8eFgcID/2gAIAQEAAT8h/wD0ooXcVYC02dwPT/1D7ntgUZ+Y/DKyxEIRNaxDO3UT5vVOlNK4u8k4kueI60QZLHHt2/jRk6N6e8fFACGKNT/xvqS/5f5fShApQFiwv+cCCif/AOILwFyu09RtbJbFDgaGqZ1S369SCLScD9N6Akkbj/BBkgLq1J4mhsQ4ln9G9JmRllmXemVCMD91iPV/4iAZ0WaTez7XpjsZo/034qIGVOQEvesJGlhVTuWZdDhNvcG7LjeQvWooYFJg1ok9PelpIylYTgtPRDvTeChlGyNzj2qMDZbcZzkz01d6sEzr59bbrRSyJ3hGV/rGWOYgKWBVzcPfYv8ArYVzSZris8r6U67ILZvzMdl/4ZzBZPshp60PHSU5G2V7WOlKt2/EzADXJuXHzUb2Xu/fgXI4KbrttC7h14xN3sghpa8NPG0FSQWLpFvZ9/KLBipaUbhOzMnaYvU3pBMp6Ez6OM0/JpAQdnr9KNbWuNsKNsX38ruuqlm7ejQxSsBAqrsAvpWbckLLz6NOqlaRACKNSMYo4WdoqVQtNfu/3pZVm/XWjTmj72brqdM0EJCJoLHSbsBZ6f36THYq62DK9qYDcnhBge99Ke4cqI93lKx1jidOe796fIWFTlO33LRiPPeAPnkEOwyhbYDAABsHICCKQLCzBO9nw8CiAf8A+ILwYqw3Nhy9cep9HMVFGD2Sl0+INjQ4w1AmpBAhozPg9aDnyuv28Lu8o7zyo7BIIJNtDOs2ItV3JCwAjWNS+T+7sk9KDda0uD7QMr7d6aabzt2GDnsPdUpbPREm+VoUAGBOSZjyUkku9unILTtEZhC/6TyXIFImDmEZwR1owkiXncDPYPWmKshcHS08h3qD5xYVTJGCIwjvT3CEDQZY659ec8EZqdCZxKWJOdHyUqRZEnbjY5Ucy7PhwJM93gGCbmf9qwZ75n88z7RFIUazo0xHRB0VvuTfrpUK2Y7d8uf3Gf6E3wDxLTWBKSyemvrL9HtyZm6HyrM54PAlXjz7HJhJTyZERTYiTiZw0m/EUxIZMze2FvIcRi0JLX+91PGsnUmAWV7i1GwD/dsqeXPb+YPSnhbH5AwB1iY60KmLSmeoxMJ75iaYWaQAs6461BVdHdY+9BiqBSpX68R+xUhyR5mFim8no2TfK/QaVl79QXoNMIAX0vr6qnigetJ/JpjX+0muBPsxp3YpJxsQi8noQd6Vbt/pCq6s7z+VC3YPBcE8hdoqx7xmNwoxBmpA4TjcT2wH7PaiT8jpFZYNL34bxgwgtnSHyVAOn3ZB/M8hx8yRpP0WeilDXmXGjHqL955oJQy87GHVpAOQxOeRooC9J7q6mu+Xg2CQSfXgETI6PBB8tEMMgdE1mM2fpcy11fIWy1KVsoJE06nymM4oW/WQNx/sGx3q7rYZXoU1hiB6DR79qU4MqI936hLuSCvSVhTP6CeARkxjVEdpPmsq6RrTbt7HS82wBJI3GkO6ZgBrTu2SHaaNNVbsWcZtFZRMjmZH605AOQw6g/XvwAoGd80HKFBLYKaSRdr0n1TxT5qq6mT4ZHrvPDZG4kwQtNTOIb0KcM+iMTLo7HsqZhMhEUMgMn1CmkSZit1ZZxfNSnl6vY0Y2etASSOH+sD7kxA3VrTYVh2jK+3enGm87dhg+soKSLCwtj2amLVOJORapjwkAi26gOEnvRAFtutNXV81r7DFiA9KSG3lyEnhIRt+TkQErzArovAMnZl22SlsRDbs5c743gJtTKG8ghbdWPT0obKbgsF66JT3vtRBu/lhjNRICeJhGnciVkCQj52ikhJwmf8AtXvJKOQCeBaAJAvd1L3PrWG6MoC3UsLadKZ4hqK9l2zbT+qsPQ2ynsXMXaZyT2mH019V5oR2JA7ro7+KFI2MkGsyj0irMHtS8V7IRpzAYsivN0hx0t1moSuhhH9vOvK7awB5X4py7dfl8iPBCDBS+9+ZItQBXNRt7Wm0xQBjcUlx4kgox2H3e2oVoD0Gvn4agzmeXmAWgvmr8SjwkpSA7rLPU/KkUKMMFkRuXX43rQXJaVesIKeFJ3m/UFlQ4nPCDTF3gn7V1ITmJ8nESIdiX1gd6LmunxZPlRg2ETJPV9tTQCGVDW2zfofkUzHRuslnms0gRq10V22j0xQ1jM91urOSTr/TPgWz7JaFssFODlQZD/SxB3pZus8wuZsQIcGuJPO0crcizG/wPsw05RyIQjtydKA+X8aIVDAzcrz9KeMYbJ8FtqsAyjVf0Tp2wBJI3GkO6ZgBrU7EtTayY8yrZhUVYPolIS5u9BPKrXH3QIzKgSmejSQw2TgkiXsJI+HhF+p4oS6Fn8uRyjgAlXap6wLttWx7BpieWeiXtt8aNAPPZkSc9Hc09+abIEii25XYL4Dufg9adi4nMomBo9P6IWD1zImAyvQqX9iG4X0YDy9qQ4MqJe7zweXE95PWxOk0BBAYOcgEIfvbOREdM8f8/UmL7U8xZMgAQ2LqYjSgTESEmtdDONZi8U06BXBGb5Msa8Gh8uFvEP69+SxMM8hu96bOJTvlyCYEPVn4I8HTncQiUzhHtH0DDHh5acO5bGKL0iLlL3HGmr0rFZ009TiugT3oOSOpKRKiGbK/bvvRRwJi2b5oS/ot96/X/vSS6HTT0ehl8UijmxPATXRUe9qYjt/xUMb/AEycCPBBsr5nQC4eFVfufnU9M6irMKXCMd4a6urpadD+86OsHUn7cGHwKVhS3eqsdpVQAxMlujDTeduwwfRkKS8wNUj0ePoRs9bkBncNvkUHu+fqo8EIMFL73obm9YCs4C8tfxw9YrlYIeWz2f55EUlWPPxA5AlNkT0zHrTnkIMCajJnHR6c8MZouRR9LRyLmXijKlCKSbV11dV5rqPNdZ5rqPmpd/6IC0gHYfy+gI0Eg9zrLkJESK8H60cAfwPelUqlc8JCpiW87uUEGwHUs+XLBnDUmTLHDA7MdppryMSpGHxzo0CJUlz5R/B8qkwYneNPodWjiOqsZ3oicKy3hK000USFGkaPNB14EqqO9wTLto96CEjXF9rMXzvT3jhhHZxzSyJIay1/yFEeuTPnTFjZYyKcFlxZDvpTTRRIUaRo8zwTWwmQ9oc647jkyxiehlpIoEJVdZ5JXDTsiT9XIC/HWhNuIvgOIGYmIel+VODTmCE0GngaTFTYt+VGaRZk5Fe8T684+0wyWSTWSw00ee/HEFrcmw6wztrXVFJme+Hpamki7V8Wl2jtFAVIkkmajEn3nblOvBqwFrr0Alpi3xbhjSe980AWMVvxEidImFjN9kqdaQ9R+OVIq0w1ZcLwDLjSNYJS0E+gOEl2hbxJ6k6bPqPLMIIK5bx7Od30jgeCPhlRD2Ry6CDnjeMjfwmaA7omAGgcTlgI7G/eB457MgK2OidNF89+WfASbdNj71eIJbsu+7ry+3U4th+tfqlYZIfdrI25/wCcfA5QZFJJ8vOgmYYqAX4RN28/vXlPc+VnTE6EWfTrQEkjh5YyXQm/2g1fvFBvnIEBBARtBHNoFBjgQkxMRPUoCCAwcYdJu9I+XLCXJBn2P/LyQ6rmZu+A5Y5TrC6fLyQaTWBBcxbS3IWUjHo8gMzbiAtuoC+nKzkXYrs9cR68kqGLrXB9CvWyzIJuBvrrMUsaMAeWkh0sHfKlWEQbsJoeo1my8x5imXN7yPqIASraiQx7DL78hGuanVg+XKBhve0C+gZc3DFBGzPMecgXAp8EaukRU+jhIkSYls+i/FBSXuLUq2olPpmkBEsj0jd9q8Y2TYCwc6CROOqX2j15EEmLVS3bCvj15I+i5lx9iPLiisycANagebUXBR8J9eXZiFEDfG1l9x4z5c0Ft30J9fMcj0wQ6DI+aipQjntU22deCdhLwA1Wp2uk63ltt6u0cmv8wwPZXp+aanQoJdvQ9eAnHa286S0VOML1XHbQ6fwhEvXeN17/AFLGSflpVkw8J+zUjpUURwmlYjd1+OXtEfQEUlT7WvP1nmlOVfovTBDoMj5oebGqNx7MPYmv98FGZ3oO0aZT1fs81KOI0q8upL8I/c0jUoZrIJaGYyS6XpPu9R+H6UVNJmE2+y/t88wLNQiZHRGydKP7pUvolGK5uh2sE95pa/S8y82FfDyScO5bGKMGhgfCD2rKoqQZ5wZ+efKh9A9SpA6RJSPNKuS/wy8lBuRZkfb6l0uz7v8AzgY4g3WB+X8eVEHSDkHZU96lznjqMNabLH8KXr/biVavsh+ntcfQKicB7v788cKc0c+VYDoztd+/Fack1teKnYaZw/zkxm0BAITLAXTzUmTkZxrKjT25wwEu92CMqxVgFSXD00uP9DAKhhMYWe0+n0yXiowxj/tOXKKu7Rs4BNZKQjXEfrvy3a3FvkDDyWmZMUkZz/NC1yepGRmHd80ILoXY5g65fPPAfIDRZjNzNOmUKgTBGnQjjFXqKhqW1S2a6TwnVV11dZ4rq/FS6/FdZ4rrvFdV4rqq6uum810jzXX8iv8ANcLS/wCtfrah/wBa/Ya6fxXReHhBXNCibc3nDpWTOVIDZUPh5Gk0sKsoAFfQscMnhqNZVyTemk0eWC02vHEye/LfyLwYVDUtqls10muorqq6qut8VPr8VJr8V/iV1Xiuvrq+G6R5r9yV/kuHp0v1tfpa/Ya6bw1ujw1+wa6vgh/h1/m1+uK6Xtr/AFa/3K6mnUUip2fNT/3PAf8ANr/C4w0v+Kul4K7fgrqe3CdbXU+a/wBKv96uq811nmpbtS7tTx71O1/pCO1OCitzNZAqBtSYAfyO1IRMY5BQYcC03fHzSrWnbtw18ICrHPpY4O9D/TvyzeIsPAPtxPImFMoSVErC6+xyIpKsIX0roeKv2CuueCv0FdbXW1/pV/vV1fmus811HzUu9T/EWMVDJNz+VZRNXAPq9Io9aoWLlKMnC7Y1q0aO/wB/xxzaa4Ug70jDC5Zkd+9/TghdmfaMfAOUkwS12T4HGIJwGXcsvWjWmqNczlmUM8gUsyoeZ+n9JPWobnmuk81/rV0Xmum8101dJX7Cv0FdT2rueK7/AIrv10Wui10GgEl/4IpipMJrJIpZejWYLxUNXJ2jFM37duACIiZOt/Kpblm4gxWjw0meKPgU9vNDZx/Ok3K6TzXTea6Kuk5AB01dB5od6cUilzwCSDH1Fug4oumtAJw/hBqfhSzdb06jkSiJY4wW4lO/LITBFjz5IbXKoRs4RIM/QFgxS6JrAP8ADxTlCnTlqbsDGoeh1roXwCzsxo4zcyBbxpMHZwdLrR4ypSS6nxoh+2uqh5JkEfBalfZh4oBCjdrBz3nGR1rtiqR0dnUKDDMQ9kcvxSKXirGFwr1CkA7dA9Hg8CwFrOBcGffmmJBjhgBqECRQ9J4CWLUi6a0AnD+BLsb8bjdUDzA3Ie+iz2TlBhDc5hZ5RTDXUea6BlqMazUiHkwDah6KBg/Vyd1R8qkQPQmlcFEGT6SHioOHLz0zuPxU/gPVE3IHtQdkgG9qdKALGPojFRFLa6C7WmtzYJ3VzXTTiQCu5etfc6aXwkJkoyrvUjtgbjpsQkTUOtX1vksNzY6ufehk6i+977+mOAkyuQe/aor/AOTKSydL+jNBiSTlW4yveHTHNBIXigb50BwjxEdd6WALcEkMa0Mg2ozej5LP0wM2UvRyFRJXFICFHmgbjkmxKW5OlhP1cjY4SS25wdaRm1ducBKgp+XxMlzV2OtTkEGPvLAPWWjUoSf8R7KDCmIT6lmBMpPEwn3RU1aWAN1Vj0JN6UcczA7uaWWIhCJrRjMluYG2fqz8y/cIG7A2LqpVZbvA27Y7VCNhn0zegIIDBypGLhYuftHUw25ivkRJgk9d9zerZOXFiNh0NelTyaLD0jD76+lMty2x+79hfmrpjQGlG05OtYRqfocfiVm4gCNy59AWXOlKTwXRxQR3OCiORm3Me9QKm60ZfK+OSGDgJVV0xzoFkS1+rTTflTMFBSU1UaDc8/Us7uHtuQsDLSmU8gphil0TWochx2U0Q1lsHXFCN74HNsr6RfVo6V3Aj2+ooXcUupIv2u2EvtL0q83aoXuvpB05UvAM8K6cF9/x4wxSxKMWS2yx6c1zrNkISe4UcNFbQgxO/TLtTlHIhCO3BG54cowHmpcWWKpkuYqTRNLlgF+QsIwKEdIelJIHWDCM7eIpOs49pKltGi6VqGKa9wcg9j/xQiSMnMFheiOVLxN7u05fd4Jf8KnjKSUMkTMrQ99qBGhyu9Bo+defIbY4SzJfRNnfukABYLAXZPlGGgP0nDwihvyZdbhAzvzGI0bVOdpdmaGgvW3w7roqnq6vqDf+S+4Wj2BSSXTuz6EO9LBEmkuiH3Odr8WPwpLqwnkfii9icKTNjZNHpUtyeQ2kb0a6aehAiIno5rSacYjMO6UqXYwIyI+RaCpUkJASmVtwgFIQqsl4TejNCRArZXta1paABMPNH5fyEtr8kdKJCTdDYmS5jExwKDdrNyI/cUEikeT8pwg91bUcJCZG3SXNPkKE0Ft8PLO1N0iJ/UxWSAr7XJv9JlXRN3MsWXY08nEz3AwOUs5/Kgww2Hcw50qD9AwGlW7fkthzIVBWQ5E1s2EL5MOaaICDGdUwz0inFFG4pi9l7L9DKCiO7U1Gmg+jm+qetQhgzNHZFjvn6PWwaFPS45LljntYy68wGFjpPQ1b7+rme2LBLMiBd5g9525k9LRpiXUtB678TBMjxiU6l22LzWTyu9xzQE4UoZbUmk4rhsVeu3BDTLVKXexLoacl1PmEP6X1Mb1YOSQDYPqm+aIkbI0geGrlEEq0doogDzohG67fcrUAY5EJJw9Ppq/B2G/ILtS8Jg5RTDU+E5Nk0hmDtFJt5CveZXD1fzhtRbNNycj/AI8RbV/AhenKgxiOwsd1e1KjGtUbXwXx9NjkC13UPcohmgf168XQgKiIbPiwudLYhA7pmQOs8jdFZbfa9MvuWtwhVlxDI0JA05WmiCSp0jVq4EUDZ0tiRsKYdyajbYoshJhNe5JxG0cwB61LG4LcUAem3s3rdnKY7paMQWl4o9CRLfCtU5eZJD1pnexocEUWcPdUy+UDxPK+0QSVOkatGTWMgVnq+A66AFjH8HvJMDqORu3KSdKRjttnqv4mbgM9JmC4dw9ygv0R7DSKXi4rD04aXkw6yIB1WArIVh9kxPUtnDxWWIhCJrUToiRmGu+XrOO8k7vNxvcR4J60o45mB3c82AXq137daTgpL6qSh7tZS3PWUnqSZ6coAJNEcZNq+fy4EYASVMPi9FGZbnA2MkmemKSJzBSIiY3/AAbUsAPUT7BnWpFswPkn4ooDEVSvXj0ioCDrAzPd1p/gbkyIdcE3++/IigvbI2aEW4ABM3RrDTvzEIRNZpgmt0CkxJ9aGAB5VhZEqYXTFZ4mQRD0wU5RwgwjvQR8AtD/AL1zxgCQKnrhNOXgAFbOdBDXQx5e0qyenCBXgI3NqaGxCN4fg5MfHNs6tgp6cvBPQl3zl/jEPVJIm9x9em1Q8sgQHib9D8sMeJqRMBu9GgP01weDisDSTcPcpE8QenWjc0lZOm9tyroWHGRCW6n0n8mDSp0jVowoR9TgzeD5l4TnuCEu+h2w0W0lg7vp1NOTAZpySAgW33HKeMqFhluT1KWzjLIzaV5v4n6YFhuZFU3NrVfUWGBF3qx315okWVnUo1qwwOYTPCOiwetDWnaOgHoiUPM5Rc6VLRbc+vBFKjkVuDpDbXVvbJ7S0mtIzXN9joW/kwINolPXhMLdLd2gVBTpEW3WSPCtWt5M9xMTD1Kn6C3FR2ZpVS8biltOABXktngXqwfVyGa9zYO7GC3MWZlk37XX0R45AVKo11Mz7I8OnJJwu3gj+Upy3f8AkVKRholx+DwkWPUrixsSvgqRR8YJVlaHs4BLBrRW9uF4F1isWphoErbrHIRtACgtKkogkC7tMjOXGl9CZLbU6u71/miUFIZHcnDUUyzMx6sH10xQrFS7236O7H3oPIXljH0N+uT8hbLUrt6o+rmek+lNYegMzxbs4qCjyIbUKZWNsHQKGtINhtmzM69bcqGW1bR+E5TaxDNs+JDM5/x+f5Lo3OfmcA83hr7cDJ6VJHThZVeBvbkOfyUjZXoeW+1B2FAEB/QmNrRA1pwvmnSILZTPxeXe0rAwWMV41stJ1oDWhH0MBpgszSyy8YlhHEm0eCDZxW4pJOc+xORLXI6phfLyj25jcSPnxFLqDx/em/gkxqWfc/kS/VznJIGDgs4Go7I+eGbtQWCl3LwfntyRrStEa9MtQwcBKqlFg0IbRvqnTTd/pAYJHJSRQ5MpmdRzpr2oIGJG6+IbrayTtis6FnyJybls4ameN4AZ+gUIjAQyyXnJfsa+hhpgTMp6y94zU3yuyQDPc5Acxo3Ga+go+n0PvDrSOw/yk/21GEtmk2XP3qImRCdWPg8IWbDWQTGGLFjkBOsKsTsmh77DRSL4d3c2O2xP9SJIoSH37Vd3SZib3XPRjpQA7nLBOueuk99aCPdEhRpGjUFyH6IYW9AN3lM1MMxInKSmGJrq4pTxkYBe0wPnxDJFitNWV/d/I08CmiAi5du/8mnmEuOBY7bx15iCL9E+6t6a6DkgK+1yb/1qxZpD0BuYqQQ1L0dgkmuR760CM9QrwMMTNph96A/W09asPyJajaSh9lIIY8FTof8A6YD70SMRAQARAaH3eI0a4UiLum9EFMHSQ3T9/wCR9nACUxtWthzGnNKdmyj7g3yno1YOSQDYP7BBs4qbz1rzKhZdxq9yFMNoTk+PxcPCJpDMOEvpUz9TQFdyu1OUOf5Gb2532iCSp0jVqwhUiR4V6Y76AFjH9oG0YBQ2hq7VymSXfQHRHxDojF24b774n4rJDVA9H+Ca/wAj4nMIoVNM3VsHWiYWTDPQ2WYnL/cmgobBHOoelLI4cqsWjIN51elOoikaQEqp9igv1fffyMHfmCtwdIba6t7ZPaWsOEZrxvodMf3pTBsUDEDJn1nFBCxIMlsGRnfVWdxAXNSQMHzUH6WT3+P5HuK9xySUQSBd2mRnLjS+hRGj87V6/wDgBbtZA2RrL+IZxF1aO0d6tuSRO1Ge5suTrGeTN6jDcqZ57fV/ke4Kze/GUrH19r0f62oOwoAgP/CbeACg9NstIfAtQGxfuuv4WBgF4tsWGlw+KC8mlfO+hjU0kkbRzpK8BUgOnP7isnvUMHASqpRYNCG0b6p003f/ABCNzP1Bc4atxM3uo3Cv2g76USPEAlt7BkW2JoDThrN9DASRqad+fCRSKXXnRcaEulFWGMSaHvsNFIvh3dzY7bE/+MgQbRKjljtB6MN2w0+j3De3MbULYokVJXR/QeA2jCDCb1I2vMn7UpCDt+Cv377UAlJU0lifwCa/wj88GAUnqHTBesHCH/jfxRc9mn2Kev3nEL9UpmdgHHdCiQs9Yo/11CO4tOgjtOhpqWyFig512JeaGAmkmd0tf/IRPp/8d//aAAwDAQACAAMAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUAUKAAAAAAAAEKqAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAewqWSmQSCMAAAAAggqIQiIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOQAAkIASAEKEAAAAgEWOoAAgOIAAAAAAAAAAAAAAAAAAAAAAAAAG4AAAAAWACAUAiMAAEOOqcIAAAAwKAAAAAAAAAAAAAAAAAAAAAAAiAAAAAAYQAMAyASOAACkSgkIAAICIAAIAAAAAAAAAAAAAAAAAAAOAAEgAWAAcAQAAQKGQAAWAoAAAACAAUAAQyAAIEEIEIEAKKCOOKCwAAACAAAAAoAAAAAQ0AAASAAGUoAgAAEAAAAQAgQwAAAAIAAAIAAECIAACAAAIAIAAAAAEaUAACAAAwAAgAAaAAEwgAA6QAAGgCAEAUAACAoAAACCIAAIAAAAAUAGAASAAAwAAA2SgAAAECAAMWgAUGAAAmAAAwaAAAAAAAAACAAAAAiCCAAAAaQAQAAAAAAAAQAAAAAAAAAAIAAAAAAAAAAAAAAAAIAAAAA0EaAAUAIAmAcIIMMEEMEEIIAKGWOCKGWiWeiqmyAMQ8gAgQwAYgAeEQGAAQAEA0AAYw0AQQQgAAAAAAAAQAAAAIMMIEEIIIQAAAAAQwMUgUoCAAGAkQAAAQgIAAAAAAAAEMKGEYgMMiAIAAAAEsUsAAAAAAAIgAAAWAAKAAgAAQQAQgAIAAACWygAAAESGC0QQUAAQoIsAWgIAAAYgASAEKAAyIAAAAAIAAwAQgAiAAAAAAYgAEsWAAEEUOAQi88AQIAWACIwEgAAAAQWEMAAgAUAAQoQQMKACwgAAAAACAAYAAMAAYAsAAQAIOAAIQAAAAAAAAgmGAAQgAkUACqACAAEaKAGoAAYwAAwUQQA8MoAQgUAcAAAAAAAAAAAAAweGAEQgA2CAKIACAQAWIAAAAAAAAAAAAiKYAIA2AAAAAAAAAAAAAAAAAygIAIAQAsQASAAiWIAAAAAAAAAAAokggAE4AAAAAAAAAAAAAAAAAAAAwGuIAAAgAA8IAGoAAAAAAAAAAAAggAEoAAAAAAAAAAAAAAAAAAAAAAAAwKOIAAAAQAUoAAAAAAAAAAEgAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAQCMEAAAAQAAAAAAAAAAAEoAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgCuAAMAAAAIAAAIAAUsKgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwCaEMAYIMEWMQwuQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAA/8QAFBEBAAAAAAAAAAAAAAAAAAAAoP/aAAgBAwEBPxA5n//EACARAAICAwEBAQADAAAAAAAAAAERACAQMDFAQVBRYHD/2gAIAQIBAT8Q/wAWA+5I6lD+IsfYYzHhagyveqDuQ7lidqOYMFV61YdhwO4OBP5UPIIZ8uvQrjuCIAqB2GhE+XfoVnkdsQoKDuDU3WtRRRRRRVNhrHcn2uhsLmg7Q2Gg0OBc2UVBoOR3QorCioqKq1CxnyHI7g/kcaDkdoNaiiiiiiiiiiiiiiiiiiii2HJyO4P55h85xiwH5z4zwegGk8vT8ycgqPcTqHBscgm7wNT2lQrDg+H5uceklQF4QqBeDzcO0PjOxDg7glQF4PKHm4Q1fiegRkcjk43n1OPSaCH80/1n+wcfhf456HR/0T//xAAtEAEBAAEDAwMDBAMBAQEBAAABESEAMUEQIFFhcYEwkaFAsdHxUMHwYOFwgP/aAAgBAQABPxD/APpQFQAVVgGs4QVNnCCOXtH/ANQ1PclIiuCieAhv1Qrk9JQJkRBEyaSdyxkFmwChQUyACRd/gsQZhGssjgLZfhd5TdMaiORE3H9NGChbvAygzPKJjJWmNXRCiPIiP/jf+EeBPkH1HLoWRXSAoLsKJDmPh6Se6hbMc1O7RfJNHuuGihUooiqjMjqbERO8BGqDOTBtuj5gmAliWrdkMkbMIFCMAaI5EeT9CUIyhADKrwaPJnOmAyRKIwkbVAuQTskapcqvLorQcylxVYplu4J/4gyoPMkCgEjgKgMtLEsYVIPt0tXrq1ZsUimWxZxq5hsw7uZH6wEy00lAjPCAjXAEFncU8+TehUIykjJngJkSXmJ3RMADd8Nek755gCeidRRqR8mr4sIjGkGuTcvQVcSsInFU3g5NDkkBxfO0kjcZxUKCZM5PrSXQNcgFd1UAMqgCs0wlIIaimMom5CrOhulX7HtrLbhNARVIMRjnJ50EtwjgbW54gIdv/DWLOdBNjkAYgoGb6O4ioXAYAHIgQYrfSKindeoheIQAYHkAjwg6xFM9d95/zjoA30oSKEYg5Ejph0wszbEKwUAs71hq0ccGMi8qeiD5zD2sVtLKPt0KZQFBIGRlzoUrruSBmByWAROSGkfiOJgsHEIxjEdk+lnzhI8hErkrgDKhnTS1DKxGArnKYFAK1GoparpiLRYEA2QJWKCw1SNPqDytgIoCG9k1Jo0tgA7lDjnOrdOu2aikKywPB0jKjJqqK+dHXnGEUQUoHdFlQTQKCYDwEXcoFZj/AD4YQVEgFisAsC41IjQRW4ckBu1eQ16vcDRKKvv2gQVpAuBF+2hWA9RDufK0V2GmbTLkhEBKhDRVNNUYM4yZCPi816zL0IKgQAADGQ9hCwi05JsEMG6Q2ekvnoWzHNTu0U5Jr2+w6W8wyXCr4PohIAuGJjeUDy5hBRPWQch1SzDWB5Vqq9A92Dgq4KENDELkaKkvzaUpHyb0+QTTBiDrOXie/aHCdS2AxchsIAIIfJmOaBAUoIjuWND/ADTECCiSqGAeXR0LUkmorTCwoZDhjSY5aqDMFAwYAPTvQ6BMzwK/tqecdAq8wZyq5z4DU36RBJTyQY8g8aMc4xZAJHaAzMj4vZKQ2CsG6sNqJltz1N82ASAFZJgMwjiLsLrDOYNUlgG5axpxuG5BipsApmHCnaL90iPkRHZESjp8lDgGgTIjmmgK3aKcECwEN4HjvgsIb6F0QsvsyAMkvGE3IQ8UAElWz1JXdbtqCEjASgA1FTR172Sft4ywbZkw86ZGCq2izu3s+O56fxlFAMggiZE0TiNIYwCkDTK1V2U/CIob1CIJRBSMopn/ADHAInpqTZRIkHIaGtxm28xchKKDz9HwWVnnlrjzZ2nNKXZK27FPiT46EZuK1SrTnG4Pd27CJ6hmMzIfg+2jRBrlYoYFbSgYLDpDtzo4JESQWgWUs6XzLMgBVvg5W5HDQEe5QILHNDjEWmRImq12BV4LhHIA1sd6A8EozDL+wfOlvWTXCQcoA3e61K11KWbAoIoosCKL3GImNwCZB6F5hyVqkmFgso2F9NFxApbgIfg0oAJi5BjDyswx5gvasGACkoljijqdUJAq8wZyq5z4D6DnEK7IiiAYph5dHM4EkAUM5BHgehhjUbKkQFChAIiJT/KSjrHjRjngxBAoxZp0LKqnhPJecAxIqiop3X6QQ1cVxBfsvvpKKDmJlA+46WZdKDcxRBo3O/6E6JvMYUKDcRHqObZTcAvqqk8rxXrGXEAzApUlVehEUYIPCsLGGzkxVMNzCADBxgcxx4nYFkTmhBhwChwD21HeOdbeBtsJXBxJMYOO654jOGIJlHYT1TcZzvBFhBhEKtJKgK8VRRKEDDhb0+Y9JaC/BhAvF6N5cBdngkaeuT11fcJR5Mvs6tNmy3Yp8SfH0kUuQKIIAkioIC0zot9U9QAcWRFSwTACCXYlDIBRHyM/yFlkBgAsNiFgsF2NZJQQM83EQ5RVIoz67cjRKKuDfx9QhKvlsx/ZdfLtgtVhvtcWZl6PXVIudHKFDhfLBSJBpRACxKKE3BGhQjAGiORHk0cAYZ6qXABpqoyBKg4hFgZJVA63dY8aMu23KQtmNxM8uZ2W6LSGBDisVMwrGemd070MmAq0VgBqgXtYLBV9DUnw0EwxLTLIO/JySztirgmBEBMpStDT0CyOmKosHazRX1cCZ9dwFXCdCxMg03IRVRIVy23Ht5B1cUmlMgCjchJ8In1H9djAAwREgQQLKJuySAjPAGFMAUBWjlHEGiJRHk/xiaqkQN0AA8roFJtt3IrIKYUMhwwqjlrCMwUDBgA9PrHVuioYnYUQOY+HTHAWptVuo8hRmmlRk8n0TVEhCDJkCGKUkUGqWMUCCA5095vFgxE8GLu7vYL7Upmi7Z4SVznGOphBSOM+D8H20bHL1jbbkALUWsHTYMthG+/bggUKpxV23h6oaNuL6gl2FVZXCzZWsaQCysYrKzm6NWU/HjWOVShLYQcMu3l1jfKKERiIxDCTRSHUj40KJaEYV2dKkjuZgUgTCIQyk0EFADqQK5TyDOXSBJIQcowuFU9Jtt9ZCyQoGiWwwAptVpSJgAnkoCBYKIUMh/iTjjAQ9IaiIIhyG+k12HGWZzVUtQKxmO4LlrYCgGmYiFY7IpuFGVIAZSlkLkNCg0IAEJJttMaCDkvXAKUd8mYpzraxFWBQEBBV2EFDa9sOwnuIgFAiKI9oha2c1B+78adyoFWq7/Yjw0iMmMsUwrFZu9qzLrLiFKlqNifIMxBgm9UAB6Ij1H3EAQhCvLhnleNPQmI4SseuW2gjAgkSidosMHcZM59w+2mIA7ZM/fWyq4u8F3ZLOJyaApbLnIdg2AwrYViqMEjRLrZ7RcTFAssMedFdUvobLUVAXdLp3bl1xK0S8N84fOsDTFWytO5YLUpQxRUjIignLVHSXllAUxjO6OC4tNszGrB3xMIQMWrREgLnRAqbgcTupoyVoRUqBEHJRSibiHZUyYdTV8ToQhmKQeYAgaIA4/GDScCBWjP8MsjwuUCjmUoEoS3GkZ7Aksm1cPAKJF07VJ5XubyMmBQEGSw5JM17gCEBjg1JfFHBkBF/90gGKHIiRHsVOlIc1B+7UeQJAUDkNt5v0jILHVIAVwqA5V50KqtNbK03WuOXfK6FCMAaI5EeTRwBhnqpcAGm4ONvRXgShlXIIGmmtoR4hvrl+dDbCxQyB+w9oXJVZcwp+59+sTW1oAClhDMyE8R2CiJ0EvAVGhT3Q+emXJKJd3PxpHKxSVa9j/7pIMAGVVgGq4kFXNwwbVakijtMkbjgRBAwruIiiIprJ8GXiAldiIqsVIu3eM+JkMQSijHIprEnYjXLcPAEuCqtGQigKhyhCVAn+Crp8DCC5ZAoCscaozQcubqKgcolxRriRkaaqKvq99winUSFQiOCGosZo5RwAgAQA4O8gZhqu5q7bUMBPY6h2QE+KpfqLxMcqaKErQCw1XehFLkdbZvjkwAsaFpOAU0FogKlaqFBIJ4IwDoQGou/Ar+B7TLMC8QB/Z1FERiaHaSw8nYITQX5FPyav2MyVWXsJM0lMMo72AkpG96HpGlJDLwze32+hMZ4osFhhEVVSI6FI9w1SLcYwCqwbVY3XQYlEo4TcSPV4BbiRNElhgkXxl0fcFSYBuuei6VNl4pSBLKOfR1TMzP9APp4CFlRj/kc6LsKXa/cJpJ2NG1Qwhb8GN9ulRBQQGUj750j5jfafc6UxYMF/QUn31/ev51LTUKoDgDDbIbeM63xbZI+4+hv+o0iDjy4/BZ99A3F4MhqBlsxOXOM6U/uGj567avsJpIcOSj4Bfv0PUkaWgrAgizmF8Gp849x91pryAaUm5UU9RPTSo5R4RlAgYMAHp9EltR1Jio1yJTAlb35mbsN7z+sn47Ky2u9kDYjmC8rD6qLlGIyYyxTCsVm7ohTA3ZBjbZUPZdG+28SDz/ovU++pdZLpdnn47dx2/toJPX9nYB0ExYdpw+eskZatygvgq8I51ue/YbGeMNgEhHAlACqV7iWOiAmCmTfcycfSFBGJhFlosr93T4UDxCKFyI7Ov7fX921Xf7rX921/dtes++lXdX3/wACDQfXKAs9z9z6FnO62ijJIJiYClq9XSwA2FWl+33+tO8oCRYo87q2bNyacopUtVd1ej5knQCklGSNxMh7PZKLPpkQrKQwDM52O21MsCaj5ci8enRqKZ7LA/un307vfsFIoQ0RMR707aNCYJSihPX9D/NWA2pyZWZ+hR4QiMQBAmDEMrsLoXkEzDeNHgBXg0vJ4ypFLIIiORO4+1Eu6QDgBV2AVgaDtwRAgaAkKi1kwI3VR1qmYIZGXlYAWXCqENFiAqJhO6/TYcLARQwWg0tE0EcoRsvCm054fMB+4LELDEYAFruNF5PGVIpZBERyJ3KxpJCw2HktoZsEe5m8/F2TFNpyGCGUFIxD1iqWVVVXLezCc+BR6ERym92+rgRKWWN34AvxokGacEmAYwC7ck56ugJClqdPGFPntWSYULirX7H27kefYvDpx7o+TRpAbTIMdnqdtMW82zAK2OWYF37wTQlEgEKFBUJBp3r5SDJ2OGmRQDITTLUowIAtHKbArjVbLsU0BybihbN8tGpteAoAkaWGAco7dhyDASjMQSMBw6II+PUwoEyOWqrEAEAAQAgGs3qQ0AAgJBwBNB3EX2UClCqUeRHntSO+fBkoACCsmqtCeVLIbAAB0UVgMhoqAyE5QRj3AVJb8wwVA3A4KsB1ZFxWpvIbkMUqbNOyc8l8mFKUOBKoxB0ckYZ6AMAHWbcngLNgbhrWxg3e5xjqvnYuCQK2mVZ7FDoJMAniqCoFymsp8ANtAcqCmUcAB2bs8FPV65uXHCYr9RgVtuBAuTEADeb+NHrGx4Nj4EPjqVYFEuNiH+ztUVGUuQZM9Y/Z73a0MtYov5wg04wjCI+zPZtgjrmckQIiEWAWjlHEGiJRHk7TuTmCn5SPAIFQS8OcwAAbABuwKrnuAVMVmUCDCNYWywTlHACABADg6wD7mVCbxCmSlZK3spBpUJBk4OA5cGBz1aVm0QCgceHyLuvaQ6XFUFy8q+xAwHYP5OZzYEEYQhPHYGRxC0hPsvYgbR4RGhSh82b4e0YZLiVb5sjFiZZnZlD6oBABtWW4hTK0O95aw+2UgLsoQQlHMTMf5wiJpmITbO+l0DVWPAox9tJKksVdwDTcyOdJPOtu6wrgKwMHHcEwJrOQQhzD7/UggYByrA0IzCeajLjaoN9qZ467J6iw8Ja0yhCZ3L2FIpZCggNtruOTfM7hREYmnpxrVq3JIXcxxe4HYQ4SrCoqJMBZUcWKI9HJsRGATeKTM3GEjs0edWgGoyQLA1hNjk86y8DsKMQhx3EHq6H6QKgAsAAVgAFYZ74Zq2EEEV2rKZUGy9gfwvUaI7KoZYrB2gGMyNYoEsVWu3BM9A6fVFVS7AaRSStUEkISlCGVyr2uOJlrhc1QEYQYk6sufyRYqEIIJU4wLRaq79kk740IF5APxq11JKBGAaRwADHIaATV00qjAAKroEKcAcBKzIgMXJb2gfDlEYrHCmMYhDNDwQWdSBplR2BRTpekYJbEGKPOUGDNV5XBYKMCqAgXAAwforBITk8U7AZzJi36gHlkWS8f7J7aO2GxJ5DyLfl8a3jZvomhB6bBNsb02+n7u2Rkyl9W/n8fQA6DAOW04e8LYPZa/Jwr9GSd8aEC8gH40NHQKCFcvIrCVEWk1UCy/sEeG++N9brtlxka7LZgyRpUNq4P2AgBgAAADtAwtqCw74QVIRERFNSREM4FdExAE0zFgNWCLFSlhivPL0oW85SigAGQQEHOQJ2nIIgARAUYaEoMoOjHwj46LCZvGXg20ErUc9iUJAokDGR1mYFYgHwAABgACAHdPJ4owKBhEVVTI6MEgMTFc5DIV4eaoM4JQ2AkEcLQG/e++qqMSiCYUx50qoIWPBGJpqg8rf0asRg6oYHhKHkbz9TGOROaBhbtBZ5Jzek7y50LXh6IVY44iX9nawGD4bFf3XqoFcGmWYnnQfl8aHHD8HrYmWBNVjnkXj0/RBEEHgf8u/hmRmgTJ7fb6bOBvEE3EjvcHzp6kiTYSFfYIH8tBUPLOgrNGI0FkUAMzHL9j7dr00IQxEPuvv1mA5y9ktbPz1MufYvDpX8D5P1xxWnyglAAy7jRNBQCogEIVGHCjvxoUHGgiiChgAVTAtYq3B0yloBK0B5h/gA3zkUcQd0FHqeL9M/gYjCKBfXDnY5xp2z7bo1fu6t6GelE1tvXT1hEplCp+H37ULEF58gvWi+3YxJxoaCbPUNgllpGggwn61ByqSUAcARMw8RDKCUcQu8KKqqtiB3CxzBjcxgWiJvmmNP98MQDAAAAAAB0j41Xh1P+Gq8P216H416j7a/rNf0Wr8vtobb7Gv6zX9m0Ns/y0bJ/lof+Vr+5aHzpC/wa40PtrzAez+dem+5/nRzB7/za9O/486jv9tolk/jo8y/76a8n3n8aD3+M/hry/dfxopn4tXnT7LSgiMI9suaMWGSUu+E0ibk6qBVhqLx4joJQEoj7J2FbFYWVyz0M/GnDhkWwg+eXfcHx0Ob06KoIAfm/w6ZkgpPvoCTNBvIr+59+0hEDM8jfydQjertcPTHUURGJoOLMnnXofjXq/tr+s1/Vart9jVtvsaH/AItXz+Vo2T/LR/M2v7hoXJ91of8Ai1liXvryR8n869M+H86H3R7/AM2vMH/HnUt/sNHKfw1fJ6wMfuP41Hf/ALe2vL8f8Gj/AEL+LUt6PTVLm+X868y+3/1qe6fH+dS5Pj/Op+fxoFz/ADpHm+H8ahy/H+NR5f8AnpqXJ7//ABqWx+Vr0/IteH/k9dQ2/N/OobD8v51yAf8APXUcFpRsPw0HsH/XjXov/HjXrn/rxrwE9j/GvEz2DrvrfzNf3jVN3+el91+Wld2+XX9xqvLqvRQKgPLoDuPY/SGlvg5NEyvybaVqR8G+kYxq02LnRRKlZqZQA5SSyB1FNSoRS/By8L4F6Kh3AADlzA6bvZ0Y805hVvN7RjzN+kKOAm0e9rgMht5b5y+euNTz2IwXQbESUAEGwoC8w8HYB0Y71BK+2pbF/wBeNL8D2/g1MgHt/FrwR8P41/WGv7/X981/fNL7r8tL7v8ALS27fLXrvvqvX76r5/Ru6w5mHU6PQTP6o0iDTS+E7bv1BTIx1SQD1NbbfWyauvvjOmYh0BQFVACq6JUopyBuz5QejTbqsXpoaoI7VMD76Q2lbAgCjCsoDdsYdLonaEAAQwVZuV9jsLdHChGOVyivrdtur5gmNIijhNGuCTu2YPsdMgGPOjTGdPH6dr+m76MiN7HY/AgM0wM/Jy/wiDcHu6T3L4a/oGv6Dr+raR1P7zX/ABOksfvfxr3Hy/jXqfu1633NI8rRPh/H/wB1/Qn86/oz+dPF+LQNYf0KtSacb1Aw6AW7w40PV4Hj10lcxQuD2Pg6zV251irBqWZ86ZosAPA2OikCaglSv2A+O11dTXletQOpoN3vR0wImgoBnpfTbA7rxJwXjQ0E/Wobh7uk9z9xr+naR/m1/wATr0n2dek+zr0n2df22v6xociLYHfSNauj1Ycn1H0iUPPW7MrZ50LSr9FdU2F3P/rTtUrddOSzF7FQmGwrOtrzdJs767T47XOSwaIzR7CsOQaM2H0dARc/x9BitoKEHk31AgPhw/o1BVA8uv25N/bRdntE/fQaHRJQAUbZAPyedFVQUwoj1AeNo7Jp9EUrZUBgruRcOY40CX1hYRGjK0TaZrtpDulLoyCsU2Yzw7aJCmazW4w8Gqdky1iFkSjhMnjGt3BJD8KPz40LAPIP2B+NJ0SSRe+D1ZwcobwS/LdbEze2+9WiaTy6hsIoSYhbmAjWr1Nr5CRBEQIiOOE1B3BUUGICYRz56Pp6uIAJRQAuY89w00OQ6Z9x5cH305JXlqay+L0bpEUSOmoAC5cpq7MrZ50LSr66gKsDddPaTY8326xXuoexq14V7oowEOa8PKJuWMe0nU2QCQIKWPC9qtQfR0oRl6Y7iK1Ienl04Yjy0jhk7IBTwcmlQCvJtoik/VvBI4MursKHA2UUWM9tOlFkFCzKjFEbzzMutAnAJiJxzd8ZEbVC8hlDVKmDZJjQhCQMES5GQ5dwd9AgACAEA+jdGNkG7VvGw6gLgo8ymFYNw3eHqUBGxA4E+A+jcdXF7ZINUu6ukSnzjSkVGQQEEZi/8GvtFxaQGMgk0TJRFA7EGHwTwDpGZJx5HYMRCO4g7hpCg1rkoKbgECBAwJJgQAwKqSgBoQHcVKiCba5d4iUNfiYeqSk4AzpcJEG8dNwHB50e9YvGpoRtgfy6uFkw+P8A5q3Jk+k5aDS8CHHn31vg6ssXAGVXBp3ChSXM7m5IGEmQwYqYXbd37MaW0WWFn1RUeE/HSQN1+O4UaMdYNY9d9YWn67aESoT074YeRdMhAHLkICU5IEa40Wov3k7BEAwGuzNDlZDWPEmHhzPOmwgowq1gAZfqM7atuoFlEyxkznVtEEBiQDQRhIbjV7QhyJVFUDd07WJKSgTIiCJkdCuHVASIEpJkhBmzS+rBycYfIKAyLRElMq9BtzqZkbuoWoLGCA5RwAgAQA4O17QTNECaFQTEBsHc1U9LBJlKiKCHDovKBx7K2ED0HDGmwRy6EHcRB3caMGiyHBLQKogRJEZPYhrAZoVgGQwURG5NbIXw4dEY3WfZ6vl4/c9Y0Vaw8n/zQIgmRPoXLVsN3SNMcBsdBbMF+eNTshc+/S40h5ggPXB9h0AlGhLplPAN6B57ChSS7pAOAFXYBWBosNk0nKAig4TZsrsYJJhKKIb4++phlzqQk5Anx9Q0fCdPzH7dhcp+wHl0BaPCTW2Hq7WXpoGAHkw6wxD4cdgfhCJuEgCmSUmc6YXCuxJBMaMxhwaa3bQtasBVeXP1AVABVWAaFDIBo6CbgRgudOPGyDjGHYcUDFdp/wAEUKpBn1dIpCAeag/s6zFxRqGzBEiUgy7va4p3xQLAyuw58O2kz9OYFIIyiFaYWn/3SAYociJEehPa3oYHqoD30rZgxoFEiiMUUuMOluSVGiKAFUVQCrg7H2QDOIoERSImRTUOcMipuAgkuRSrVpDfOIKnAphDUG8PYnhS6CKO4zW88h+db3VHKpyfuNGhJsndS9l4PfSFCbr1nNmP2P70iomx0VmXZ50UqrV3ep8oIhgFuAuxVGFxoSBo8Kqhc6UMwKYTuS6xQlFSjBAOwt0qjkyQUKgF27goLrnY/SM6w8+NDQ0T1nAOw1W6A/77dJ5Mbvfu3wnhyaPaHqaeJpKMKtEAQUV5ZowC8yIAhVbETMBIBD6kKgiJ5QAeq6nQI4yFQp3SwGyjqishOIqFGOSKxB7yOjhZVE099HCGEC/h9tFJHj4VIiAKVJTUOdlbQCkLCKMYKaByCQIEYPt3PkdTaUODMTNSazlVhBAPKIZpGwGt+cUgoABVWAHRKsW5KAIRFsj66FagQKlY1yFsAGWsXQEfR7sArkGyBmqYC0XFQ1CAkxATUKAkqNdKqrlWuiN3BNfkdgw3b/8AQ0a7IDKtef46VVVq6UrloSNji+N+hAq4FQA+wKq4AV1Wwg7gLdq7NvkyXsbxQjmIaESODEVTArWgeIIRCqcABAAAPo18smzDAggjBA2UQ0uAREGV3ECg3OlHdMUwFRokDTFjHGjYv0Cpg8OdM1rsM+RE6Gt8I9kX13fB76zIp5Nuu2TQ4uywIANRKSjFpHOsW8KGBHIdAwEV4gDh9B5gxUURJJ4Re/Zay1OBXK8BV40fBAG4BkUJKWFNhpIvPkrCZAUwo3X6OQpnJZTugAIoUuzf9k6m5nQEQaJdiirRHnulXuSqOZFoogBx3L0XNCZZzlTkoVV3FM1lLkMYAEnmKDrmLzkSMMoZFDAudfldtyeE/wB++nSq/Hpo1SBuurteV5etPSn3/rX/AB3B0ozzBtSM9f50FfBGYEB4845V57Ki0GMFyNqIbKjhQC9sMN2BgPqvPSSQEQERGInOs2ZwgaEeBRtS2qt8WKmKm5ACBSDMobHnBKCgJUJTZHQjs36UfX/roJyFeqwXxqaMqV9sfzpBESjh14o3PbtVqD6OqX6Jp8DsrDmgZITNjoyJGYAxgsUyhoNw9FMNGMg4QcG4zoRe7m2RhrKmZC5TUoa2rBG5YwnIYaMlsSqlArAqCBcB9Mxn1YMQZHCI+i7b6EBtp5vj4HVxVhCwgAIAKpVOgMkYY6gGETsWG8EK7E2g3MEIQugwAsQY0LVTcAEwdq8njKgAMooAZV0iDKA74UBGSDkCTMJaTKGzDuEY4Z0fiIWE5UgaUGsAJoZIVUpjME0fIn6cVyIylojgTqDmEgEGDFCt5o5jNfmPdv5OHCatcH/j36OyoBnudBk9v40yJOJsqRdsSb9qW/jqgAMooAZV1Ze/7IHCDQyhVSGgIAAgBAP0IDgkFeIDgiCCViXSoKDzAiFSjGw5JE0UyGiuHAkRFIM9TnI+ut9u8URGJoJFHnSFavUVHkmsA8k/N/30PvZOyNtC02BUhjBRYyx1X16sNALhFQLCi9XaxJSUCZEQRMjqg2WU9ABJEyoQxw0OKRsMdAzDIkQm7V7QhyJVFUDd7nb1miUKAwFKoFymgE2jcisIJIglcXfV+3VACBTcAFGo9okiLEuRh+EH41MQarlUx8DoxmxYEajRDsxHOE0pjlAKBhABkGNhaGf3M9AqEA2iVpQGjqMR0ELCyNZaEM768FZ3aOB7X4BzRYrCCNJCoEyVS3MKkhDRzBTQtyc10ucQsjJSyMCuwqPaKGqwUxC4wg58aPxQZQSBUhiBWBXTocnrBAMiIIm01X6lMUgmqE8lluy84gfQUIkCLZeHZLiQgglUngN3y6f/AHSAaBMiJRNFFaeQJUXMLVVyvVrgBGFBYcwQvtr8jo8zPJwoBMI5OdTzbB7cds87Kvxpkjxv3ehSU11GmaEShKbXRdMUMqVxsH5uww5LMMKqgA3VDbOgNMNKImIJhCwybGP006VCqIKDAyJIeCKZlEno0FSHai8hoTZA2RhUWDubPh1sD9MgTh/fpm95ett40Tl5iJ5lYbIlUwUanUQA4xSLTuRFNPFXBClSRiFFMYfpPzWGqAAyigBl1f0QwqVAAcIyiAsNJ9BSORoLkC8CImjogVhcgfLhMryIvWG2Ukuz34l+NOelgiqxzloYmA93sf3bYIJhEaAiS7mh1wxDAgAkbCYHL9NQMFRUgJUilMaEalsVgSzAAASrsnadlU44CW+6Gnd76AcgMgrARA5GnHcCTAEhYA7qDhE41JpwL+3+u0HmAPu//NXEsBGOH79KYKSjpVVWr1yHctC0uBEQcnABojfsVKnkqSFcVV/UJZ6pkY0o+oamMkWALUkB5IwZhElShKUXKwbG6O0F16pX5zAjKFm4nGgOzfoM7nk1i/eY05Sr1KoaMhCOUARYIieR6QwMggpLu5YWBlcWr1d/IGMVUJBNYYfHcjg0RsYRmJRRBG7us0dtSqKQADJg07FYlWCpXLnChXN2HT5Ch/AB+D9REfAOBCo7qw97EnQrTzRIgNBmRzESqO95fgkAAVVgBql+D+70c9xAakzgnbec/noUBgAN3LpuNjEXDWBXuXF3ynUltBwlZQWYyYzqspgQaiKIBFEIihNAc6DZUK26Sqqu/wCtwbO20mA4FKRi6DXCZ4lwFkBbINyusxdkRkIwPFYxM4ArfDoR2z1shApfP0NnG4yIMAIFQQFpnSPHVZ3bmxgVWuw1mnbQNpTEKDk5OttN9jQtFkh1RuKLLAV3RoQloVQwbKGQIiw7A6SAJSSpLbLPLvidjDlooAoKbAAFAA4h02dYmW1M9OXx+pnOiAFZHeTfjB0MrlH/AF/roMPwDpf+C/jSFSgejiFxEunbKyBbBx+/37EBDLgoJzci4VCgqFvAQA2AMB6H+BV08UgUAnIlipVo1tw4TB9JgZYODcNDKDqEDAUBoNzDGS7K51wQZynP0OSpwnGi1RwTTtuOerPU1UIrTnFx0BQFERKJoDIMqQshSrmPm5d+xeGfHwkZ2juFwbR7SoEKlDFlw7jM4mb0YxvvzdfC1XyFQihZOELsymP1BJTl1IEMCJVUdiZ0IfS/dXoSiJKJuf6HT87+5py2yDyeMw4rypduwsAq4AiNhLk8PjRQpJd0gHACrsArA1NMaFdFZLhUyA2P+FDlHRCiJETk0481Cqs5WKFaRZoiZS3uE0YEMNDAw21mrFAUwioFhRdB2N61Uj9ABQdIrhrLAmCKBwA7Iho/fkO5MjwEKgEbgoddEsSSDcofHYgchMAOE7EBIxee3/jePUjQFWM2Zf7dAQixd4t+of2D+On4fW/WgQAPsCp2AV0xYM7YyD5mH1Lx0BjAIrxp3QQeUhg4BceZ47A7jIUA8AtgKjRjWTU53MFw67ZJQoT/ABFp+nHI7BiIR3EHcNF86GC0qxQUgiEgiuVQmpAqBUpACNgpaExlSKWQREciavgnrx9FgAPVzps04AdKqq1WvY4LtoJZ6PMQpgJYPpoEpMAC+51JeZJtvHy7W4R5OrDpJWYFcL6x+zpzYLA2quP1GAOQn79PWBR++gCljexSmZhbtqcxDVGBmIAEIY+ot2r2i+Eo0VIMFUMxu0C1oHiCEQqnAAQAAD/GLPhH3gdptKDEARMasb1lkiYwGFLQRFO/2JTBCoYRZUlAbKx9frWy2fnWRF860tAxhj00eHUmF4RDjeU0AKktm5nIIT3POdE3dMDApdhUN0d16qobnVWho+Dxo1zDqBFDA+jH6jdPBOho1NS/c07qN4v+XuaceJS6I8qcqJB0C9sMN2BgP8gCgKIiUTQDVGSiRGYDcyvLZTk1CwSS7oVTQYCmjOI4QgpiKGpERGI6DsfpimTDpyVHk30mWr0mnwD0PPZvfU/3rc9/1G28A70t/HVAAZRQAyrqs3wUARTBaBolVIaAgACAEA/yi8IOlCKBERREyKaQC3dZGKmZADFMZaXZWCACi1LgGeTChfawOigxATCOTnQjs36+x+p/vTu9/wBOFQ8s0/8Ah4O42YBmDdABSpCoXJre2yEIjYEUTDJsM/zIOU0TZDL4ahoO4JsNdAUEOcmwskgCAsJAoCUFTCopQuuQj6/Vxb1ft+o/Bfvr80/125DuWhaXAiIOTgAvuYxlBXyKhgVQqr/nJnhRGJARhIEYUQDUQbkQZByBiAELiqeGtcgDWg4FIm4gbB+lj6r9QMGdov30uwVlMCDURRAIohEUJpkPLN5qqVRqpVVV/wDAM3eJbIgIibiTRMOKSQhRexS6lhVUFECOpKmmBIhpNDhgBdEAIFBHJsmgbG99o8v7D9QVj/06z9//AL6vYJxu052FlxFxQVC3gIAbAGA9D/wmU8ikFQUlQBRHL5dOQkHFCKIFZWQJsml4WCJasMy0aw5rnI6326u720Y3mvoKpibvBpxNYJ32QMCudNmSpe8XWd97/vRQpJd0gHACrsArA1NMaFdFZLhUyA2P/iQEThLpFwsBlkStlBESFwccrALbLELw0gUxHPKMRMJhZNbA6/C1i3v+/wBALVkY31j2Vt31Sw5jtpHvq9aedU86p51fXRmABW/DrAyZaihsWwFRoxrJqc7mC4ddskoUJ/4tLPVMjGlH1DRb+8I1aVFqmAFgGhGrPd6MKRKxW5MC1wejoAQHKB59JlemnPWSgUCERERNcOFsC7Weh0H29CF+OmKdQtkcdPfITbZJ4GyzF3OsTYHAHyn2b0igmXAfdHUnI5o2Ul9cp+eNIA+WtPbD6YxwUVLGx6Y0b0WKaCKmNuJwZzBhAspaHMKX79KywzmQSD76vvo96+409jCitWQVApYozw7aAfN1GHZCGZw/71dm6kxu3KgGcAAAAf8AkEIUGqejt/t//Hf/2Q=="), Text(origin = {0, -81}, lineColor = {0, 0, 255}, fillColor = {0, 0, 255}, fillPattern = FillPattern.Solid, extent = {{-54, 17}, {54, -17}}, textString = "%name")}));
    
    end base;
    
    
    model platform
      import Modelica.SIunits;
      import Modelica.Math;
      import Modelica.Constants;
      
      parameter SIunits.Length l = 0.565 "Platform radius";
      constant StateSelect stateSelect = StateSelect.prefer annotation(
        Dialog(tab = "Advanced"));
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120) "Leg-pair displacement" ;
      parameter SIunits.Angle betha = Modelica.SIunits.Conversions.from_deg(5) "Single leg displacement from alpha";
      parameter Real legPlatformRelativePositions[6, 3] = {{l * cos(0 * alpha + (-betha) ), 0, l * sin(0 * alpha  + (-betha) )}, {l * cos(0 * alpha + betha ), 0, l * sin(0 * alpha  + betha )}, {l * cos(1 * alpha + (-betha)), 0, l * sin(1 * alpha + (-betha))}, {l * cos(1 * alpha + betha), 0, l * sin(1 * alpha + betha)}, {l * cos(2 * alpha + (-betha)), 0, l * sin(2 * alpha + (-betha))}, {l * cos(2 * alpha + betha), 0, l * sin(2 * alpha + betha)}};
      
      
      
      outer Modelica.Mechanics.MultiBody.World world;
      Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b[6] annotation(
        Placement(visible = true, transformation(origin = {-74, 8}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-123, -1}, extent = {{-9, -9}, {9, 9}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation1(r = legPlatformRelativePositions[1]) annotation(
          Placement(visible = true, transformation(origin = {0, 56}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation2(r = legPlatformRelativePositions[2]) annotation(
          Placement(visible = true, transformation(origin = {0, 36}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation3(r = legPlatformRelativePositions[3]) annotation(
          Placement(visible = true, transformation(origin = {0, 14}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation4(r = legPlatformRelativePositions[4]) annotation(
          Placement(visible = true, transformation(origin = {0, -4}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation5(r = legPlatformRelativePositions[5]) annotation(
          Placement(visible = true, transformation(origin = {0, -24}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation6(r = legPlatformRelativePositions[6]) annotation(
          Placement(visible = true, transformation(origin = {0, -46}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
      Modelica.Mechanics.MultiBody.Parts.Body platform(m = 15, r_CM = {0, 0, 0}, useQuaternions = false) annotation(
          Placement(visible = true, transformation(origin = {72, 4}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    
    
    equation
      connect(fixedTranslation1.frame_a, platform.frame_a) annotation(
          Line(points = {{10, 56}, {40, 56}, {40, 4}, {62, 4}}));
      connect(fixedTranslation2.frame_a, platform.frame_a) annotation(
          Line(points = {{10, 36}, {40, 36}, {40, 4}, {62, 4}}, color = {95, 95, 95}));
      connect(fixedTranslation3.frame_a, platform.frame_a) annotation(
          Line(points = {{10, 14}, {40, 14}, {40, 4}, {62, 4}}));
      connect(fixedTranslation4.frame_a, platform.frame_a) annotation(
          Line(points = {{10, -4}, {40, -4}, {40, 4}, {62, 4}}, color = {95, 95, 95}));
      connect(fixedTranslation5.frame_a, platform.frame_a) annotation(
          Line(points = {{10, -24}, {40, -24}, {40, 4}, {62, 4}}));
      connect(fixedTranslation6.frame_a, platform.frame_a) annotation(
          Line(points = {{10, -46}, {40, -46}, {40, 4}, {62, 4}}));
      connect(fixedTranslation1.frame_b, frame_b[1]) annotation(
          Line(points = {{-10, 56}, {-42, 56}, {-42, 8}, {-74, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation2.frame_b, frame_b[2]) annotation(
          Line(points = {{-10, 36}, {-42, 36}, {-42, 8}, {-74, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation3.frame_b, frame_b[3]) annotation(
          Line(points = {{-10, 14}, {-42, 14}, {-42, 8}, {-74, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation4.frame_b, frame_b[4]) annotation(
          Line(points = {{-10, -4}, {-42, -4}, {-42, 8}, {-74, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation5.frame_b, frame_b[5]) annotation(
          Line(points = {{-10, -24}, {-42, -24}, {-42, 8}, {-74, 8}}, color = {95, 95, 95}));
      connect(fixedTranslation6.frame_b, frame_b[6]) annotation(
          Line(points = {{-10, -46}, {-42, -46}, {-42, 8}, {-74, 8}}));
        annotation(
        uses(Modelica(version = "3.2.3")),
      Icon(graphics = {Bitmap(origin = {3, 0}, extent = {{111, -88}, {-111, 88}}, imageSource = ""), Text(origin = {-5, -71}, lineColor = {0, 60, 255}, fillColor = {0, 68, 255}, fillPattern = FillPattern.Solid, extent = {{-115, 15}, {115, -15}}, textString = "%name")}, coordinateSystem(extent = {{-120, -100}, {120, 100}})),
      Diagram(coordinateSystem(extent = {{-120, -100}, {120, 100}})));
    
    end platform;
    
    
    model six_rss_legs
      import Modelica.SIunits;
        
      parameter SIunits.Length h = 0.2 "Rotational motor's horn anchor length" annotation(
        Dialog(tab = "General"));
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120) "Leg-pair displacement";
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
      
      
      outer Modelica.Mechanics.MultiBody.World world;
      Body.rss_leg rss_leg6(lefPositionConfig = {2, -1}, stateSelect = StateSelect.avoid) annotation(
        Placement(visible = true, transformation(origin = {1, -85}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg5(lefPositionConfig = {2, 1}, stateSelect = StateSelect.avoid) annotation(
        Placement(visible = true, transformation(origin = {1, -49}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg2(lefPositionConfig = {0, -1}) annotation(
        Placement(visible = true, transformation(origin = {1, 59}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg4(lefPositionConfig = {1, -1}, stateSelect = StateSelect.avoid) annotation(
        Placement(visible = true, transformation(origin = {1, -13}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg3(lefPositionConfig = {1, 1}) annotation(
        Placement(visible = true, transformation(origin = {1, 23}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Body.rss_leg rss_leg1(lefPositionConfig = {0, 1}) annotation(
        Placement(visible = true, transformation(origin = {1, 93}, extent = {{-13, -13}, {13, 13}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a[6] annotation(
        Placement(visible = true, transformation(origin = {-98, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-98, -4}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b[6] annotation(
        Placement(visible = true, transformation(origin = {100, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {100, 0}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
    equation
      connect(rss_leg1.frame_a, frame_a[1]) annotation(
        Line(points = {{-12, 90}, {-60, 90}, {-60, 0}, {-98, 0}}, color = {95, 95, 95}));
      connect(rss_leg2.frame_a, frame_a[2]) annotation(
        Line(points = {{-12, 56}, {-60, 56}, {-60, 0}, {-98, 0}}, color = {95, 95, 95}));
      connect(rss_leg3.frame_a, frame_a[3]) annotation(
        Line(points = {{-12, 20}, {-60, 20}, {-60, 0}, {-98, 0}}));
      connect(rss_leg4.frame_a, frame_a[4]) annotation(
        Line(points = {{-12, -16}, {-60, -16}, {-60, 0}, {-98, 0}}));
      connect(rss_leg5.frame_a, frame_a[5]) annotation(
        Line(points = {{-12, -52}, {-60, -52}, {-60, 0}, {-98, 0}}));
      connect(rss_leg6.frame_a, frame_a[6]) annotation(
        Line(points = {{-12, -88}, {-60, -88}, {-60, 0}, {-98, 0}}, color = {95, 95, 95}));
      connect(rss_leg1.frame_b, frame_b[1]) annotation(
        Line(points = {{14, 94}, {60, 94}, {60, 0}, {100, 0}}));
      connect(rss_leg2.frame_b, frame_b[2]) annotation(
        Line(points = {{14, 60}, {60, 60}, {60, 0}, {100, 0}}));
      connect(rss_leg3.frame_b, frame_b[3]) annotation(
        Line(points = {{14, 24}, {60, 24}, {60, 0}, {100, 0}}, color = {95, 95, 95}));
      connect(rss_leg4.frame_b, frame_b[4]) annotation(
        Line(points = {{14, -12}, {60, -12}, {60, 0}, {100, 0}}, color = {95, 95, 95}));
      connect(rss_leg5.frame_b, frame_b[5]) annotation(
        Line(points = {{14, -48}, {60, -48}, {60, 0}, {100, 0}}, color = {95, 95, 95}));
      connect(rss_leg6.frame_b, frame_b[6]) annotation(
        Line(points = {{14, -84}, {60, -84}, {60, 0}, {100, 0}}));
      annotation(
        Diagram(coordinateSystem(extent = {{-100, -110}, {100, 110}})),
        Icon( coordinateSystem(extent = {{-100, -110}, {100, 110}}), graphics = {Text(origin = {0, -59}, lineColor = {0, 0, 255}, fillColor = {85, 0, 255}, fillPattern = FillPattern.Solid, extent = {{-60, 25}, {60, -25}}, textString = "%name")}));
    end six_rss_legs;
    
    
    model rss_leg
      import Modelica.SIunits;
      import Modelica.Math;
      import Modelica.Constants;
      
      parameter SIunits.Length h = 0.2 "Rotational motor's crank anchor length" annotation(
        Dialog(tab = "General"));
      parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120) "Leg-pair displacement";
      parameter Integer lefPositionConfig[2]={0,-1}"motorPair = 0/1/2   |   legPosition = -1(right)/1(left)";
      parameter StateSelect stateSelect = StateSelect.prefer annotation(
        Dialog(tab = "Advanced"));
      parameter Boolean useQuat = false annotation(
        Dialog(tab = "Advanced"));
        
      
      outer Modelica.Mechanics.MultiBody.World world;
      Modelica.Mechanics.MultiBody.Parts.BodyShape rod(m = 0.01, r = {-lefPositionConfig[2] * h * sin(lefPositionConfig[1] * alpha), 0.4, lefPositionConfig[2] * h * cos(lefPositionConfig[1] * alpha)}, r_CM = {-lefPositionConfig[2] * h * sin(lefPositionConfig[1] * alpha) / 2, 0.2, lefPositionConfig[2] * h * cos(lefPositionConfig[1] * alpha) / 2}, useQuaternions = useQuat) annotation(
        Placement(visible = true, transformation(origin = {28, 4}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Parts.BodyShape crank(m = 0.01, r = {lefPositionConfig[2] * h * sin(lefPositionConfig[1] * alpha), 0, -lefPositionConfig[2] * h * cos(lefPositionConfig[1] * alpha)}, r_CM = {lefPositionConfig[2] * h * sin(lefPositionConfig[1] * alpha) / 2, 0 / 2, -lefPositionConfig[2] * h * cos(lefPositionConfig[1] * alpha) / 2}, useQuaternions = useQuat) annotation(
        Placement(visible = true, transformation(origin = {-26, 4}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Joints.Spherical j2(enforceStates = stateSelect == StateSelect.always, useQuaternions = useQuat) annotation(
        Placement(visible = true, transformation(origin = {0, 4}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Joints.Revolute j1(n = {cos(lefPositionConfig[1] * alpha), 0, sin(lefPositionConfig[1] * alpha)}, phi(displayUnit = "rad", fixed = false), stateSelect = stateSelect, useAxisFlange = true, w(fixed = false)) annotation(
        Placement(visible = true, transformation(origin = {-54, 4}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Joints.Spherical j3(enforceStates = stateSelect == StateSelect.always,useQuaternions = useQuat) annotation(
        Placement(visible = true, transformation(origin = {56, 4}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_a frame_a annotation(
        Placement(visible = true, transformation(origin = {-82, 4}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-100, -22}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
      Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b annotation(
        Placement(visible = true, transformation(origin = {86, 4}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {100, 6}, extent = {{-16, -16}, {16, 16}}, rotation = 0)));
    equation
      connect(j1.frame_b, crank.frame_a) annotation(
        Line(points = {{-46, 4}, {-34, 4}}));
      connect(crank.frame_b, j2.frame_a) annotation(
        Line(points = {{-18, 4}, {-8, 4}}, color = {95, 95, 95}));
      connect(j2.frame_b, rod.frame_a) annotation(
        Line(points = {{8, 4}, {20, 4}}, color = {95, 95, 95}));
      connect(rod.frame_b, j3.frame_a) annotation(
        Line(points = {{36, 4}, {48, 4}}, color = {95, 95, 95}));
      connect(j3.frame_b, frame_b) annotation(
        Line(points = {{64, 4}, {86, 4}}, color = {95, 95, 95}));
      connect(j1.frame_a, frame_a) annotation(
        Line(points = {{-62, 4}, {-82, 4}}, color = {95, 95, 95}));
      annotation(
        Icon(graphics = {Text(origin = {3, -124}, lineColor = {0, 60, 255}, fillColor = {0, 68, 255}, fillPattern = FillPattern.Solid, extent = {{-145, 32}, {145, -32}}, textString = "%name"), Bitmap(origin = {1, 0}, extent = {{-80, -90}, {80, 90}}, imageSource = "")}));
    end rss_leg;
    
  end Body;
  annotation(
    uses(Modelica(version = "3.2.3")));
end OM_SP7_no_control_nomass_nomotorinfo;
