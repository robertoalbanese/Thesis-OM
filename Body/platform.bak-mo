within OM_SP7.Body;

model platform
  import Modelica.SIunits;
  import Modelica.Math;
  import Modelica.Constants;
  
  constant SIunits.Length l = 0.5735;
  constant SIunits.Length tracker_distance = 0.475;
  constant StateSelect stateSelect = StateSelect.prefer annotation(
    Dialog(tab = "Advanced"));
  parameter Boolean useQuat = false annotation(
    Dialog(tab = "Advanced"));
  parameter SIunits.Angle alpha = Modelica.SIunits.Conversions.from_deg(120);
  parameter SIunits.Angle betha = asin(60.0 / 540.0);
  parameter Real legPlatformRelativePositions[6, 3] = {{l * cos(0 * alpha + betha ), l * sin(0 * alpha  + betha ),0}, {l * cos(1 * alpha + (-betha)), l * sin(1 * alpha + (-betha)),0}, {l * cos(1 * alpha + betha), l * sin(1 * alpha + betha),0}, {l * cos(2 * alpha + (-betha)), l * sin(2 * alpha + (-betha)),0}, {l * cos(2 * alpha + betha), l * sin(2 * alpha + betha),0},{l * cos(0 * alpha + (-betha) ), l * sin(0 * alpha  + (-betha) ),0}};
  parameter Real trackerPlatformRelativePositions[3, 3] = {{tracker_distance * cos(Modelica.SIunits.Conversions.from_deg(-135)), tracker_distance * sin(Modelica.SIunits.Conversions.from_deg(-135)),0.039}, {tracker_distance * cos(Modelica.SIunits.Conversions.from_deg(-45)), tracker_distance * sin(Modelica.SIunits.Conversions.from_deg(-45)),0.039}, {tracker_distance * cos(Modelica.SIunits.Conversions.from_deg(90)), tracker_distance * sin(Modelica.SIunits.Conversions.from_deg(90)),0.039}};
  outer Modelica.Mechanics.MultiBody.World world;
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation1(r = legPlatformRelativePositions[1], width = 0.02) annotation(
    Placement(visible = true, transformation(origin = {-40, 58}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation3(r = legPlatformRelativePositions[3], width = 0.02) annotation(
      Placement(visible = true, transformation(origin = {-40, 16}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation4(r = legPlatformRelativePositions[4], width = 0.02) annotation(
      Placement(visible = true, transformation(origin = {-40, -2}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation6(r = legPlatformRelativePositions[6], width = 0.02) annotation(
      Placement(visible = true, transformation(origin = {-40, -44}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation2(r = legPlatformRelativePositions[2], width = 0.02) annotation(
      Placement(visible = true, transformation(origin = {-40, 38}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  Modelica.Mechanics.MultiBody.Interfaces.Frame_b frame_b[6] annotation(
    Placement(visible = true, transformation(origin = {-102, 10}, extent = {{-16, -16}, {16, 16}}, rotation = 0), iconTransformation(origin = {-121, -11}, extent = {{-9, -9}, {9, 9}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Joints.Revolute j_vertical(n = {0, 0, 1}, phi(displayUnit = "rad", fixed = true), useAxisFlange = true) annotation(
    Placement(visible = true, transformation(origin = {30, 8}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslation5(r = legPlatformRelativePositions[5], width = 0.02) annotation(
    Placement(visible = true, transformation(origin = {-40, -22}, extent = {{-10, -10}, {10, 10}}, rotation = 180)));
  Modelica.Mechanics.Rotational.Interfaces.Flange_a flange_a annotation(
    Placement(visible = true, transformation(origin = {30, 82}, extent = {{-6, -6}, {6, 6}}, rotation = 0), iconTransformation(origin = {-121, 15}, extent = {{-5, -5}, {5, 5}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Visualizers.FixedFrame fixedFrame(animation = false)  annotation(
    Placement(visible = true, transformation(origin = {64, 40}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.BodyShape platform(I_11 = 7.0074625, I_21 = -6.9553268e-04, I_22 = 7.0050577, I_31 = -1.7618303e-03, I_32 = -6.5744028e-03, I_33 = 1.3718970e+01, angles_fixed = true, animateSphere = false, color = {211, 211, 211}, length = 0.055, m = 78.026280, r = {0, 0, 0.039}, r_0(each fixed = true, start = {0, 0, 0.401}), r_CM = {0, 0, 0}, r_shape = {0, 0,-0.016}, width = 2*l) annotation(
    Placement(visible = true, transformation(origin = {66, 8}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslationTracker1(animation = false, r = trackerPlatformRelativePositions[1])  annotation(
    Placement(visible = true, transformation(origin = {38, -28}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslationTracker2(animation = false, r = trackerPlatformRelativePositions[2]) annotation(
    Placement(visible = true, transformation(origin = {38, -44}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.FixedTranslation fixedTranslationTracker3(animation = false, r = trackerPlatformRelativePositions[3]) annotation(
    Placement(visible = true, transformation(origin = {38, -60}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.BodyShape VIVE_tracker1(animateSphere = false,color = {20, 20, 20},length = 0.05, lengthDirection = {0, 0, -1},m = 0, r = {0, 0, 0}, r_CM = {0, 0, 0}, r_shape = {0, 0, 0.015}, shapeType = "cone", width = 0.1)  annotation(
    Placement(visible = true, transformation(origin = {74, -28}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.BodyShape VIVE_tracker2(animateSphere = false,color = {20, 20, 20}, length = 0.05, lengthDirection = {0, 0, -1}, m = 0, r = {0, 0, 0}, r_CM = {0, 0, 0}, r_shape = {0, 0, 0.015}, shapeType = "cone", width = 0.1) annotation(
    Placement(visible = true, transformation(origin = {74, -44}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Parts.BodyShape VIVE_tracker3(animateSphere = false,color = {20, 20, 20}, length = 0.05, lengthDirection = {0, 0, -1}, m = 0, r = {0, 0, 0}, r_CM = {0, 0, 0}, r_shape = {0, 0, 0.015}, shapeType = "cone", width = 0.1) annotation(
    Placement(visible = true, transformation(origin = {74, -60}, extent = {{-6, -6}, {6, 6}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Visualizers.FixedFrame fixedFrame1(animation = false)  annotation(
    Placement(visible = true, transformation(origin = {108, -28}, extent = {{-4, -4}, {4, 4}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Visualizers.FixedFrame fixedFrame2(animation = false) annotation(
    Placement(visible = true, transformation(origin = {108, -44}, extent = {{-4, -4}, {4, 4}}, rotation = 0)));
  Modelica.Mechanics.MultiBody.Visualizers.FixedFrame fixedFrame3(animation = false) annotation(
    Placement(visible = true, transformation(origin = {108, -60}, extent = {{-4, -4}, {4, 4}}, rotation = 0)));
equation
  connect(fixedTranslation2.frame_b, frame_b[2]) annotation(
    Line(points = {{-50, 38}, {-82, 38}, {-82, 10}, {-102, 10}}, color = {95, 95, 95}));
  connect(fixedTranslation2.frame_a, j_vertical.frame_a) annotation(
    Line(points = {{-30, 38}, {0, 38}, {0, 8}, {22, 8}}, color = {95, 95, 95}));
  connect(fixedTranslation1.frame_a, j_vertical.frame_a) annotation(
    Line(points = {{-30, 58}, {0, 58}, {0, 8}, {22, 8}}));
  connect(fixedTranslation3.frame_a, j_vertical.frame_a) annotation(
    Line(points = {{-30, 16}, {0, 16}, {0, 8}, {22, 8}}));
  connect(fixedTranslation6.frame_a, j_vertical.frame_a) annotation(
    Line(points = {{-30, -44}, {0, -44}, {0, 8}, {22, 8}}));
  connect(fixedTranslation5.frame_b, frame_b[5]) annotation(
    Line(points = {{-50, -22}, {-82, -22}, {-82, 10}, {-102, 10}}, color = {95, 95, 95}));
  connect(fixedTranslation5.frame_a, j_vertical.frame_a) annotation(
    Line(points = {{-30, -22}, {0, -22}, {0, 8}, {22, 8}}));
  connect(fixedTranslation3.frame_b, frame_b[3]) annotation(
    Line(points = {{-50, 16}, {-82, 16}, {-82, 10}, {-102, 10}}, color = {95, 95, 95}));
  connect(fixedTranslation6.frame_b, frame_b[6]) annotation(
    Line(points = {{-50, -44}, {-82, -44}, {-82, 10}, {-102, 10}}));
  connect(fixedTranslation1.frame_b, frame_b[1]) annotation(
    Line(points = {{-50, 58}, {-82, 58}, {-82, 10}, {-102, 10}}, color = {95, 95, 95}));
  connect(fixedTranslation4.frame_a, j_vertical.frame_a) annotation(
    Line(points = {{-30, -2}, {0, -2}, {0, 8}, {22, 8}}, color = {95, 95, 95}));
  connect(fixedTranslation4.frame_b, frame_b[4]) annotation(
    Line(points = {{-50, -2}, {-82, -2}, {-82, 10}, {-102, 10}}, color = {95, 95, 95}));
  connect(flange_a, j_vertical.axis) annotation(
    Line(points = {{30, 82}, {30, 16}}));
  connect(j_vertical.frame_b, platform.frame_a) annotation(
    Line(points = {{38, 8}, {58, 8}}));
  connect(j_vertical.frame_b, fixedFrame.frame_a) annotation(
    Line(points = {{38, 8}, {44, 8}, {44, 40}, {54, 40}}, color = {95, 95, 95}));
  connect(fixedTranslationTracker1.frame_b, VIVE_tracker1.frame_a) annotation(
    Line(points = {{48, -28}, {68, -28}}));
  connect(fixedTranslationTracker3.frame_b, VIVE_tracker3.frame_a) annotation(
    Line(points = {{48, -60}, {68, -60}}, color = {95, 95, 95}));
  connect(fixedTranslationTracker2.frame_b, VIVE_tracker2.frame_a) annotation(
    Line(points = {{48, -44}, {68, -44}}));
  connect(j_vertical.frame_b, fixedTranslationTracker1.frame_a) annotation(
    Line(points = {{38, 8}, {44, 8}, {44, -12}, {14, -12}, {14, -28}, {28, -28}}, color = {95, 95, 95}));
  connect(j_vertical.frame_b, fixedTranslationTracker2.frame_a) annotation(
    Line(points = {{38, 8}, {44, 8}, {44, -12}, {14, -12}, {14, -44}, {28, -44}}, color = {95, 95, 95}));
  connect(j_vertical.frame_b, fixedTranslationTracker3.frame_a) annotation(
    Line(points = {{38, 8}, {44, 8}, {44, -12}, {14, -12}, {14, -60}, {28, -60}}, color = {95, 95, 95}));
  connect(VIVE_tracker1.frame_b, fixedFrame1.frame_a) annotation(
    Line(points = {{80, -28}, {104, -28}}));
  connect(VIVE_tracker2.frame_b, fixedFrame2.frame_a) annotation(
    Line(points = {{80, -44}, {104, -44}}));
  connect(VIVE_tracker3.frame_b, fixedFrame3.frame_a) annotation(
    Line(points = {{80, -60}, {104, -60}}));
  annotation(
    uses(Modelica(version = "3.2.3")),
  Icon(graphics = {Text(origin = {-5, -109}, textColor = {0, 60, 255}, extent = {{-115, 15}, {115, -15}}, textString = "%name"), Rectangle(origin = {-3, -3}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-95, 81}, {95, -81}}), Rectangle(origin = {-3, -3}, lineColor = {131, 131, 131}, fillColor = {255, 255, 255}, lineThickness = 1, extent = {{-95, 81}, {95, -81}}), Bitmap(origin = {-4, -1}, extent = {{88, -85}, {-88, 85}}, imageSource = "")}, coordinateSystem(extent = {{-120, -100}, {120, 100}})),
  Diagram(coordinateSystem(extent = {{-120, -100}, {120, 100}})),
  __OpenModelica_commandLineOptions = "--matchingAlgorithm=PFPlusExt --indexReductionMethod=dynamicStateSelection -d=initialization,NLSanalyticJacobian",
  __OpenModelica_simulationFlags(lv = "LOG_STATS", s = "cvode", ls = "totalpivot"),
  experiment(StartTime = 0, StopTime = 3, Tolerance = 1e-6, Interval = 0.08));

end platform;
